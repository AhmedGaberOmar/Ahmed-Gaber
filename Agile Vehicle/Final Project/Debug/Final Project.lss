
Final Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00002084  00002118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002084  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000902  00800108  00800108  00002120  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002120  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002150  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000410  00000000  00000000  0000218c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000060b1  00000000  00000000  0000259c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001616  00000000  00000000  0000864d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c87  00000000  00000000  00009c63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000980  00000000  00000000  0000c8ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012a6  00000000  00000000  0000d26c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000229a  00000000  00000000  0000e512  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b0  00000000  00000000  000107ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__vector_1>
       8:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__vector_2>
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 b8 08 	jmp	0x1170	; 0x1170 <__vector_10>
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 39 0b 	jmp	0x1672	; 0x1672 <__vector_12>
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <__vector_16>
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 f8 08 	jmp	0x11f0	; 0x11f0 <__vector_18>
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 e8       	ldi	r30, 0x84	; 132
      a0:	f0 e2       	ldi	r31, 0x20	; 32
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 30       	cpi	r26, 0x08	; 8
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	2a e0       	ldi	r18, 0x0A	; 10
      b4:	a8 e0       	ldi	r26, 0x08	; 8
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	aa 30       	cpi	r26, 0x0A	; 10
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	64 d0       	rcall	.+200    	; 0x18c <main>
      c4:	0c 94 40 10 	jmp	0x2080	; 0x2080 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <LED_Matrix_Task>:

void LED_Matrix_Task (void)
{
	while(1)
	{
		Chnage_Led_Matrix_Mode();
      ca:	f3 d5       	rcall	.+3046   	; 0xcb2 <Chnage_Led_Matrix_Mode>
		vTaskDelay(100);
      cc:	84 e6       	ldi	r24, 0x64	; 100
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <vTaskDelay>
      d4:	fa cf       	rjmp	.-12     	; 0xca <LED_Matrix_Task>

000000d6 <Blind_Spot_Task>:
		if( distance <= 6)
		{
			PORTA |= (1<<1);
			if(flag==0)
			{
				flag =1;
      d6:	c1 e0       	ldi	r28, 0x01	; 1
void Blind_Spot_Task(void)
{

	while (1)
	{
		u8 distance = Ultra_get_blind_distance(BACK_LEFT);
      d8:	83 e0       	ldi	r24, 0x03	; 3
      da:	b6 d7       	rcall	.+3948   	; 0x1048 <Ultra_get_blind_distance>
		if( distance <= 6)
      dc:	87 30       	cpi	r24, 0x07	; 7
      de:	58 f4       	brcc	.+22     	; 0xf6 <Blind_Spot_Task+0x20>
		{
			PORTA |= (1<<1);
      e0:	d9 9a       	sbi	0x1b, 1	; 27
			if(flag==0)
      e2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
      e6:	81 11       	cpse	r24, r1
      e8:	11 c0       	rjmp	.+34     	; 0x10c <Blind_Spot_Task+0x36>
			{
				flag =1;
      ea:	c0 93 08 01 	sts	0x0108, r28	; 0x800108 <__data_end>
				Stepper_forward(LEFT_MIRROR,100);
      ee:	64 e6       	ldi	r22, 0x64	; 100
      f0:	70 e0       	ldi	r23, 0x00	; 0
      f2:	50 d6       	rcall	.+3232   	; 0xd94 <Stepper_forward>
      f4:	0b c0       	rjmp	.+22     	; 0x10c <Blind_Spot_Task+0x36>
				
			}
		}
		else if (distance > 6)
		{
			PORTA &= ~(1<<1);
      f6:	d9 98       	cbi	0x1b, 1	; 27
			if(flag == 1)
      f8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
      fc:	81 30       	cpi	r24, 0x01	; 1
      fe:	31 f4       	brne	.+12     	; 0x10c <Blind_Spot_Task+0x36>
			{
				flag =0;
     100:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
				Stepper_backward(LEFT_MIRROR,100);
     104:	64 e6       	ldi	r22, 0x64	; 100
     106:	70 e0       	ldi	r23, 0x00	; 0
     108:	80 e0       	ldi	r24, 0x00	; 0
     10a:	b9 d6       	rcall	.+3442   	; 0xe7e <Stepper_backward>
			}
		}
		vTaskDelay(500);
     10c:	84 ef       	ldi	r24, 0xF4	; 244
     10e:	91 e0       	ldi	r25, 0x01	; 1
     110:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <vTaskDelay>
	}
     114:	e1 cf       	rjmp	.-62     	; 0xd8 <Blind_Spot_Task+0x2>

00000116 <Avoidance_Task>:

void Avoidance_Task (void)
{
	while(1)
	{
		int DISTANCE = Ultra_get_acc_distance(FRONT);
     116:	80 e0       	ldi	r24, 0x00	; 0
     118:	4f d7       	rcall	.+3742   	; 0xfb8 <Ultra_get_acc_distance>
     11a:	ec 01       	movw	r28, r24
		motor_normal();
     11c:	db d0       	rcall	.+438    	; 0x2d4 <motor_normal>
		if ( DISTANCE > 25 )
     11e:	ca 31       	cpi	r28, 0x1A	; 26
     120:	d1 05       	cpc	r29, r1
     122:	54 f0       	brlt	.+20     	; 0x138 <Avoidance_Task+0x22>
		{
			vTaskDelay(500);
     124:	84 ef       	ldi	r24, 0xF4	; 244
     126:	91 e0       	ldi	r25, 0x01	; 1
     128:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <vTaskDelay>
			motor_forward();
     12c:	a0 d0       	rcall	.+320    	; 0x26e <motor_forward>
			vTaskDelay(1000);
     12e:	88 ee       	ldi	r24, 0xE8	; 232
     130:	93 e0       	ldi	r25, 0x03	; 3
     132:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <vTaskDelay>
     136:	ef cf       	rjmp	.-34     	; 0x116 <Avoidance_Task>
		}
		else if (DISTANCE < 25)
     138:	69 97       	sbiw	r28, 0x19	; 25
		{
			motor_stop();
     13a:	6c f7       	brge	.-38     	; 0x116 <Avoidance_Task>
     13c:	9e d0       	rcall	.+316    	; 0x27a <motor_stop>
			vTaskDelay(1000);
     13e:	88 ee       	ldi	r24, 0xE8	; 232
     140:	93 e0       	ldi	r25, 0x03	; 3
			motor_right();
     142:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <vTaskDelay>
			motor_backword();
     146:	9c d0       	rcall	.+312    	; 0x280 <motor_right>
			vTaskDelay(1000);
     148:	95 d0       	rcall	.+298    	; 0x274 <motor_backword>
     14a:	88 ee       	ldi	r24, 0xE8	; 232
     14c:	93 e0       	ldi	r25, 0x03	; 3
			motor_stop();
     14e:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <vTaskDelay>
			motor_normal();
			vTaskDelay(1000);
     152:	93 d0       	rcall	.+294    	; 0x27a <motor_stop>
     154:	bf d0       	rcall	.+382    	; 0x2d4 <motor_normal>
     156:	88 ee       	ldi	r24, 0xE8	; 232
			motor_left();
     158:	93 e0       	ldi	r25, 0x03	; 3
     15a:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <vTaskDelay>
			motor_forward();
     15e:	a5 d0       	rcall	.+330    	; 0x2aa <motor_left>
			vTaskDelay(1000);
     160:	86 d0       	rcall	.+268    	; 0x26e <motor_forward>
     162:	88 ee       	ldi	r24, 0xE8	; 232
			motor_stop();
     164:	93 e0       	ldi	r25, 0x03	; 3
     166:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <vTaskDelay>
			vTaskDelay(500);
     16a:	87 d0       	rcall	.+270    	; 0x27a <motor_stop>
     16c:	84 ef       	ldi	r24, 0xF4	; 244
			motor_normal();
     16e:	91 e0       	ldi	r25, 0x01	; 1
     170:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <vTaskDelay>
			motor_forward();
     174:	af d0       	rcall	.+350    	; 0x2d4 <motor_normal>
			vTaskDelay(1000);
     176:	7b d0       	rcall	.+246    	; 0x26e <motor_forward>
     178:	88 ee       	ldi	r24, 0xE8	; 232
     17a:	93 e0       	ldi	r25, 0x03	; 3
     17c:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <vTaskDelay>
			motor_stop();
     180:	7c d0       	rcall	.+248    	; 0x27a <motor_stop>
			vTaskDelay(1000);
     182:	88 ee       	ldi	r24, 0xE8	; 232
     184:	93 e0       	ldi	r25, 0x03	; 3
     186:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <vTaskDelay>
     18a:	c5 cf       	rjmp	.-118    	; 0x116 <Avoidance_Task>

0000018c <main>:
void Blind_Spot_Task(void);
void Avoidance_Task(void);

/*light control with steering right and left*/
int main(void)
{
     18c:	af 92       	push	r10
     18e:	bf 92       	push	r11
     190:	cf 92       	push	r12
     192:	df 92       	push	r13
     194:	ef 92       	push	r14
     196:	ff 92       	push	r15
     198:	0f 93       	push	r16
	int control;
	Stepper_Init();
     19a:	f8 d5       	rcall	.+3056   	; 0xd8c <Stepper_Init>
	Bluetooth_Init();
     19c:	43 d0       	rcall	.+134    	; 0x224 <Bluetooth_Init>
	Ultra_Init();
     19e:	ee d6       	rcall	.+3548   	; 0xf7c <Ultra_Init>
     1a0:	8a b3       	in	r24, 0x1a	; 26
	DDRA |= 0X03;
     1a2:	83 60       	ori	r24, 0x03	; 3
     1a4:	8a bb       	out	0x1a, r24	; 26
	
 	motor_init();
     1a6:	44 d0       	rcall	.+136    	; 0x230 <motor_init>
     1a8:	3d d0       	rcall	.+122    	; 0x224 <Bluetooth_Init>
 	Bluetooth_Init();
     1aa:	a1 2c       	mov	r10, r1
     1ac:	b1 2c       	mov	r11, r1
 	xTaskCreate(LED_Matrix_Task,NULL,50,NULL,2,NULL);
     1ae:	c1 2c       	mov	r12, r1
     1b0:	d1 2c       	mov	r13, r1
     1b2:	e1 2c       	mov	r14, r1
     1b4:	f1 2c       	mov	r15, r1
     1b6:	02 e0       	ldi	r16, 0x02	; 2
     1b8:	20 e0       	ldi	r18, 0x00	; 0
     1ba:	30 e0       	ldi	r19, 0x00	; 0
     1bc:	42 e3       	ldi	r20, 0x32	; 50
     1be:	50 e0       	ldi	r21, 0x00	; 0
     1c0:	60 e0       	ldi	r22, 0x00	; 0
     1c2:	70 e0       	ldi	r23, 0x00	; 0
     1c4:	85 e6       	ldi	r24, 0x65	; 101
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	0e 94 8f 0b 	call	0x171e	; 0x171e <xTaskGenericCreate>
     1cc:	01 e0       	ldi	r16, 0x01	; 1
     1ce:	20 e0       	ldi	r18, 0x00	; 0
 	xTaskCreate(Blind_Spot_Task,NULL,50,NULL,1,NULL);
     1d0:	30 e0       	ldi	r19, 0x00	; 0
     1d2:	42 e3       	ldi	r20, 0x32	; 50
     1d4:	50 e0       	ldi	r21, 0x00	; 0
     1d6:	60 e0       	ldi	r22, 0x00	; 0
     1d8:	70 e0       	ldi	r23, 0x00	; 0
     1da:	8b e6       	ldi	r24, 0x6B	; 107
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	0e 94 8f 0b 	call	0x171e	; 0x171e <xTaskGenericCreate>
     1e2:	03 e0       	ldi	r16, 0x03	; 3
     1e4:	20 e0       	ldi	r18, 0x00	; 0
 	xTaskCreate(Avoidance_Task,NULL,200,NULL,3,NULL);
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	48 ec       	ldi	r20, 0xC8	; 200
     1ea:	50 e0       	ldi	r21, 0x00	; 0
     1ec:	60 e0       	ldi	r22, 0x00	; 0
     1ee:	70 e0       	ldi	r23, 0x00	; 0
     1f0:	8b e8       	ldi	r24, 0x8B	; 139
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	0e 94 8f 0b 	call	0x171e	; 0x171e <xTaskGenericCreate>
	
	for (u8 i=0;i<5;i++)
	{
		LED_Matrix_init();
     1f8:	af d0       	rcall	.+350    	; 0x358 <LED_Matrix_init>
     1fa:	ae d0       	rcall	.+348    	; 0x358 <LED_Matrix_init>
     1fc:	ad d0       	rcall	.+346    	; 0x358 <LED_Matrix_init>
     1fe:	ac d0       	rcall	.+344    	; 0x358 <LED_Matrix_init>
     200:	ab d0       	rcall	.+342    	; 0x358 <LED_Matrix_init>
     202:	81 b3       	in	r24, 0x11	; 17
     204:	80 6c       	ori	r24, 0xC0	; 192
	}
	
	setbits(DDRD, 0b11000000);
     206:	81 bb       	out	0x11, r24	; 17
     208:	b9 d6       	rcall	.+3442   	; 0xf7c <Ultra_Init>
     20a:	c0 d5       	rcall	.+2944   	; 0xd8c <Stepper_Init>
  	Ultra_Init();
     20c:	0e 94 8b 0c 	call	0x1916	; 0x1916 <vTaskStartScheduler>
  	Stepper_Init();
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	90 e0       	ldi	r25, 0x00	; 0
	vTaskStartScheduler();
     214:	0f 91       	pop	r16
     216:	ff 90       	pop	r15

}
     218:	ef 90       	pop	r14
     21a:	df 90       	pop	r13
     21c:	cf 90       	pop	r12
     21e:	bf 90       	pop	r11
     220:	af 90       	pop	r10
     222:	08 95       	ret

00000224 <Bluetooth_Init>:
  
#include "Bluetooth.h"


void Bluetooth_Init(){
	USART1_Init(F_CPU/16/9600-1);
     224:	63 e3       	ldi	r22, 0x33	; 51
     226:	70 e0       	ldi	r23, 0x00	; 0
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	cc c7       	rjmp	.+3992   	; 0x11c6 <USART1_Init>
     22e:	08 95       	ret

00000230 <motor_init>:
volatile extern left_flg;
volatile extern right_flag;
volatile extern normal_flag;

void motor_init(void){
	setbits(control_DDR,0b11000000);
     230:	81 b3       	in	r24, 0x11	; 17
     232:	80 6c       	ori	r24, 0xC0	; 192
     234:	81 bb       	out	0x11, r24	; 17
	clearbits(PORTD,0b11000000);
     236:	82 b3       	in	r24, 0x12	; 18
     238:	8f 73       	andi	r24, 0x3F	; 63
     23a:	82 bb       	out	0x12, r24	; 18
	/* timer 1 for the servo */
	setbits(TCCR3A,0b10000010);			 //NON Inverted Fast PWM                  com1A=10  -  WGM1n=10
     23c:	eb e8       	ldi	r30, 0x8B	; 139
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	80 81       	ld	r24, Z
     242:	82 68       	ori	r24, 0x82	; 130
     244:	80 83       	st	Z, r24
	setbits(TCCR3B,0b00011011);			 //PRESCALER=64 MODE 14(FAST PWM)         CS=011    -  WGM1n=11
     246:	ea e8       	ldi	r30, 0x8A	; 138
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	8b 61       	ori	r24, 0x1B	; 27
     24e:	80 83       	st	Z, r24
	ICR3=2499;							 //servo frequency=50Hz (time for  complete cycle = 20ms)
     250:	83 ec       	ldi	r24, 0xC3	; 195
     252:	99 e0       	ldi	r25, 0x09	; 9
     254:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     258:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	setbit(DDRE,PINE3);					 //set the OC1A as an output
     25c:	13 9a       	sbi	0x02, 3	; 2
	OCR3A=195;
     25e:	83 ec       	ldi	r24, 0xC3	; 195
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     266:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	
	/* timer 2 for the dc motor*/
// 	setbits(TCCR2,0b01101010);           //NON Inverted Fast _ PWM PRESCALER 8 
// 	setbit(DDRB,pwm_DC);
// 	OCR2=235;
	PORTB|=(1<<7);
     26a:	c7 9a       	sbi	0x18, 7	; 24
     26c:	08 95       	ret

0000026e <motor_forward>:
}
/* dc motor */

void motor_forward(void){
	setbit(control_port,control_DC1);
     26e:	96 9a       	sbi	0x12, 6	; 18
	clearbit(control_port,control_DC2);
     270:	97 98       	cbi	0x12, 7	; 18
     272:	08 95       	ret

00000274 <motor_backword>:
}
void motor_backword(void){
	setbit(control_port,control_DC2);
     274:	97 9a       	sbi	0x12, 7	; 18
	clearbit(control_port,control_DC1);
     276:	96 98       	cbi	0x12, 6	; 18
     278:	08 95       	ret

0000027a <motor_stop>:
}
void motor_stop(void){
	setbit(control_port,control_DC1);
     27a:	96 9a       	sbi	0x12, 6	; 18
	setbit(control_port,control_DC2);
     27c:	97 9a       	sbi	0x12, 7	; 18
     27e:	08 95       	ret

00000280 <motor_right>:


/* servo moter */
void motor_right(void)
{
	left_flg =0;
     280:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <timer2_overflows>
     284:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <left_flg>
	right_flag=1;
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <left_flg>
     290:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <right_flag>
	normal_flag=0;
     294:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <xNextTaskUnblockTime>
     298:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	OCR3A=325;
     29c:	85 e4       	ldi	r24, 0x45	; 69
     29e:	91 e0       	ldi	r25, 0x01	; 1
     2a0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     2a4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     2a8:	08 95       	ret

000002aa <motor_left>:
}
void motor_left(void)
{
	normal_flag=0;
     2aa:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <xNextTaskUnblockTime>
     2ae:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	left_flg =1;
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timer2_overflows>
     2ba:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <left_flg>
	right_flag=0;
     2be:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <left_flg>
     2c2:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <right_flag>
	
	OCR3A=150;
     2c6:	86 e9       	ldi	r24, 0x96	; 150
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     2ce:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     2d2:	08 95       	ret

000002d4 <motor_normal>:

}
void motor_normal(void){
	left_flg =0;
     2d4:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <timer2_overflows>
     2d8:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <left_flg>
	right_flag=0;
     2dc:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <left_flg>
     2e0:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <right_flag>
	normal_flag=1;
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <xNextTaskUnblockTime>
     2ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	OCR3A=225;
     2f0:	81 ee       	ldi	r24, 0xE1	; 225
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     2f8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     2fc:	08 95       	ret

000002fe <LED_Matrix_write>:
	LED_Matrix_write(Matrix_sel,D5,Data);
	LED_Matrix_write(Matrix_sel,D6,Data);
	LED_Matrix_write(Matrix_sel,D7,Data);
}
void LED_Matrix_ClearAll(u8 Matrix_sel){
	LED_Matrix_write(Matrix_sel,Shutdown, OFF);
     2fe:	cf 93       	push	r28
     300:	c4 2f       	mov	r28, r20
     302:	81 30       	cpi	r24, 0x01	; 1
     304:	39 f4       	brne	.+14     	; 0x314 <LED_Matrix_write+0x16>
     306:	c6 98       	cbi	0x18, 6	; 24
     308:	86 2f       	mov	r24, r22
     30a:	57 d7       	rcall	.+3758   	; 0x11ba <SPI_Transcive>
     30c:	8c 2f       	mov	r24, r28
     30e:	55 d7       	rcall	.+3754   	; 0x11ba <SPI_Transcive>
     310:	c6 9a       	sbi	0x18, 6	; 24
     312:	1a c0       	rjmp	.+52     	; 0x348 <LED_Matrix_write+0x4a>
     314:	82 30       	cpi	r24, 0x02	; 2
     316:	39 f4       	brne	.+14     	; 0x326 <LED_Matrix_write+0x28>
     318:	c4 98       	cbi	0x18, 4	; 24
     31a:	86 2f       	mov	r24, r22
     31c:	4e d7       	rcall	.+3740   	; 0x11ba <SPI_Transcive>
     31e:	8c 2f       	mov	r24, r28
     320:	4c d7       	rcall	.+3736   	; 0x11ba <SPI_Transcive>
     322:	c4 9a       	sbi	0x18, 4	; 24
     324:	11 c0       	rjmp	.+34     	; 0x348 <LED_Matrix_write+0x4a>
     326:	83 30       	cpi	r24, 0x03	; 3
     328:	39 f4       	brne	.+14     	; 0x338 <LED_Matrix_write+0x3a>
     32a:	a8 98       	cbi	0x15, 0	; 21
     32c:	86 2f       	mov	r24, r22
     32e:	45 d7       	rcall	.+3722   	; 0x11ba <SPI_Transcive>
     330:	8c 2f       	mov	r24, r28
     332:	43 d7       	rcall	.+3718   	; 0x11ba <SPI_Transcive>
     334:	a8 9a       	sbi	0x15, 0	; 21
     336:	08 c0       	rjmp	.+16     	; 0x348 <LED_Matrix_write+0x4a>
     338:	84 30       	cpi	r24, 0x04	; 4
     33a:	31 f4       	brne	.+12     	; 0x348 <LED_Matrix_write+0x4a>
     33c:	c5 98       	cbi	0x18, 5	; 24
     33e:	86 2f       	mov	r24, r22
     340:	3c d7       	rcall	.+3704   	; 0x11ba <SPI_Transcive>
     342:	8c 2f       	mov	r24, r28
     344:	3a d7       	rcall	.+3700   	; 0x11ba <SPI_Transcive>
     346:	c5 9a       	sbi	0x18, 5	; 24
     348:	8f ec       	ldi	r24, 0xCF	; 207
     34a:	97 e0       	ldi	r25, 0x07	; 7
     34c:	01 97       	sbiw	r24, 0x01	; 1
     34e:	f1 f7       	brne	.-4      	; 0x34c <LED_Matrix_write+0x4e>
     350:	00 c0       	rjmp	.+0      	; 0x352 <LED_Matrix_write+0x54>
     352:	00 00       	nop
     354:	cf 91       	pop	r28
     356:	08 95       	ret

00000358 <LED_Matrix_init>:
     358:	cf 93       	push	r28
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	20 d7       	rcall	.+3648   	; 0x119e <SPI_Init>
     35e:	87 b3       	in	r24, 0x17	; 23
     360:	80 6f       	ori	r24, 0xF0	; 240
     362:	87 bb       	out	0x17, r24	; 23
     364:	a0 9a       	sbi	0x14, 0	; 20
     366:	88 b3       	in	r24, 0x18	; 24
     368:	80 6f       	ori	r24, 0xF0	; 240
     36a:	88 bb       	out	0x18, r24	; 24
     36c:	a8 9a       	sbi	0x15, 0	; 21
     36e:	84 b3       	in	r24, 0x14	; 20
     370:	81 78       	andi	r24, 0x81	; 129
     372:	84 bb       	out	0x14, r24	; 20
     374:	c1 e0       	ldi	r28, 0x01	; 1
     376:	40 e0       	ldi	r20, 0x00	; 0
     378:	69 e0       	ldi	r22, 0x09	; 9
     37a:	8c 2f       	mov	r24, r28
     37c:	c0 df       	rcall	.-128    	; 0x2fe <LED_Matrix_write>
     37e:	48 e0       	ldi	r20, 0x08	; 8
     380:	6a e0       	ldi	r22, 0x0A	; 10
     382:	8c 2f       	mov	r24, r28
     384:	bc df       	rcall	.-136    	; 0x2fe <LED_Matrix_write>
     386:	41 e0       	ldi	r20, 0x01	; 1
     388:	6c e0       	ldi	r22, 0x0C	; 12
     38a:	8c 2f       	mov	r24, r28
     38c:	b8 df       	rcall	.-144    	; 0x2fe <LED_Matrix_write>
     38e:	47 e0       	ldi	r20, 0x07	; 7
     390:	6b e0       	ldi	r22, 0x0B	; 11
     392:	8c 2f       	mov	r24, r28
     394:	b4 df       	rcall	.-152    	; 0x2fe <LED_Matrix_write>
     396:	cf 5f       	subi	r28, 0xFF	; 255
     398:	c5 30       	cpi	r28, 0x05	; 5
     39a:	69 f7       	brne	.-38     	; 0x376 <LED_Matrix_init+0x1e>
     39c:	cf 91       	pop	r28
     39e:	08 95       	ret

000003a0 <Normal_Middle_Led_Matrix>:
}

void Normal_Middle_Led_Matrix(void)
{
	LED_Matrix_write(1,D0,0);
     3a0:	40 e0       	ldi	r20, 0x00	; 0
     3a2:	61 e0       	ldi	r22, 0x01	; 1
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	ab df       	rcall	.-170    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D1,0);
     3a8:	40 e0       	ldi	r20, 0x00	; 0
     3aa:	62 e0       	ldi	r22, 0x02	; 2
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	a7 df       	rcall	.-178    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D2,0);
     3b0:	40 e0       	ldi	r20, 0x00	; 0
     3b2:	63 e0       	ldi	r22, 0x03	; 3
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	a3 df       	rcall	.-186    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D3,0);
     3b8:	40 e0       	ldi	r20, 0x00	; 0
     3ba:	64 e0       	ldi	r22, 0x04	; 4
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	9f df       	rcall	.-194    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D4,0);
     3c0:	40 e0       	ldi	r20, 0x00	; 0
     3c2:	65 e0       	ldi	r22, 0x05	; 5
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	9b df       	rcall	.-202    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D5,0);
     3c8:	40 e0       	ldi	r20, 0x00	; 0
     3ca:	66 e0       	ldi	r22, 0x06	; 6
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	97 df       	rcall	.-210    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D6,0);
     3d0:	40 e0       	ldi	r20, 0x00	; 0
     3d2:	67 e0       	ldi	r22, 0x07	; 7
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	93 df       	rcall	.-218    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D7,0);
     3d8:	40 e0       	ldi	r20, 0x00	; 0
     3da:	68 e0       	ldi	r22, 0x08	; 8
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	8f df       	rcall	.-226    	; 0x2fe <LED_Matrix_write>
	
	LED_Matrix_write(2,D0,0);
     3e0:	40 e0       	ldi	r20, 0x00	; 0
     3e2:	61 e0       	ldi	r22, 0x01	; 1
     3e4:	82 e0       	ldi	r24, 0x02	; 2
     3e6:	8b df       	rcall	.-234    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D1,0);
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	62 e0       	ldi	r22, 0x02	; 2
     3ec:	82 e0       	ldi	r24, 0x02	; 2
     3ee:	87 df       	rcall	.-242    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D2,0);
     3f0:	40 e0       	ldi	r20, 0x00	; 0
     3f2:	63 e0       	ldi	r22, 0x03	; 3
     3f4:	82 e0       	ldi	r24, 0x02	; 2
     3f6:	83 df       	rcall	.-250    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D3,0xff);
     3f8:	4f ef       	ldi	r20, 0xFF	; 255
     3fa:	64 e0       	ldi	r22, 0x04	; 4
     3fc:	82 e0       	ldi	r24, 0x02	; 2
     3fe:	7f df       	rcall	.-258    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D4,0xff);
     400:	4f ef       	ldi	r20, 0xFF	; 255
     402:	65 e0       	ldi	r22, 0x05	; 5
     404:	82 e0       	ldi	r24, 0x02	; 2
     406:	7b df       	rcall	.-266    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D5,0);
     408:	40 e0       	ldi	r20, 0x00	; 0
     40a:	66 e0       	ldi	r22, 0x06	; 6
     40c:	82 e0       	ldi	r24, 0x02	; 2
     40e:	77 df       	rcall	.-274    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D6,0);
     410:	40 e0       	ldi	r20, 0x00	; 0
     412:	67 e0       	ldi	r22, 0x07	; 7
     414:	82 e0       	ldi	r24, 0x02	; 2
     416:	73 df       	rcall	.-282    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D7,0);
     418:	40 e0       	ldi	r20, 0x00	; 0
     41a:	68 e0       	ldi	r22, 0x08	; 8
     41c:	82 e0       	ldi	r24, 0x02	; 2
     41e:	6f df       	rcall	.-290    	; 0x2fe <LED_Matrix_write>
	
	LED_Matrix_write(3,D0,0);
     420:	40 e0       	ldi	r20, 0x00	; 0
     422:	61 e0       	ldi	r22, 0x01	; 1
     424:	83 e0       	ldi	r24, 0x03	; 3
     426:	6b df       	rcall	.-298    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D1,0);
     428:	40 e0       	ldi	r20, 0x00	; 0
     42a:	62 e0       	ldi	r22, 0x02	; 2
     42c:	83 e0       	ldi	r24, 0x03	; 3
     42e:	67 df       	rcall	.-306    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D2,0);
     430:	40 e0       	ldi	r20, 0x00	; 0
     432:	63 e0       	ldi	r22, 0x03	; 3
     434:	83 e0       	ldi	r24, 0x03	; 3
     436:	63 df       	rcall	.-314    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D3,0xff);
     438:	4f ef       	ldi	r20, 0xFF	; 255
     43a:	64 e0       	ldi	r22, 0x04	; 4
     43c:	83 e0       	ldi	r24, 0x03	; 3
     43e:	5f df       	rcall	.-322    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D4,0xff);
     440:	4f ef       	ldi	r20, 0xFF	; 255
     442:	65 e0       	ldi	r22, 0x05	; 5
     444:	83 e0       	ldi	r24, 0x03	; 3
     446:	5b df       	rcall	.-330    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D5,0);
     448:	40 e0       	ldi	r20, 0x00	; 0
     44a:	66 e0       	ldi	r22, 0x06	; 6
     44c:	83 e0       	ldi	r24, 0x03	; 3
     44e:	57 df       	rcall	.-338    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D6,0);
     450:	40 e0       	ldi	r20, 0x00	; 0
     452:	67 e0       	ldi	r22, 0x07	; 7
     454:	83 e0       	ldi	r24, 0x03	; 3
     456:	53 df       	rcall	.-346    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D7,0);
     458:	40 e0       	ldi	r20, 0x00	; 0
     45a:	68 e0       	ldi	r22, 0x08	; 8
     45c:	83 e0       	ldi	r24, 0x03	; 3
     45e:	4f df       	rcall	.-354    	; 0x2fe <LED_Matrix_write>
	
	LED_Matrix_write(4,D0,0);
     460:	40 e0       	ldi	r20, 0x00	; 0
     462:	61 e0       	ldi	r22, 0x01	; 1
     464:	84 e0       	ldi	r24, 0x04	; 4
     466:	4b df       	rcall	.-362    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(4,D1,0);
     468:	40 e0       	ldi	r20, 0x00	; 0
     46a:	62 e0       	ldi	r22, 0x02	; 2
     46c:	84 e0       	ldi	r24, 0x04	; 4
     46e:	47 df       	rcall	.-370    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(4,D2,0);
     470:	40 e0       	ldi	r20, 0x00	; 0
     472:	63 e0       	ldi	r22, 0x03	; 3
     474:	84 e0       	ldi	r24, 0x04	; 4
     476:	43 df       	rcall	.-378    	; 0x2fe <LED_Matrix_write>
     478:	40 e0       	ldi	r20, 0x00	; 0
	LED_Matrix_write(4,D3,0);
     47a:	64 e0       	ldi	r22, 0x04	; 4
     47c:	84 e0       	ldi	r24, 0x04	; 4
     47e:	3f df       	rcall	.-386    	; 0x2fe <LED_Matrix_write>
     480:	40 e0       	ldi	r20, 0x00	; 0
     482:	65 e0       	ldi	r22, 0x05	; 5
	LED_Matrix_write(4,D4,0);
     484:	84 e0       	ldi	r24, 0x04	; 4
     486:	3b df       	rcall	.-394    	; 0x2fe <LED_Matrix_write>
     488:	40 e0       	ldi	r20, 0x00	; 0
     48a:	66 e0       	ldi	r22, 0x06	; 6
     48c:	84 e0       	ldi	r24, 0x04	; 4
	LED_Matrix_write(4,D5,0);
     48e:	37 df       	rcall	.-402    	; 0x2fe <LED_Matrix_write>
     490:	40 e0       	ldi	r20, 0x00	; 0
     492:	67 e0       	ldi	r22, 0x07	; 7
     494:	84 e0       	ldi	r24, 0x04	; 4
     496:	33 df       	rcall	.-410    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(4,D6,0);
     498:	40 e0       	ldi	r20, 0x00	; 0
     49a:	68 e0       	ldi	r22, 0x08	; 8
     49c:	84 e0       	ldi	r24, 0x04	; 4
     49e:	2f cf       	rjmp	.-418    	; 0x2fe <LED_Matrix_write>
     4a0:	08 95       	ret

000004a2 <UP_Middle_Led_Matrix>:
	LED_Matrix_write(4,D7,0);
     4a2:	40 e0       	ldi	r20, 0x00	; 0
     4a4:	61 e0       	ldi	r22, 0x01	; 1
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	2a df       	rcall	.-428    	; 0x2fe <LED_Matrix_write>
     4aa:	40 e0       	ldi	r20, 0x00	; 0
     4ac:	62 e0       	ldi	r22, 0x02	; 2
}
void UP_Middle_Led_Matrix(void)
{
	LED_Matrix_write(1,D0,0);
	LED_Matrix_write(1,D1,0);
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	26 df       	rcall	.-436    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D2,0);
     4b2:	40 e0       	ldi	r20, 0x00	; 0
     4b4:	63 e0       	ldi	r22, 0x03	; 3
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	22 df       	rcall	.-444    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D3,0);
     4ba:	40 e0       	ldi	r20, 0x00	; 0
     4bc:	64 e0       	ldi	r22, 0x04	; 4
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	1e df       	rcall	.-452    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D4,0);
     4c2:	40 e0       	ldi	r20, 0x00	; 0
     4c4:	65 e0       	ldi	r22, 0x05	; 5
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	1a df       	rcall	.-460    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D5,0);
     4ca:	40 e0       	ldi	r20, 0x00	; 0
     4cc:	66 e0       	ldi	r22, 0x06	; 6
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	16 df       	rcall	.-468    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D6,0);
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	67 e0       	ldi	r22, 0x07	; 7
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	12 df       	rcall	.-476    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D7,0);
     4da:	40 e0       	ldi	r20, 0x00	; 0
     4dc:	68 e0       	ldi	r22, 0x08	; 8
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	0e df       	rcall	.-484    	; 0x2fe <LED_Matrix_write>
	
	LED_Matrix_write(2,D0,0);
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	61 e0       	ldi	r22, 0x01	; 1
     4e6:	82 e0       	ldi	r24, 0x02	; 2
     4e8:	0a df       	rcall	.-492    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D1,0);
     4ea:	40 e0       	ldi	r20, 0x00	; 0
     4ec:	62 e0       	ldi	r22, 0x02	; 2
     4ee:	82 e0       	ldi	r24, 0x02	; 2
     4f0:	06 df       	rcall	.-500    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D2,0);
     4f2:	40 e0       	ldi	r20, 0x00	; 0
     4f4:	63 e0       	ldi	r22, 0x03	; 3
     4f6:	82 e0       	ldi	r24, 0x02	; 2
     4f8:	02 df       	rcall	.-508    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D3,0);
     4fa:	40 e0       	ldi	r20, 0x00	; 0
     4fc:	64 e0       	ldi	r22, 0x04	; 4
     4fe:	82 e0       	ldi	r24, 0x02	; 2
     500:	fe de       	rcall	.-516    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D4,0);
     502:	40 e0       	ldi	r20, 0x00	; 0
     504:	65 e0       	ldi	r22, 0x05	; 5
     506:	82 e0       	ldi	r24, 0x02	; 2
     508:	fa de       	rcall	.-524    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D5,0XFF);
     50a:	4f ef       	ldi	r20, 0xFF	; 255
     50c:	66 e0       	ldi	r22, 0x06	; 6
     50e:	82 e0       	ldi	r24, 0x02	; 2
     510:	f6 de       	rcall	.-532    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D6,0XFF);
     512:	4f ef       	ldi	r20, 0xFF	; 255
     514:	67 e0       	ldi	r22, 0x07	; 7
     516:	82 e0       	ldi	r24, 0x02	; 2
     518:	f2 de       	rcall	.-540    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D7,0XFF);
     51a:	4f ef       	ldi	r20, 0xFF	; 255
     51c:	68 e0       	ldi	r22, 0x08	; 8
     51e:	82 e0       	ldi	r24, 0x02	; 2
     520:	ee de       	rcall	.-548    	; 0x2fe <LED_Matrix_write>
	
	LED_Matrix_write(3,D0,0);
     522:	40 e0       	ldi	r20, 0x00	; 0
     524:	61 e0       	ldi	r22, 0x01	; 1
     526:	83 e0       	ldi	r24, 0x03	; 3
     528:	ea de       	rcall	.-556    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D1,0);
     52a:	40 e0       	ldi	r20, 0x00	; 0
     52c:	62 e0       	ldi	r22, 0x02	; 2
     52e:	83 e0       	ldi	r24, 0x03	; 3
     530:	e6 de       	rcall	.-564    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D2,0);
     532:	40 e0       	ldi	r20, 0x00	; 0
     534:	63 e0       	ldi	r22, 0x03	; 3
     536:	83 e0       	ldi	r24, 0x03	; 3
     538:	e2 de       	rcall	.-572    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D3,0);
     53a:	40 e0       	ldi	r20, 0x00	; 0
     53c:	64 e0       	ldi	r22, 0x04	; 4
     53e:	83 e0       	ldi	r24, 0x03	; 3
     540:	de de       	rcall	.-580    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D4,0);
     542:	40 e0       	ldi	r20, 0x00	; 0
     544:	65 e0       	ldi	r22, 0x05	; 5
     546:	83 e0       	ldi	r24, 0x03	; 3
     548:	da de       	rcall	.-588    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D5,0XFF);
     54a:	4f ef       	ldi	r20, 0xFF	; 255
     54c:	66 e0       	ldi	r22, 0x06	; 6
     54e:	83 e0       	ldi	r24, 0x03	; 3
     550:	d6 de       	rcall	.-596    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D6,0XFF);
     552:	4f ef       	ldi	r20, 0xFF	; 255
     554:	67 e0       	ldi	r22, 0x07	; 7
     556:	83 e0       	ldi	r24, 0x03	; 3
     558:	d2 de       	rcall	.-604    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D7,0XFF);
     55a:	4f ef       	ldi	r20, 0xFF	; 255
     55c:	68 e0       	ldi	r22, 0x08	; 8
     55e:	83 e0       	ldi	r24, 0x03	; 3
     560:	ce de       	rcall	.-612    	; 0x2fe <LED_Matrix_write>
	
	LED_Matrix_write(4,D0,0);
     562:	40 e0       	ldi	r20, 0x00	; 0
     564:	61 e0       	ldi	r22, 0x01	; 1
     566:	84 e0       	ldi	r24, 0x04	; 4
     568:	ca de       	rcall	.-620    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(4,D1,0);
     56a:	40 e0       	ldi	r20, 0x00	; 0
     56c:	62 e0       	ldi	r22, 0x02	; 2
     56e:	84 e0       	ldi	r24, 0x04	; 4
     570:	c6 de       	rcall	.-628    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(4,D2,0);
     572:	40 e0       	ldi	r20, 0x00	; 0
     574:	63 e0       	ldi	r22, 0x03	; 3
     576:	84 e0       	ldi	r24, 0x04	; 4
     578:	c2 de       	rcall	.-636    	; 0x2fe <LED_Matrix_write>
     57a:	40 e0       	ldi	r20, 0x00	; 0
	LED_Matrix_write(4,D3,0);
     57c:	64 e0       	ldi	r22, 0x04	; 4
     57e:	84 e0       	ldi	r24, 0x04	; 4
     580:	be de       	rcall	.-644    	; 0x2fe <LED_Matrix_write>
     582:	40 e0       	ldi	r20, 0x00	; 0
     584:	65 e0       	ldi	r22, 0x05	; 5
	LED_Matrix_write(4,D4,0);
     586:	84 e0       	ldi	r24, 0x04	; 4
     588:	ba de       	rcall	.-652    	; 0x2fe <LED_Matrix_write>
     58a:	40 e0       	ldi	r20, 0x00	; 0
     58c:	66 e0       	ldi	r22, 0x06	; 6
     58e:	84 e0       	ldi	r24, 0x04	; 4
	LED_Matrix_write(4,D5,0);
     590:	b6 de       	rcall	.-660    	; 0x2fe <LED_Matrix_write>
     592:	40 e0       	ldi	r20, 0x00	; 0
     594:	67 e0       	ldi	r22, 0x07	; 7
     596:	84 e0       	ldi	r24, 0x04	; 4
     598:	b2 de       	rcall	.-668    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(4,D6,0);
     59a:	40 e0       	ldi	r20, 0x00	; 0
     59c:	68 e0       	ldi	r22, 0x08	; 8
     59e:	84 e0       	ldi	r24, 0x04	; 4
     5a0:	ae ce       	rjmp	.-676    	; 0x2fe <LED_Matrix_write>
     5a2:	08 95       	ret

000005a4 <Down_Middle_Led_Matrix>:
	LED_Matrix_write(4,D7,0);
     5a4:	40 e0       	ldi	r20, 0x00	; 0
     5a6:	61 e0       	ldi	r22, 0x01	; 1
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	a9 de       	rcall	.-686    	; 0x2fe <LED_Matrix_write>
     5ac:	40 e0       	ldi	r20, 0x00	; 0
     5ae:	62 e0       	ldi	r22, 0x02	; 2
}
void Down_Middle_Led_Matrix(void)
{
	LED_Matrix_write(1,D0,0);
	LED_Matrix_write(1,D1,0);
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	a5 de       	rcall	.-694    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D2,0);
     5b4:	40 e0       	ldi	r20, 0x00	; 0
     5b6:	63 e0       	ldi	r22, 0x03	; 3
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	a1 de       	rcall	.-702    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D3,0);
     5bc:	40 e0       	ldi	r20, 0x00	; 0
     5be:	64 e0       	ldi	r22, 0x04	; 4
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	9d de       	rcall	.-710    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D4,0);
     5c4:	40 e0       	ldi	r20, 0x00	; 0
     5c6:	65 e0       	ldi	r22, 0x05	; 5
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	99 de       	rcall	.-718    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D5,0);
     5cc:	40 e0       	ldi	r20, 0x00	; 0
     5ce:	66 e0       	ldi	r22, 0x06	; 6
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	95 de       	rcall	.-726    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D6,0);
     5d4:	40 e0       	ldi	r20, 0x00	; 0
     5d6:	67 e0       	ldi	r22, 0x07	; 7
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	91 de       	rcall	.-734    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D7,0);
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	68 e0       	ldi	r22, 0x08	; 8
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	8d de       	rcall	.-742    	; 0x2fe <LED_Matrix_write>
	
	LED_Matrix_write(2,D0,0xff);
     5e4:	4f ef       	ldi	r20, 0xFF	; 255
     5e6:	61 e0       	ldi	r22, 0x01	; 1
     5e8:	82 e0       	ldi	r24, 0x02	; 2
     5ea:	89 de       	rcall	.-750    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D1,0xff);
     5ec:	4f ef       	ldi	r20, 0xFF	; 255
     5ee:	62 e0       	ldi	r22, 0x02	; 2
     5f0:	82 e0       	ldi	r24, 0x02	; 2
     5f2:	85 de       	rcall	.-758    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D2,0xff);
     5f4:	4f ef       	ldi	r20, 0xFF	; 255
     5f6:	63 e0       	ldi	r22, 0x03	; 3
     5f8:	82 e0       	ldi	r24, 0x02	; 2
     5fa:	81 de       	rcall	.-766    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D3,0);
     5fc:	40 e0       	ldi	r20, 0x00	; 0
     5fe:	64 e0       	ldi	r22, 0x04	; 4
     600:	82 e0       	ldi	r24, 0x02	; 2
     602:	7d de       	rcall	.-774    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D4,0);
     604:	40 e0       	ldi	r20, 0x00	; 0
     606:	65 e0       	ldi	r22, 0x05	; 5
     608:	82 e0       	ldi	r24, 0x02	; 2
     60a:	79 de       	rcall	.-782    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D5,0);
     60c:	40 e0       	ldi	r20, 0x00	; 0
     60e:	66 e0       	ldi	r22, 0x06	; 6
     610:	82 e0       	ldi	r24, 0x02	; 2
     612:	75 de       	rcall	.-790    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D6,0);
     614:	40 e0       	ldi	r20, 0x00	; 0
     616:	67 e0       	ldi	r22, 0x07	; 7
     618:	82 e0       	ldi	r24, 0x02	; 2
     61a:	71 de       	rcall	.-798    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D7,0);
     61c:	40 e0       	ldi	r20, 0x00	; 0
     61e:	68 e0       	ldi	r22, 0x08	; 8
     620:	82 e0       	ldi	r24, 0x02	; 2
     622:	6d de       	rcall	.-806    	; 0x2fe <LED_Matrix_write>
	
	LED_Matrix_write(3,D0,0xff);
     624:	4f ef       	ldi	r20, 0xFF	; 255
     626:	61 e0       	ldi	r22, 0x01	; 1
     628:	83 e0       	ldi	r24, 0x03	; 3
     62a:	69 de       	rcall	.-814    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D1,0xff);
     62c:	4f ef       	ldi	r20, 0xFF	; 255
     62e:	62 e0       	ldi	r22, 0x02	; 2
     630:	83 e0       	ldi	r24, 0x03	; 3
     632:	65 de       	rcall	.-822    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D2,0xff);
     634:	4f ef       	ldi	r20, 0xFF	; 255
     636:	63 e0       	ldi	r22, 0x03	; 3
     638:	83 e0       	ldi	r24, 0x03	; 3
     63a:	61 de       	rcall	.-830    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D3,0);
     63c:	40 e0       	ldi	r20, 0x00	; 0
     63e:	64 e0       	ldi	r22, 0x04	; 4
     640:	83 e0       	ldi	r24, 0x03	; 3
     642:	5d de       	rcall	.-838    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D4,0);
     644:	40 e0       	ldi	r20, 0x00	; 0
     646:	65 e0       	ldi	r22, 0x05	; 5
     648:	83 e0       	ldi	r24, 0x03	; 3
     64a:	59 de       	rcall	.-846    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D5,0);
     64c:	40 e0       	ldi	r20, 0x00	; 0
     64e:	66 e0       	ldi	r22, 0x06	; 6
     650:	83 e0       	ldi	r24, 0x03	; 3
     652:	55 de       	rcall	.-854    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D6,0);
     654:	40 e0       	ldi	r20, 0x00	; 0
     656:	67 e0       	ldi	r22, 0x07	; 7
     658:	83 e0       	ldi	r24, 0x03	; 3
     65a:	51 de       	rcall	.-862    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D7,0);
     65c:	40 e0       	ldi	r20, 0x00	; 0
     65e:	68 e0       	ldi	r22, 0x08	; 8
     660:	83 e0       	ldi	r24, 0x03	; 3
     662:	4d de       	rcall	.-870    	; 0x2fe <LED_Matrix_write>
	
	LED_Matrix_write(4,D0,0);
     664:	40 e0       	ldi	r20, 0x00	; 0
     666:	61 e0       	ldi	r22, 0x01	; 1
     668:	84 e0       	ldi	r24, 0x04	; 4
     66a:	49 de       	rcall	.-878    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(4,D1,0);
     66c:	40 e0       	ldi	r20, 0x00	; 0
     66e:	62 e0       	ldi	r22, 0x02	; 2
     670:	84 e0       	ldi	r24, 0x04	; 4
     672:	45 de       	rcall	.-886    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(4,D2,0);
     674:	40 e0       	ldi	r20, 0x00	; 0
     676:	63 e0       	ldi	r22, 0x03	; 3
     678:	84 e0       	ldi	r24, 0x04	; 4
     67a:	41 de       	rcall	.-894    	; 0x2fe <LED_Matrix_write>
     67c:	40 e0       	ldi	r20, 0x00	; 0
	LED_Matrix_write(4,D3,0);
     67e:	64 e0       	ldi	r22, 0x04	; 4
     680:	84 e0       	ldi	r24, 0x04	; 4
     682:	3d de       	rcall	.-902    	; 0x2fe <LED_Matrix_write>
     684:	40 e0       	ldi	r20, 0x00	; 0
     686:	65 e0       	ldi	r22, 0x05	; 5
	LED_Matrix_write(4,D4,0);
     688:	84 e0       	ldi	r24, 0x04	; 4
     68a:	39 de       	rcall	.-910    	; 0x2fe <LED_Matrix_write>
     68c:	40 e0       	ldi	r20, 0x00	; 0
     68e:	66 e0       	ldi	r22, 0x06	; 6
     690:	84 e0       	ldi	r24, 0x04	; 4
	LED_Matrix_write(4,D5,0);
     692:	35 de       	rcall	.-918    	; 0x2fe <LED_Matrix_write>
     694:	40 e0       	ldi	r20, 0x00	; 0
     696:	67 e0       	ldi	r22, 0x07	; 7
     698:	84 e0       	ldi	r24, 0x04	; 4
     69a:	31 de       	rcall	.-926    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(4,D6,0);
     69c:	40 e0       	ldi	r20, 0x00	; 0
     69e:	68 e0       	ldi	r22, 0x08	; 8
     6a0:	84 e0       	ldi	r24, 0x04	; 4
     6a2:	2d ce       	rjmp	.-934    	; 0x2fe <LED_Matrix_write>
     6a4:	08 95       	ret

000006a6 <Normal_Right_Led_Matrix>:
	LED_Matrix_write(4,D7,0);
     6a6:	40 e0       	ldi	r20, 0x00	; 0
     6a8:	61 e0       	ldi	r22, 0x01	; 1
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	28 de       	rcall	.-944    	; 0x2fe <LED_Matrix_write>
     6ae:	40 e0       	ldi	r20, 0x00	; 0
     6b0:	62 e0       	ldi	r22, 0x02	; 2
/****************************** right **************************/
void Normal_Right_Led_Matrix(void)
{

	LED_Matrix_write(1,D0,0);
	LED_Matrix_write(1,D1,0);
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	24 de       	rcall	.-952    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D2,0);
     6b6:	40 e0       	ldi	r20, 0x00	; 0
     6b8:	63 e0       	ldi	r22, 0x03	; 3
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	20 de       	rcall	.-960    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D3,0);
     6be:	40 e0       	ldi	r20, 0x00	; 0
     6c0:	64 e0       	ldi	r22, 0x04	; 4
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	1c de       	rcall	.-968    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D4,0);
     6c6:	40 e0       	ldi	r20, 0x00	; 0
     6c8:	65 e0       	ldi	r22, 0x05	; 5
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	18 de       	rcall	.-976    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D5,0);
     6ce:	40 e0       	ldi	r20, 0x00	; 0
     6d0:	66 e0       	ldi	r22, 0x06	; 6
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	14 de       	rcall	.-984    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D6,0);
     6d6:	40 e0       	ldi	r20, 0x00	; 0
     6d8:	67 e0       	ldi	r22, 0x07	; 7
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	10 de       	rcall	.-992    	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D7,0);
     6de:	40 e0       	ldi	r20, 0x00	; 0
     6e0:	68 e0       	ldi	r22, 0x08	; 8
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	0c de       	rcall	.-1000   	; 0x2fe <LED_Matrix_write>
	
	LED_Matrix_write(2,D0,0);
     6e6:	40 e0       	ldi	r20, 0x00	; 0
     6e8:	61 e0       	ldi	r22, 0x01	; 1
     6ea:	82 e0       	ldi	r24, 0x02	; 2
     6ec:	08 de       	rcall	.-1008   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D1,0);
     6ee:	40 e0       	ldi	r20, 0x00	; 0
     6f0:	62 e0       	ldi	r22, 0x02	; 2
     6f2:	82 e0       	ldi	r24, 0x02	; 2
     6f4:	04 de       	rcall	.-1016   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D2,0);
     6f6:	40 e0       	ldi	r20, 0x00	; 0
     6f8:	63 e0       	ldi	r22, 0x03	; 3
     6fa:	82 e0       	ldi	r24, 0x02	; 2
     6fc:	00 de       	rcall	.-1024   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D3,0);
     6fe:	40 e0       	ldi	r20, 0x00	; 0
     700:	64 e0       	ldi	r22, 0x04	; 4
     702:	82 e0       	ldi	r24, 0x02	; 2
     704:	fc dd       	rcall	.-1032   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D4,0);
     706:	40 e0       	ldi	r20, 0x00	; 0
     708:	65 e0       	ldi	r22, 0x05	; 5
     70a:	82 e0       	ldi	r24, 0x02	; 2
     70c:	f8 dd       	rcall	.-1040   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D5,0);
     70e:	40 e0       	ldi	r20, 0x00	; 0
     710:	66 e0       	ldi	r22, 0x06	; 6
     712:	82 e0       	ldi	r24, 0x02	; 2
     714:	f4 dd       	rcall	.-1048   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D6,0);
     716:	40 e0       	ldi	r20, 0x00	; 0
     718:	67 e0       	ldi	r22, 0x07	; 7
     71a:	82 e0       	ldi	r24, 0x02	; 2
     71c:	f0 dd       	rcall	.-1056   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D7,0);
     71e:	40 e0       	ldi	r20, 0x00	; 0
     720:	68 e0       	ldi	r22, 0x08	; 8
     722:	82 e0       	ldi	r24, 0x02	; 2
     724:	ec dd       	rcall	.-1064   	; 0x2fe <LED_Matrix_write>
	
	LED_Matrix_write(3,D0,0);
     726:	40 e0       	ldi	r20, 0x00	; 0
     728:	61 e0       	ldi	r22, 0x01	; 1
     72a:	83 e0       	ldi	r24, 0x03	; 3
     72c:	e8 dd       	rcall	.-1072   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D1,0);
     72e:	40 e0       	ldi	r20, 0x00	; 0
     730:	62 e0       	ldi	r22, 0x02	; 2
     732:	83 e0       	ldi	r24, 0x03	; 3
     734:	e4 dd       	rcall	.-1080   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D2,0);
     736:	40 e0       	ldi	r20, 0x00	; 0
     738:	63 e0       	ldi	r22, 0x03	; 3
     73a:	83 e0       	ldi	r24, 0x03	; 3
     73c:	e0 dd       	rcall	.-1088   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D3,0XFF);
     73e:	4f ef       	ldi	r20, 0xFF	; 255
     740:	64 e0       	ldi	r22, 0x04	; 4
     742:	83 e0       	ldi	r24, 0x03	; 3
     744:	dc dd       	rcall	.-1096   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D4,0XFF);
     746:	4f ef       	ldi	r20, 0xFF	; 255
     748:	65 e0       	ldi	r22, 0x05	; 5
     74a:	83 e0       	ldi	r24, 0x03	; 3
     74c:	d8 dd       	rcall	.-1104   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D5,0);
     74e:	40 e0       	ldi	r20, 0x00	; 0
     750:	66 e0       	ldi	r22, 0x06	; 6
     752:	83 e0       	ldi	r24, 0x03	; 3
     754:	d4 dd       	rcall	.-1112   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D6,0);
     756:	40 e0       	ldi	r20, 0x00	; 0
     758:	67 e0       	ldi	r22, 0x07	; 7
     75a:	83 e0       	ldi	r24, 0x03	; 3
     75c:	d0 dd       	rcall	.-1120   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D7,0);
     75e:	40 e0       	ldi	r20, 0x00	; 0
     760:	68 e0       	ldi	r22, 0x08	; 8
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	cc dd       	rcall	.-1128   	; 0x2fe <LED_Matrix_write>
	
	LED_Matrix_write(4,D0,0);
     766:	40 e0       	ldi	r20, 0x00	; 0
     768:	61 e0       	ldi	r22, 0x01	; 1
     76a:	84 e0       	ldi	r24, 0x04	; 4
     76c:	c8 dd       	rcall	.-1136   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(4,D1,0);
     76e:	40 e0       	ldi	r20, 0x00	; 0
     770:	62 e0       	ldi	r22, 0x02	; 2
     772:	84 e0       	ldi	r24, 0x04	; 4
     774:	c4 dd       	rcall	.-1144   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(4,D2,0);
     776:	40 e0       	ldi	r20, 0x00	; 0
     778:	63 e0       	ldi	r22, 0x03	; 3
     77a:	84 e0       	ldi	r24, 0x04	; 4
     77c:	c0 dd       	rcall	.-1152   	; 0x2fe <LED_Matrix_write>
     77e:	4f ef       	ldi	r20, 0xFF	; 255
	LED_Matrix_write(4,D3,0XFF);
     780:	64 e0       	ldi	r22, 0x04	; 4
     782:	84 e0       	ldi	r24, 0x04	; 4
     784:	bc dd       	rcall	.-1160   	; 0x2fe <LED_Matrix_write>
     786:	4f ef       	ldi	r20, 0xFF	; 255
     788:	65 e0       	ldi	r22, 0x05	; 5
	LED_Matrix_write(4,D4,0XFF);
     78a:	84 e0       	ldi	r24, 0x04	; 4
     78c:	b8 dd       	rcall	.-1168   	; 0x2fe <LED_Matrix_write>
     78e:	40 e0       	ldi	r20, 0x00	; 0
     790:	66 e0       	ldi	r22, 0x06	; 6
     792:	84 e0       	ldi	r24, 0x04	; 4
	LED_Matrix_write(4,D5,0);
     794:	b4 dd       	rcall	.-1176   	; 0x2fe <LED_Matrix_write>
     796:	40 e0       	ldi	r20, 0x00	; 0
     798:	67 e0       	ldi	r22, 0x07	; 7
     79a:	84 e0       	ldi	r24, 0x04	; 4
     79c:	b0 dd       	rcall	.-1184   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(4,D6,0);
     79e:	40 e0       	ldi	r20, 0x00	; 0
     7a0:	68 e0       	ldi	r22, 0x08	; 8
     7a2:	84 e0       	ldi	r24, 0x04	; 4
     7a4:	ac cd       	rjmp	.-1192   	; 0x2fe <LED_Matrix_write>
     7a6:	08 95       	ret

000007a8 <DOWN_Right_Led_Matrix>:
	LED_Matrix_write(4,D7,0);
     7a8:	40 e0       	ldi	r20, 0x00	; 0
     7aa:	61 e0       	ldi	r22, 0x01	; 1
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	a7 dd       	rcall	.-1202   	; 0x2fe <LED_Matrix_write>
     7b0:	40 e0       	ldi	r20, 0x00	; 0
     7b2:	62 e0       	ldi	r22, 0x02	; 2
}
void DOWN_Right_Led_Matrix(void)
{

	LED_Matrix_write(1,D0,0);
	LED_Matrix_write(1,D1,0);
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	a3 dd       	rcall	.-1210   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D2,0);
     7b8:	40 e0       	ldi	r20, 0x00	; 0
     7ba:	63 e0       	ldi	r22, 0x03	; 3
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	9f dd       	rcall	.-1218   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D3,0);
     7c0:	40 e0       	ldi	r20, 0x00	; 0
     7c2:	64 e0       	ldi	r22, 0x04	; 4
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	9b dd       	rcall	.-1226   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D4,0);
     7c8:	40 e0       	ldi	r20, 0x00	; 0
     7ca:	65 e0       	ldi	r22, 0x05	; 5
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	97 dd       	rcall	.-1234   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D5,0);
     7d0:	40 e0       	ldi	r20, 0x00	; 0
     7d2:	66 e0       	ldi	r22, 0x06	; 6
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	93 dd       	rcall	.-1242   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D6,0);
     7d8:	40 e0       	ldi	r20, 0x00	; 0
     7da:	67 e0       	ldi	r22, 0x07	; 7
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	8f dd       	rcall	.-1250   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D7,0);
     7e0:	40 e0       	ldi	r20, 0x00	; 0
     7e2:	68 e0       	ldi	r22, 0x08	; 8
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	8b dd       	rcall	.-1258   	; 0x2fe <LED_Matrix_write>
	
	LED_Matrix_write(2,D0,0);
     7e8:	40 e0       	ldi	r20, 0x00	; 0
     7ea:	61 e0       	ldi	r22, 0x01	; 1
     7ec:	82 e0       	ldi	r24, 0x02	; 2
     7ee:	87 dd       	rcall	.-1266   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D1,0);
     7f0:	40 e0       	ldi	r20, 0x00	; 0
     7f2:	62 e0       	ldi	r22, 0x02	; 2
     7f4:	82 e0       	ldi	r24, 0x02	; 2
     7f6:	83 dd       	rcall	.-1274   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D2,0);
     7f8:	40 e0       	ldi	r20, 0x00	; 0
     7fa:	63 e0       	ldi	r22, 0x03	; 3
     7fc:	82 e0       	ldi	r24, 0x02	; 2
     7fe:	7f dd       	rcall	.-1282   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D3,0);
     800:	40 e0       	ldi	r20, 0x00	; 0
     802:	64 e0       	ldi	r22, 0x04	; 4
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	7b dd       	rcall	.-1290   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D4,0);
     808:	40 e0       	ldi	r20, 0x00	; 0
     80a:	65 e0       	ldi	r22, 0x05	; 5
     80c:	82 e0       	ldi	r24, 0x02	; 2
     80e:	77 dd       	rcall	.-1298   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D5,0);
     810:	40 e0       	ldi	r20, 0x00	; 0
     812:	66 e0       	ldi	r22, 0x06	; 6
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	73 dd       	rcall	.-1306   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D6,0);
     818:	40 e0       	ldi	r20, 0x00	; 0
     81a:	67 e0       	ldi	r22, 0x07	; 7
     81c:	82 e0       	ldi	r24, 0x02	; 2
     81e:	6f dd       	rcall	.-1314   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D7,0);
     820:	40 e0       	ldi	r20, 0x00	; 0
     822:	68 e0       	ldi	r22, 0x08	; 8
     824:	82 e0       	ldi	r24, 0x02	; 2
     826:	6b dd       	rcall	.-1322   	; 0x2fe <LED_Matrix_write>
	
	LED_Matrix_write(3,D0,0XFF);
     828:	4f ef       	ldi	r20, 0xFF	; 255
     82a:	61 e0       	ldi	r22, 0x01	; 1
     82c:	83 e0       	ldi	r24, 0x03	; 3
     82e:	67 dd       	rcall	.-1330   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D1,0XFF);
     830:	4f ef       	ldi	r20, 0xFF	; 255
     832:	62 e0       	ldi	r22, 0x02	; 2
     834:	83 e0       	ldi	r24, 0x03	; 3
     836:	63 dd       	rcall	.-1338   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D2,0XFF);
     838:	4f ef       	ldi	r20, 0xFF	; 255
     83a:	63 e0       	ldi	r22, 0x03	; 3
     83c:	83 e0       	ldi	r24, 0x03	; 3
     83e:	5f dd       	rcall	.-1346   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D3,0);
     840:	40 e0       	ldi	r20, 0x00	; 0
     842:	64 e0       	ldi	r22, 0x04	; 4
     844:	83 e0       	ldi	r24, 0x03	; 3
     846:	5b dd       	rcall	.-1354   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D4,0);
     848:	40 e0       	ldi	r20, 0x00	; 0
     84a:	65 e0       	ldi	r22, 0x05	; 5
     84c:	83 e0       	ldi	r24, 0x03	; 3
     84e:	57 dd       	rcall	.-1362   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D5,0);
     850:	40 e0       	ldi	r20, 0x00	; 0
     852:	66 e0       	ldi	r22, 0x06	; 6
     854:	83 e0       	ldi	r24, 0x03	; 3
     856:	53 dd       	rcall	.-1370   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D6,0);
     858:	40 e0       	ldi	r20, 0x00	; 0
     85a:	67 e0       	ldi	r22, 0x07	; 7
     85c:	83 e0       	ldi	r24, 0x03	; 3
     85e:	4f dd       	rcall	.-1378   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D7,0);
     860:	40 e0       	ldi	r20, 0x00	; 0
     862:	68 e0       	ldi	r22, 0x08	; 8
     864:	83 e0       	ldi	r24, 0x03	; 3
     866:	4b dd       	rcall	.-1386   	; 0x2fe <LED_Matrix_write>
	
	LED_Matrix_write(4,D0,0XFF);
     868:	4f ef       	ldi	r20, 0xFF	; 255
     86a:	61 e0       	ldi	r22, 0x01	; 1
     86c:	84 e0       	ldi	r24, 0x04	; 4
     86e:	47 dd       	rcall	.-1394   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(4,D1,0XFF);
     870:	4f ef       	ldi	r20, 0xFF	; 255
     872:	62 e0       	ldi	r22, 0x02	; 2
     874:	84 e0       	ldi	r24, 0x04	; 4
     876:	43 dd       	rcall	.-1402   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(4,D2,0XFF);
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	63 e0       	ldi	r22, 0x03	; 3
     87c:	84 e0       	ldi	r24, 0x04	; 4
     87e:	3f dd       	rcall	.-1410   	; 0x2fe <LED_Matrix_write>
     880:	40 e0       	ldi	r20, 0x00	; 0
	LED_Matrix_write(4,D3,0);
     882:	64 e0       	ldi	r22, 0x04	; 4
     884:	84 e0       	ldi	r24, 0x04	; 4
     886:	3b dd       	rcall	.-1418   	; 0x2fe <LED_Matrix_write>
     888:	40 e0       	ldi	r20, 0x00	; 0
     88a:	65 e0       	ldi	r22, 0x05	; 5
	LED_Matrix_write(4,D4,0);
     88c:	84 e0       	ldi	r24, 0x04	; 4
     88e:	37 dd       	rcall	.-1426   	; 0x2fe <LED_Matrix_write>
     890:	40 e0       	ldi	r20, 0x00	; 0
     892:	66 e0       	ldi	r22, 0x06	; 6
     894:	84 e0       	ldi	r24, 0x04	; 4
	LED_Matrix_write(4,D5,0);
     896:	33 dd       	rcall	.-1434   	; 0x2fe <LED_Matrix_write>
     898:	40 e0       	ldi	r20, 0x00	; 0
     89a:	67 e0       	ldi	r22, 0x07	; 7
     89c:	84 e0       	ldi	r24, 0x04	; 4
     89e:	2f dd       	rcall	.-1442   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(4,D6,0);
     8a0:	40 e0       	ldi	r20, 0x00	; 0
     8a2:	68 e0       	ldi	r22, 0x08	; 8
     8a4:	84 e0       	ldi	r24, 0x04	; 4
     8a6:	2b cd       	rjmp	.-1450   	; 0x2fe <LED_Matrix_write>
     8a8:	08 95       	ret

000008aa <UP_Rigt_Led_Matrix>:
	LED_Matrix_write(4,D7,0);
     8aa:	40 e0       	ldi	r20, 0x00	; 0
     8ac:	61 e0       	ldi	r22, 0x01	; 1
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	26 dd       	rcall	.-1460   	; 0x2fe <LED_Matrix_write>
     8b2:	40 e0       	ldi	r20, 0x00	; 0
     8b4:	62 e0       	ldi	r22, 0x02	; 2
}
void UP_Rigt_Led_Matrix(void)
{

	LED_Matrix_write(1,D0,0);
	LED_Matrix_write(1,D1,0);
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	22 dd       	rcall	.-1468   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D2,0);
     8ba:	40 e0       	ldi	r20, 0x00	; 0
     8bc:	63 e0       	ldi	r22, 0x03	; 3
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	1e dd       	rcall	.-1476   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D3,0);
     8c2:	40 e0       	ldi	r20, 0x00	; 0
     8c4:	64 e0       	ldi	r22, 0x04	; 4
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	1a dd       	rcall	.-1484   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D4,0);
     8ca:	40 e0       	ldi	r20, 0x00	; 0
     8cc:	65 e0       	ldi	r22, 0x05	; 5
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	16 dd       	rcall	.-1492   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D5,0);
     8d2:	40 e0       	ldi	r20, 0x00	; 0
     8d4:	66 e0       	ldi	r22, 0x06	; 6
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	12 dd       	rcall	.-1500   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D6,0);
     8da:	40 e0       	ldi	r20, 0x00	; 0
     8dc:	67 e0       	ldi	r22, 0x07	; 7
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	0e dd       	rcall	.-1508   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D7,0);
     8e2:	40 e0       	ldi	r20, 0x00	; 0
     8e4:	68 e0       	ldi	r22, 0x08	; 8
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	0a dd       	rcall	.-1516   	; 0x2fe <LED_Matrix_write>
	
	LED_Matrix_write(2,D0,0);
     8ea:	40 e0       	ldi	r20, 0x00	; 0
     8ec:	61 e0       	ldi	r22, 0x01	; 1
     8ee:	82 e0       	ldi	r24, 0x02	; 2
     8f0:	06 dd       	rcall	.-1524   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D1,0);
     8f2:	40 e0       	ldi	r20, 0x00	; 0
     8f4:	62 e0       	ldi	r22, 0x02	; 2
     8f6:	82 e0       	ldi	r24, 0x02	; 2
     8f8:	02 dd       	rcall	.-1532   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D2,0);
     8fa:	40 e0       	ldi	r20, 0x00	; 0
     8fc:	63 e0       	ldi	r22, 0x03	; 3
     8fe:	82 e0       	ldi	r24, 0x02	; 2
     900:	fe dc       	rcall	.-1540   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D3,0);
     902:	40 e0       	ldi	r20, 0x00	; 0
     904:	64 e0       	ldi	r22, 0x04	; 4
     906:	82 e0       	ldi	r24, 0x02	; 2
     908:	fa dc       	rcall	.-1548   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D4,0);
     90a:	40 e0       	ldi	r20, 0x00	; 0
     90c:	65 e0       	ldi	r22, 0x05	; 5
     90e:	82 e0       	ldi	r24, 0x02	; 2
     910:	f6 dc       	rcall	.-1556   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D5,0);
     912:	40 e0       	ldi	r20, 0x00	; 0
     914:	66 e0       	ldi	r22, 0x06	; 6
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	f2 dc       	rcall	.-1564   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D6,0);
     91a:	40 e0       	ldi	r20, 0x00	; 0
     91c:	67 e0       	ldi	r22, 0x07	; 7
     91e:	82 e0       	ldi	r24, 0x02	; 2
     920:	ee dc       	rcall	.-1572   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D7,0);
     922:	40 e0       	ldi	r20, 0x00	; 0
     924:	68 e0       	ldi	r22, 0x08	; 8
     926:	82 e0       	ldi	r24, 0x02	; 2
     928:	ea dc       	rcall	.-1580   	; 0x2fe <LED_Matrix_write>
	
	LED_Matrix_write(3,D0,0);
     92a:	40 e0       	ldi	r20, 0x00	; 0
     92c:	61 e0       	ldi	r22, 0x01	; 1
     92e:	83 e0       	ldi	r24, 0x03	; 3
     930:	e6 dc       	rcall	.-1588   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D1,0);
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	62 e0       	ldi	r22, 0x02	; 2
     936:	83 e0       	ldi	r24, 0x03	; 3
     938:	e2 dc       	rcall	.-1596   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D2,0);
     93a:	40 e0       	ldi	r20, 0x00	; 0
     93c:	63 e0       	ldi	r22, 0x03	; 3
     93e:	83 e0       	ldi	r24, 0x03	; 3
     940:	de dc       	rcall	.-1604   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D3,0);
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	64 e0       	ldi	r22, 0x04	; 4
     946:	83 e0       	ldi	r24, 0x03	; 3
     948:	da dc       	rcall	.-1612   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D4,0);
     94a:	40 e0       	ldi	r20, 0x00	; 0
     94c:	65 e0       	ldi	r22, 0x05	; 5
     94e:	83 e0       	ldi	r24, 0x03	; 3
     950:	d6 dc       	rcall	.-1620   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D5,0XFF);
     952:	4f ef       	ldi	r20, 0xFF	; 255
     954:	66 e0       	ldi	r22, 0x06	; 6
     956:	83 e0       	ldi	r24, 0x03	; 3
     958:	d2 dc       	rcall	.-1628   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D6,0XFF);
     95a:	4f ef       	ldi	r20, 0xFF	; 255
     95c:	67 e0       	ldi	r22, 0x07	; 7
     95e:	83 e0       	ldi	r24, 0x03	; 3
     960:	ce dc       	rcall	.-1636   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D7,0XFF);
     962:	4f ef       	ldi	r20, 0xFF	; 255
     964:	68 e0       	ldi	r22, 0x08	; 8
     966:	83 e0       	ldi	r24, 0x03	; 3
     968:	ca dc       	rcall	.-1644   	; 0x2fe <LED_Matrix_write>
	
	LED_Matrix_write(4,D0,0);
     96a:	40 e0       	ldi	r20, 0x00	; 0
     96c:	61 e0       	ldi	r22, 0x01	; 1
     96e:	84 e0       	ldi	r24, 0x04	; 4
     970:	c6 dc       	rcall	.-1652   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(4,D1,0);
     972:	40 e0       	ldi	r20, 0x00	; 0
     974:	62 e0       	ldi	r22, 0x02	; 2
     976:	84 e0       	ldi	r24, 0x04	; 4
     978:	c2 dc       	rcall	.-1660   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(4,D2,0);
     97a:	40 e0       	ldi	r20, 0x00	; 0
     97c:	63 e0       	ldi	r22, 0x03	; 3
     97e:	84 e0       	ldi	r24, 0x04	; 4
     980:	be dc       	rcall	.-1668   	; 0x2fe <LED_Matrix_write>
     982:	40 e0       	ldi	r20, 0x00	; 0
	LED_Matrix_write(4,D3,0);
     984:	64 e0       	ldi	r22, 0x04	; 4
     986:	84 e0       	ldi	r24, 0x04	; 4
     988:	ba dc       	rcall	.-1676   	; 0x2fe <LED_Matrix_write>
     98a:	40 e0       	ldi	r20, 0x00	; 0
     98c:	65 e0       	ldi	r22, 0x05	; 5
	LED_Matrix_write(4,D4,0);
     98e:	84 e0       	ldi	r24, 0x04	; 4
     990:	b6 dc       	rcall	.-1684   	; 0x2fe <LED_Matrix_write>
     992:	4f ef       	ldi	r20, 0xFF	; 255
     994:	66 e0       	ldi	r22, 0x06	; 6
     996:	84 e0       	ldi	r24, 0x04	; 4
	LED_Matrix_write(4,D5,0XFF);
     998:	b2 dc       	rcall	.-1692   	; 0x2fe <LED_Matrix_write>
     99a:	4f ef       	ldi	r20, 0xFF	; 255
     99c:	67 e0       	ldi	r22, 0x07	; 7
     99e:	84 e0       	ldi	r24, 0x04	; 4
     9a0:	ae dc       	rcall	.-1700   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(4,D6,0XFF);
     9a2:	4f ef       	ldi	r20, 0xFF	; 255
     9a4:	68 e0       	ldi	r22, 0x08	; 8
     9a6:	84 e0       	ldi	r24, 0x04	; 4
     9a8:	aa cc       	rjmp	.-1708   	; 0x2fe <LED_Matrix_write>
     9aa:	08 95       	ret

000009ac <UP_Left_Led_Matrix>:
	LED_Matrix_write(4,D7,0XFF);
     9ac:	40 e0       	ldi	r20, 0x00	; 0
     9ae:	61 e0       	ldi	r22, 0x01	; 1
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	a5 dc       	rcall	.-1718   	; 0x2fe <LED_Matrix_write>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	62 e0       	ldi	r22, 0x02	; 2

void UP_Left_Led_Matrix(void)
{

	LED_Matrix_write(1,D0,0);
	LED_Matrix_write(1,D1,0);
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	a1 dc       	rcall	.-1726   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D2,0);
     9bc:	40 e0       	ldi	r20, 0x00	; 0
     9be:	63 e0       	ldi	r22, 0x03	; 3
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	9d dc       	rcall	.-1734   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D3,0);
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	64 e0       	ldi	r22, 0x04	; 4
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	99 dc       	rcall	.-1742   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D4,0);
     9cc:	40 e0       	ldi	r20, 0x00	; 0
     9ce:	65 e0       	ldi	r22, 0x05	; 5
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	95 dc       	rcall	.-1750   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D5,0XFF);
     9d4:	4f ef       	ldi	r20, 0xFF	; 255
     9d6:	66 e0       	ldi	r22, 0x06	; 6
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	91 dc       	rcall	.-1758   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D6,0XFF);
     9dc:	4f ef       	ldi	r20, 0xFF	; 255
     9de:	67 e0       	ldi	r22, 0x07	; 7
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	8d dc       	rcall	.-1766   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D7,0XFF);
     9e4:	4f ef       	ldi	r20, 0xFF	; 255
     9e6:	68 e0       	ldi	r22, 0x08	; 8
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	89 dc       	rcall	.-1774   	; 0x2fe <LED_Matrix_write>
	
	LED_Matrix_write(2,D0,0);
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	61 e0       	ldi	r22, 0x01	; 1
     9f0:	82 e0       	ldi	r24, 0x02	; 2
     9f2:	85 dc       	rcall	.-1782   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D1,0);
     9f4:	40 e0       	ldi	r20, 0x00	; 0
     9f6:	62 e0       	ldi	r22, 0x02	; 2
     9f8:	82 e0       	ldi	r24, 0x02	; 2
     9fa:	81 dc       	rcall	.-1790   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D2,0);
     9fc:	40 e0       	ldi	r20, 0x00	; 0
     9fe:	63 e0       	ldi	r22, 0x03	; 3
     a00:	82 e0       	ldi	r24, 0x02	; 2
     a02:	7d dc       	rcall	.-1798   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D3,0);
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	64 e0       	ldi	r22, 0x04	; 4
     a08:	82 e0       	ldi	r24, 0x02	; 2
     a0a:	79 dc       	rcall	.-1806   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D4,0);
     a0c:	40 e0       	ldi	r20, 0x00	; 0
     a0e:	65 e0       	ldi	r22, 0x05	; 5
     a10:	82 e0       	ldi	r24, 0x02	; 2
     a12:	75 dc       	rcall	.-1814   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D5,0XFF);
     a14:	4f ef       	ldi	r20, 0xFF	; 255
     a16:	66 e0       	ldi	r22, 0x06	; 6
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	71 dc       	rcall	.-1822   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D6,0XFF);
     a1c:	4f ef       	ldi	r20, 0xFF	; 255
     a1e:	67 e0       	ldi	r22, 0x07	; 7
     a20:	82 e0       	ldi	r24, 0x02	; 2
     a22:	6d dc       	rcall	.-1830   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D7,0XFF);
     a24:	4f ef       	ldi	r20, 0xFF	; 255
     a26:	68 e0       	ldi	r22, 0x08	; 8
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	69 dc       	rcall	.-1838   	; 0x2fe <LED_Matrix_write>
	
	LED_Matrix_write(3,D0,0);
     a2c:	40 e0       	ldi	r20, 0x00	; 0
     a2e:	61 e0       	ldi	r22, 0x01	; 1
     a30:	83 e0       	ldi	r24, 0x03	; 3
     a32:	65 dc       	rcall	.-1846   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D1,0);
     a34:	40 e0       	ldi	r20, 0x00	; 0
     a36:	62 e0       	ldi	r22, 0x02	; 2
     a38:	83 e0       	ldi	r24, 0x03	; 3
     a3a:	61 dc       	rcall	.-1854   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D2,0);
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	63 e0       	ldi	r22, 0x03	; 3
     a40:	83 e0       	ldi	r24, 0x03	; 3
     a42:	5d dc       	rcall	.-1862   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D3,0);
     a44:	40 e0       	ldi	r20, 0x00	; 0
     a46:	64 e0       	ldi	r22, 0x04	; 4
     a48:	83 e0       	ldi	r24, 0x03	; 3
     a4a:	59 dc       	rcall	.-1870   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D4,0);
     a4c:	40 e0       	ldi	r20, 0x00	; 0
     a4e:	65 e0       	ldi	r22, 0x05	; 5
     a50:	83 e0       	ldi	r24, 0x03	; 3
     a52:	55 dc       	rcall	.-1878   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D5,0);
     a54:	40 e0       	ldi	r20, 0x00	; 0
     a56:	66 e0       	ldi	r22, 0x06	; 6
     a58:	83 e0       	ldi	r24, 0x03	; 3
     a5a:	51 dc       	rcall	.-1886   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D6,0);
     a5c:	40 e0       	ldi	r20, 0x00	; 0
     a5e:	67 e0       	ldi	r22, 0x07	; 7
     a60:	83 e0       	ldi	r24, 0x03	; 3
     a62:	4d dc       	rcall	.-1894   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D7,0);
     a64:	40 e0       	ldi	r20, 0x00	; 0
     a66:	68 e0       	ldi	r22, 0x08	; 8
     a68:	83 e0       	ldi	r24, 0x03	; 3
     a6a:	49 dc       	rcall	.-1902   	; 0x2fe <LED_Matrix_write>
	
	LED_Matrix_write(4,D0,0);
     a6c:	40 e0       	ldi	r20, 0x00	; 0
     a6e:	61 e0       	ldi	r22, 0x01	; 1
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	45 dc       	rcall	.-1910   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(4,D1,0);
     a74:	40 e0       	ldi	r20, 0x00	; 0
     a76:	62 e0       	ldi	r22, 0x02	; 2
     a78:	84 e0       	ldi	r24, 0x04	; 4
     a7a:	41 dc       	rcall	.-1918   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(4,D2,0);
     a7c:	40 e0       	ldi	r20, 0x00	; 0
     a7e:	63 e0       	ldi	r22, 0x03	; 3
     a80:	84 e0       	ldi	r24, 0x04	; 4
     a82:	3d dc       	rcall	.-1926   	; 0x2fe <LED_Matrix_write>
     a84:	40 e0       	ldi	r20, 0x00	; 0
	LED_Matrix_write(4,D3,0);
     a86:	64 e0       	ldi	r22, 0x04	; 4
     a88:	84 e0       	ldi	r24, 0x04	; 4
     a8a:	39 dc       	rcall	.-1934   	; 0x2fe <LED_Matrix_write>
     a8c:	40 e0       	ldi	r20, 0x00	; 0
     a8e:	65 e0       	ldi	r22, 0x05	; 5
	LED_Matrix_write(4,D4,0);
     a90:	84 e0       	ldi	r24, 0x04	; 4
     a92:	35 dc       	rcall	.-1942   	; 0x2fe <LED_Matrix_write>
     a94:	40 e0       	ldi	r20, 0x00	; 0
     a96:	66 e0       	ldi	r22, 0x06	; 6
     a98:	84 e0       	ldi	r24, 0x04	; 4
	LED_Matrix_write(4,D5,0);
     a9a:	31 dc       	rcall	.-1950   	; 0x2fe <LED_Matrix_write>
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	67 e0       	ldi	r22, 0x07	; 7
     aa0:	84 e0       	ldi	r24, 0x04	; 4
     aa2:	2d dc       	rcall	.-1958   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(4,D6,0);
     aa4:	40 e0       	ldi	r20, 0x00	; 0
     aa6:	68 e0       	ldi	r22, 0x08	; 8
     aa8:	84 e0       	ldi	r24, 0x04	; 4
     aaa:	29 cc       	rjmp	.-1966   	; 0x2fe <LED_Matrix_write>
     aac:	08 95       	ret

00000aae <DOWN_Left_Led_Matrix>:
	LED_Matrix_write(4,D7,0);
     aae:	4f ef       	ldi	r20, 0xFF	; 255
     ab0:	61 e0       	ldi	r22, 0x01	; 1
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	24 dc       	rcall	.-1976   	; 0x2fe <LED_Matrix_write>
     ab6:	4f ef       	ldi	r20, 0xFF	; 255
     ab8:	62 e0       	ldi	r22, 0x02	; 2
}
void DOWN_Left_Led_Matrix(void)
{

	LED_Matrix_write(1,D0,0XFF);
	LED_Matrix_write(1,D1,0XFF);
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	20 dc       	rcall	.-1984   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D2,0XFF);
     abe:	4f ef       	ldi	r20, 0xFF	; 255
     ac0:	63 e0       	ldi	r22, 0x03	; 3
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	1c dc       	rcall	.-1992   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D3,0);
     ac6:	40 e0       	ldi	r20, 0x00	; 0
     ac8:	64 e0       	ldi	r22, 0x04	; 4
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	18 dc       	rcall	.-2000   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D4,0);
     ace:	40 e0       	ldi	r20, 0x00	; 0
     ad0:	65 e0       	ldi	r22, 0x05	; 5
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	14 dc       	rcall	.-2008   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D5,0);
     ad6:	40 e0       	ldi	r20, 0x00	; 0
     ad8:	66 e0       	ldi	r22, 0x06	; 6
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	10 dc       	rcall	.-2016   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D6,0);
     ade:	40 e0       	ldi	r20, 0x00	; 0
     ae0:	67 e0       	ldi	r22, 0x07	; 7
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	0c dc       	rcall	.-2024   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D7,0);
     ae6:	40 e0       	ldi	r20, 0x00	; 0
     ae8:	68 e0       	ldi	r22, 0x08	; 8
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	08 dc       	rcall	.-2032   	; 0x2fe <LED_Matrix_write>
	
	LED_Matrix_write(2,D0,0XFF);
     aee:	4f ef       	ldi	r20, 0xFF	; 255
     af0:	61 e0       	ldi	r22, 0x01	; 1
     af2:	82 e0       	ldi	r24, 0x02	; 2
     af4:	04 dc       	rcall	.-2040   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D1,0XFF);
     af6:	4f ef       	ldi	r20, 0xFF	; 255
     af8:	62 e0       	ldi	r22, 0x02	; 2
     afa:	82 e0       	ldi	r24, 0x02	; 2
     afc:	00 dc       	rcall	.-2048   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D2,0XFF);
     afe:	4f ef       	ldi	r20, 0xFF	; 255
     b00:	63 e0       	ldi	r22, 0x03	; 3
     b02:	82 e0       	ldi	r24, 0x02	; 2
     b04:	fc db       	rcall	.-2056   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D3,0);
     b06:	40 e0       	ldi	r20, 0x00	; 0
     b08:	64 e0       	ldi	r22, 0x04	; 4
     b0a:	82 e0       	ldi	r24, 0x02	; 2
     b0c:	f8 db       	rcall	.-2064   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D4,0);
     b0e:	40 e0       	ldi	r20, 0x00	; 0
     b10:	65 e0       	ldi	r22, 0x05	; 5
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	f4 db       	rcall	.-2072   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D5,0);
     b16:	40 e0       	ldi	r20, 0x00	; 0
     b18:	66 e0       	ldi	r22, 0x06	; 6
     b1a:	82 e0       	ldi	r24, 0x02	; 2
     b1c:	f0 db       	rcall	.-2080   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D6,0);
     b1e:	40 e0       	ldi	r20, 0x00	; 0
     b20:	67 e0       	ldi	r22, 0x07	; 7
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	ec db       	rcall	.-2088   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D7,0);
     b26:	40 e0       	ldi	r20, 0x00	; 0
     b28:	68 e0       	ldi	r22, 0x08	; 8
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	e8 db       	rcall	.-2096   	; 0x2fe <LED_Matrix_write>
	
	LED_Matrix_write(3,D0,0);
     b2e:	40 e0       	ldi	r20, 0x00	; 0
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	83 e0       	ldi	r24, 0x03	; 3
     b34:	e4 db       	rcall	.-2104   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D1,0);
     b36:	40 e0       	ldi	r20, 0x00	; 0
     b38:	62 e0       	ldi	r22, 0x02	; 2
     b3a:	83 e0       	ldi	r24, 0x03	; 3
     b3c:	e0 db       	rcall	.-2112   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D2,0);
     b3e:	40 e0       	ldi	r20, 0x00	; 0
     b40:	63 e0       	ldi	r22, 0x03	; 3
     b42:	83 e0       	ldi	r24, 0x03	; 3
     b44:	dc db       	rcall	.-2120   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D3,0);
     b46:	40 e0       	ldi	r20, 0x00	; 0
     b48:	64 e0       	ldi	r22, 0x04	; 4
     b4a:	83 e0       	ldi	r24, 0x03	; 3
     b4c:	d8 db       	rcall	.-2128   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D4,0);
     b4e:	40 e0       	ldi	r20, 0x00	; 0
     b50:	65 e0       	ldi	r22, 0x05	; 5
     b52:	83 e0       	ldi	r24, 0x03	; 3
     b54:	d4 db       	rcall	.-2136   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D5,0);
     b56:	40 e0       	ldi	r20, 0x00	; 0
     b58:	66 e0       	ldi	r22, 0x06	; 6
     b5a:	83 e0       	ldi	r24, 0x03	; 3
     b5c:	d0 db       	rcall	.-2144   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D6,0);
     b5e:	40 e0       	ldi	r20, 0x00	; 0
     b60:	67 e0       	ldi	r22, 0x07	; 7
     b62:	83 e0       	ldi	r24, 0x03	; 3
     b64:	cc db       	rcall	.-2152   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D7,0);
     b66:	40 e0       	ldi	r20, 0x00	; 0
     b68:	68 e0       	ldi	r22, 0x08	; 8
     b6a:	83 e0       	ldi	r24, 0x03	; 3
     b6c:	c8 db       	rcall	.-2160   	; 0x2fe <LED_Matrix_write>
	
	LED_Matrix_write(4,D0,0);
     b6e:	40 e0       	ldi	r20, 0x00	; 0
     b70:	61 e0       	ldi	r22, 0x01	; 1
     b72:	84 e0       	ldi	r24, 0x04	; 4
     b74:	c4 db       	rcall	.-2168   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(4,D1,0);
     b76:	40 e0       	ldi	r20, 0x00	; 0
     b78:	62 e0       	ldi	r22, 0x02	; 2
     b7a:	84 e0       	ldi	r24, 0x04	; 4
     b7c:	c0 db       	rcall	.-2176   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(4,D2,0);
     b7e:	40 e0       	ldi	r20, 0x00	; 0
     b80:	63 e0       	ldi	r22, 0x03	; 3
     b82:	84 e0       	ldi	r24, 0x04	; 4
     b84:	bc db       	rcall	.-2184   	; 0x2fe <LED_Matrix_write>
     b86:	40 e0       	ldi	r20, 0x00	; 0
	LED_Matrix_write(4,D3,0);
     b88:	64 e0       	ldi	r22, 0x04	; 4
     b8a:	84 e0       	ldi	r24, 0x04	; 4
     b8c:	b8 db       	rcall	.-2192   	; 0x2fe <LED_Matrix_write>
     b8e:	40 e0       	ldi	r20, 0x00	; 0
     b90:	65 e0       	ldi	r22, 0x05	; 5
	LED_Matrix_write(4,D4,0);
     b92:	84 e0       	ldi	r24, 0x04	; 4
     b94:	b4 db       	rcall	.-2200   	; 0x2fe <LED_Matrix_write>
     b96:	40 e0       	ldi	r20, 0x00	; 0
     b98:	66 e0       	ldi	r22, 0x06	; 6
     b9a:	84 e0       	ldi	r24, 0x04	; 4
	LED_Matrix_write(4,D5,0);
     b9c:	b0 db       	rcall	.-2208   	; 0x2fe <LED_Matrix_write>
     b9e:	40 e0       	ldi	r20, 0x00	; 0
     ba0:	67 e0       	ldi	r22, 0x07	; 7
     ba2:	84 e0       	ldi	r24, 0x04	; 4
     ba4:	ac db       	rcall	.-2216   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(4,D6,0);
     ba6:	40 e0       	ldi	r20, 0x00	; 0
     ba8:	68 e0       	ldi	r22, 0x08	; 8
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	a8 cb       	rjmp	.-2224   	; 0x2fe <LED_Matrix_write>
     bae:	08 95       	ret

00000bb0 <Normal_Left_Led_Matrix>:
	LED_Matrix_write(4,D7,0);
     bb0:	40 e0       	ldi	r20, 0x00	; 0
     bb2:	61 e0       	ldi	r22, 0x01	; 1
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	a3 db       	rcall	.-2234   	; 0x2fe <LED_Matrix_write>
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	62 e0       	ldi	r22, 0x02	; 2
}
void Normal_Left_Led_Matrix(void)
{

	LED_Matrix_write(1,D0,0);
	LED_Matrix_write(1,D1,0);
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	9f db       	rcall	.-2242   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D2,0);
     bc0:	40 e0       	ldi	r20, 0x00	; 0
     bc2:	63 e0       	ldi	r22, 0x03	; 3
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	9b db       	rcall	.-2250   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D3,0XFF);
     bc8:	4f ef       	ldi	r20, 0xFF	; 255
     bca:	64 e0       	ldi	r22, 0x04	; 4
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	97 db       	rcall	.-2258   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D4,0XFF);
     bd0:	4f ef       	ldi	r20, 0xFF	; 255
     bd2:	65 e0       	ldi	r22, 0x05	; 5
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	93 db       	rcall	.-2266   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D5,0);
     bd8:	40 e0       	ldi	r20, 0x00	; 0
     bda:	66 e0       	ldi	r22, 0x06	; 6
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	8f db       	rcall	.-2274   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D6,0);
     be0:	40 e0       	ldi	r20, 0x00	; 0
     be2:	67 e0       	ldi	r22, 0x07	; 7
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	8b db       	rcall	.-2282   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(1,D7,0);
     be8:	40 e0       	ldi	r20, 0x00	; 0
     bea:	68 e0       	ldi	r22, 0x08	; 8
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	87 db       	rcall	.-2290   	; 0x2fe <LED_Matrix_write>
	
	LED_Matrix_write(2,D0,0);
     bf0:	40 e0       	ldi	r20, 0x00	; 0
     bf2:	61 e0       	ldi	r22, 0x01	; 1
     bf4:	82 e0       	ldi	r24, 0x02	; 2
     bf6:	83 db       	rcall	.-2298   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D1,0);
     bf8:	40 e0       	ldi	r20, 0x00	; 0
     bfa:	62 e0       	ldi	r22, 0x02	; 2
     bfc:	82 e0       	ldi	r24, 0x02	; 2
     bfe:	7f db       	rcall	.-2306   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D2,0);
     c00:	40 e0       	ldi	r20, 0x00	; 0
     c02:	63 e0       	ldi	r22, 0x03	; 3
     c04:	82 e0       	ldi	r24, 0x02	; 2
     c06:	7b db       	rcall	.-2314   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D3,0XFF);
     c08:	4f ef       	ldi	r20, 0xFF	; 255
     c0a:	64 e0       	ldi	r22, 0x04	; 4
     c0c:	82 e0       	ldi	r24, 0x02	; 2
     c0e:	77 db       	rcall	.-2322   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D4,0XFF);
     c10:	4f ef       	ldi	r20, 0xFF	; 255
     c12:	65 e0       	ldi	r22, 0x05	; 5
     c14:	82 e0       	ldi	r24, 0x02	; 2
     c16:	73 db       	rcall	.-2330   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D5,0);
     c18:	40 e0       	ldi	r20, 0x00	; 0
     c1a:	66 e0       	ldi	r22, 0x06	; 6
     c1c:	82 e0       	ldi	r24, 0x02	; 2
     c1e:	6f db       	rcall	.-2338   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D6,0);
     c20:	40 e0       	ldi	r20, 0x00	; 0
     c22:	67 e0       	ldi	r22, 0x07	; 7
     c24:	82 e0       	ldi	r24, 0x02	; 2
     c26:	6b db       	rcall	.-2346   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(2,D7,0);
     c28:	40 e0       	ldi	r20, 0x00	; 0
     c2a:	68 e0       	ldi	r22, 0x08	; 8
     c2c:	82 e0       	ldi	r24, 0x02	; 2
     c2e:	67 db       	rcall	.-2354   	; 0x2fe <LED_Matrix_write>
	
	LED_Matrix_write(3,D0,0);
     c30:	40 e0       	ldi	r20, 0x00	; 0
     c32:	61 e0       	ldi	r22, 0x01	; 1
     c34:	83 e0       	ldi	r24, 0x03	; 3
     c36:	63 db       	rcall	.-2362   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D1,0);
     c38:	40 e0       	ldi	r20, 0x00	; 0
     c3a:	62 e0       	ldi	r22, 0x02	; 2
     c3c:	83 e0       	ldi	r24, 0x03	; 3
     c3e:	5f db       	rcall	.-2370   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D2,0);
     c40:	40 e0       	ldi	r20, 0x00	; 0
     c42:	63 e0       	ldi	r22, 0x03	; 3
     c44:	83 e0       	ldi	r24, 0x03	; 3
     c46:	5b db       	rcall	.-2378   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D3,0);
     c48:	40 e0       	ldi	r20, 0x00	; 0
     c4a:	64 e0       	ldi	r22, 0x04	; 4
     c4c:	83 e0       	ldi	r24, 0x03	; 3
     c4e:	57 db       	rcall	.-2386   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D4,0);
     c50:	40 e0       	ldi	r20, 0x00	; 0
     c52:	65 e0       	ldi	r22, 0x05	; 5
     c54:	83 e0       	ldi	r24, 0x03	; 3
     c56:	53 db       	rcall	.-2394   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D5,0);
     c58:	40 e0       	ldi	r20, 0x00	; 0
     c5a:	66 e0       	ldi	r22, 0x06	; 6
     c5c:	83 e0       	ldi	r24, 0x03	; 3
     c5e:	4f db       	rcall	.-2402   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D6,0);
     c60:	40 e0       	ldi	r20, 0x00	; 0
     c62:	67 e0       	ldi	r22, 0x07	; 7
     c64:	83 e0       	ldi	r24, 0x03	; 3
     c66:	4b db       	rcall	.-2410   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(3,D7,0);
     c68:	40 e0       	ldi	r20, 0x00	; 0
     c6a:	68 e0       	ldi	r22, 0x08	; 8
     c6c:	83 e0       	ldi	r24, 0x03	; 3
     c6e:	47 db       	rcall	.-2418   	; 0x2fe <LED_Matrix_write>
	
	LED_Matrix_write(4,D0,0);
     c70:	40 e0       	ldi	r20, 0x00	; 0
     c72:	61 e0       	ldi	r22, 0x01	; 1
     c74:	84 e0       	ldi	r24, 0x04	; 4
     c76:	43 db       	rcall	.-2426   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(4,D1,0);
     c78:	40 e0       	ldi	r20, 0x00	; 0
     c7a:	62 e0       	ldi	r22, 0x02	; 2
     c7c:	84 e0       	ldi	r24, 0x04	; 4
     c7e:	3f db       	rcall	.-2434   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(4,D2,0);
     c80:	40 e0       	ldi	r20, 0x00	; 0
     c82:	63 e0       	ldi	r22, 0x03	; 3
     c84:	84 e0       	ldi	r24, 0x04	; 4
     c86:	3b db       	rcall	.-2442   	; 0x2fe <LED_Matrix_write>
     c88:	40 e0       	ldi	r20, 0x00	; 0
	LED_Matrix_write(4,D3,0);
     c8a:	64 e0       	ldi	r22, 0x04	; 4
     c8c:	84 e0       	ldi	r24, 0x04	; 4
     c8e:	37 db       	rcall	.-2450   	; 0x2fe <LED_Matrix_write>
     c90:	40 e0       	ldi	r20, 0x00	; 0
     c92:	65 e0       	ldi	r22, 0x05	; 5
	LED_Matrix_write(4,D4,0);
     c94:	84 e0       	ldi	r24, 0x04	; 4
     c96:	33 db       	rcall	.-2458   	; 0x2fe <LED_Matrix_write>
     c98:	40 e0       	ldi	r20, 0x00	; 0
     c9a:	66 e0       	ldi	r22, 0x06	; 6
     c9c:	84 e0       	ldi	r24, 0x04	; 4
	LED_Matrix_write(4,D5,0);
     c9e:	2f db       	rcall	.-2466   	; 0x2fe <LED_Matrix_write>
     ca0:	40 e0       	ldi	r20, 0x00	; 0
     ca2:	67 e0       	ldi	r22, 0x07	; 7
     ca4:	84 e0       	ldi	r24, 0x04	; 4
     ca6:	2b db       	rcall	.-2474   	; 0x2fe <LED_Matrix_write>
	LED_Matrix_write(4,D6,0);
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	68 e0       	ldi	r22, 0x08	; 8
     cac:	84 e0       	ldi	r24, 0x04	; 4
     cae:	27 cb       	rjmp	.-2482   	; 0x2fe <LED_Matrix_write>
     cb0:	08 95       	ret

00000cb2 <Chnage_Led_Matrix_Mode>:
	LED_Matrix_write(4,D7,0);
     cb2:	99 9b       	sbis	0x13, 1	; 19
     cb4:	06 c0       	rjmp	.+12     	; 0xcc2 <Chnage_Led_Matrix_Mode+0x10>
     cb6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     cba:	81 30       	cpi	r24, 0x01	; 1
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <Chnage_Led_Matrix_Mode+0xe>

}
void Chnage_Led_Matrix_Mode(void)
{

	if (((PINC & (1<<PD1))==(1<<PD1)) && normal_flag == 1)
     cbe:	57 c0       	rjmp	.+174    	; 0xd6e <Chnage_Led_Matrix_Mode+0xbc>
	{
		Normal_Middle_Led_Matrix();
     cc0:	6f db       	rcall	.-2338   	; 0x3a0 <Normal_Middle_Led_Matrix>
	}
	if((((PINC&(1<<PD5))== (1<<PD5)) || ((PINC&(1<<PD6))== (1<<PD6))) && normal_flag == 1)
     cc2:	9d 99       	sbic	0x13, 5	; 19
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <Chnage_Led_Matrix_Mode+0x18>
     cc6:	9e 9b       	sbis	0x13, 6	; 19
     cc8:	07 c0       	rjmp	.+14     	; 0xcd8 <Chnage_Led_Matrix_Mode+0x26>
     cca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     cce:	81 30       	cpi	r24, 0x01	; 1
     cd0:	09 f0       	breq	.+2      	; 0xcd4 <Chnage_Led_Matrix_Mode+0x22>
	{
		Down_Middle_Led_Matrix();
     cd2:	44 c0       	rjmp	.+136    	; 0xd5c <Chnage_Led_Matrix_Mode+0xaa>
     cd4:	67 dc       	rcall	.-1842   	; 0x5a4 <Down_Middle_Led_Matrix>
     cd6:	09 c0       	rjmp	.+18     	; 0xcea <Chnage_Led_Matrix_Mode+0x38>
	}
	else if((((PINC&(1<<PD2))== (1<<PD2)) || ((PINC&(1<<PD3))== (1<<PD3))) && normal_flag == 1)
     cd8:	9a 99       	sbic	0x13, 2	; 19
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <Chnage_Led_Matrix_Mode+0x2e>
     cdc:	9b 9b       	sbis	0x13, 3	; 19
     cde:	05 c0       	rjmp	.+10     	; 0xcea <Chnage_Led_Matrix_Mode+0x38>
     ce0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     ce4:	81 30       	cpi	r24, 0x01	; 1
	{
		UP_Middle_Led_Matrix();
     ce6:	09 f4       	brne	.+2      	; 0xcea <Chnage_Led_Matrix_Mode+0x38>
     ce8:	dc db       	rcall	.-2120   	; 0x4a2 <UP_Middle_Led_Matrix>
	}
// 	/****************************************** right ******************************************/
	
	
	if (((PINC & (1<<PD1))==(1<<PD1)) && right_flag == 1)
     cea:	99 9b       	sbis	0x13, 1	; 19
     cec:	06 c0       	rjmp	.+12     	; 0xcfa <Chnage_Led_Matrix_Mode+0x48>
     cee:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <right_flag>
     cf2:	81 30       	cpi	r24, 0x01	; 1
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <Chnage_Led_Matrix_Mode+0x46>
	{
		Normal_Right_Led_Matrix();
     cf6:	40 c0       	rjmp	.+128    	; 0xd78 <Chnage_Led_Matrix_Mode+0xc6>
     cf8:	d6 dc       	rcall	.-1620   	; 0x6a6 <Normal_Right_Led_Matrix>
	}
	if((((PINC&(1<<PD5))== (1<<PD5)) || ((PINC&(1<<PD6))== (1<<PD6))) && right_flag == 1)
     cfa:	9d 99       	sbic	0x13, 5	; 19
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <Chnage_Led_Matrix_Mode+0x50>
     cfe:	9e 9b       	sbis	0x13, 6	; 19
     d00:	06 c0       	rjmp	.+12     	; 0xd0e <Chnage_Led_Matrix_Mode+0x5c>
     d02:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <right_flag>
     d06:	81 30       	cpi	r24, 0x01	; 1
	{
		DOWN_Right_Led_Matrix();
     d08:	61 f5       	brne	.+88     	; 0xd62 <Chnage_Led_Matrix_Mode+0xb0>
     d0a:	4e dd       	rcall	.-1380   	; 0x7a8 <DOWN_Right_Led_Matrix>
     d0c:	09 c0       	rjmp	.+18     	; 0xd20 <Chnage_Led_Matrix_Mode+0x6e>
	}
	else if((((PINC&(1<<PD2))== (1<<PD2)) || ((PINC&(1<<PD3))== (1<<PD3))) && right_flag == 1)
     d0e:	9a 99       	sbic	0x13, 2	; 19
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <Chnage_Led_Matrix_Mode+0x64>
     d12:	9b 9b       	sbis	0x13, 3	; 19
     d14:	05 c0       	rjmp	.+10     	; 0xd20 <Chnage_Led_Matrix_Mode+0x6e>
     d16:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <right_flag>
     d1a:	81 30       	cpi	r24, 0x01	; 1
	{
		UP_Rigt_Led_Matrix();
     d1c:	09 f4       	brne	.+2      	; 0xd20 <Chnage_Led_Matrix_Mode+0x6e>
     d1e:	c5 dd       	rcall	.-1142   	; 0x8aa <UP_Rigt_Led_Matrix>
	}
	/************************************* LEFT *******************************************/
	if (((PINC & (1<<PD1))==(1<<PD1)) && left_flg == 1)
     d20:	99 9b       	sbis	0x13, 1	; 19
     d22:	05 c0       	rjmp	.+10     	; 0xd2e <Chnage_Led_Matrix_Mode+0x7c>
     d24:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <left_flg>
     d28:	81 30       	cpi	r24, 0x01	; 1
	{
		Normal_Left_Led_Matrix();
     d2a:	59 f5       	brne	.+86     	; 0xd82 <Chnage_Led_Matrix_Mode+0xd0>
     d2c:	41 df       	rcall	.-382    	; 0xbb0 <Normal_Left_Led_Matrix>
	}
	if((((PINC&(1<<PD5))== (1<<PD5)) || ((PINC&(1<<PD6))== (1<<PD6))) && left_flg == 1)
     d2e:	9d 99       	sbic	0x13, 5	; 19
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <Chnage_Led_Matrix_Mode+0x84>
     d32:	9e 9b       	sbis	0x13, 6	; 19
     d34:	06 c0       	rjmp	.+12     	; 0xd42 <Chnage_Led_Matrix_Mode+0x90>
     d36:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <left_flg>
     d3a:	81 30       	cpi	r24, 0x01	; 1
	{
		UP_Left_Led_Matrix();
     d3c:	a9 f4       	brne	.+42     	; 0xd68 <Chnage_Led_Matrix_Mode+0xb6>
     d3e:	36 de       	rcall	.-916    	; 0x9ac <UP_Left_Led_Matrix>
     d40:	09 c0       	rjmp	.+18     	; 0xd54 <Chnage_Led_Matrix_Mode+0xa2>
	}
	else if((((PINC&(1<<PD2))== (1<<PD2)) || ((PINC&(1<<PD3))== (1<<PD3))) && left_flg == 1)
     d42:	9a 99       	sbic	0x13, 2	; 19
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <Chnage_Led_Matrix_Mode+0x98>
     d46:	9b 9b       	sbis	0x13, 3	; 19
     d48:	05 c0       	rjmp	.+10     	; 0xd54 <Chnage_Led_Matrix_Mode+0xa2>
     d4a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <left_flg>
	{
		DOWN_Left_Led_Matrix();
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	09 f4       	brne	.+2      	; 0xd54 <Chnage_Led_Matrix_Mode+0xa2>
	}
	vTaskDelay(100);	
     d52:	ad de       	rcall	.-678    	; 0xaae <DOWN_Left_Led_Matrix>
     d54:	84 e6       	ldi	r24, 0x64	; 100
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	43 c7       	rjmp	.+3718   	; 0x1be0 <vTaskDelay>



     d5a:	08 95       	ret
	}
	if((((PINC&(1<<PD5))== (1<<PD5)) || ((PINC&(1<<PD6))== (1<<PD6))) && normal_flag == 1)
	{
		Down_Middle_Led_Matrix();
	}
	else if((((PINC&(1<<PD2))== (1<<PD2)) || ((PINC&(1<<PD3))== (1<<PD3))) && normal_flag == 1)
     d5c:	9a 99       	sbic	0x13, 2	; 19
     d5e:	c5 cf       	rjmp	.-118    	; 0xcea <Chnage_Led_Matrix_Mode+0x38>
     d60:	09 c0       	rjmp	.+18     	; 0xd74 <Chnage_Led_Matrix_Mode+0xc2>
	}
	if((((PINC&(1<<PD5))== (1<<PD5)) || ((PINC&(1<<PD6))== (1<<PD6))) && right_flag == 1)
	{
		DOWN_Right_Led_Matrix();
	}
	else if((((PINC&(1<<PD2))== (1<<PD2)) || ((PINC&(1<<PD3))== (1<<PD3))) && right_flag == 1)
     d62:	9a 99       	sbic	0x13, 2	; 19
     d64:	dd cf       	rjmp	.-70     	; 0xd20 <Chnage_Led_Matrix_Mode+0x6e>
     d66:	0b c0       	rjmp	.+22     	; 0xd7e <Chnage_Led_Matrix_Mode+0xcc>
	}
	if((((PINC&(1<<PD5))== (1<<PD5)) || ((PINC&(1<<PD6))== (1<<PD6))) && left_flg == 1)
	{
		UP_Left_Led_Matrix();
	}
	else if((((PINC&(1<<PD2))== (1<<PD2)) || ((PINC&(1<<PD3))== (1<<PD3))) && left_flg == 1)
     d68:	9a 99       	sbic	0x13, 2	; 19
     d6a:	f4 cf       	rjmp	.-24     	; 0xd54 <Chnage_Led_Matrix_Mode+0xa2>
     d6c:	0d c0       	rjmp	.+26     	; 0xd88 <Chnage_Led_Matrix_Mode+0xd6>

	if (((PINC & (1<<PD1))==(1<<PD1)) && normal_flag == 1)
	{
		Normal_Middle_Led_Matrix();
	}
	if((((PINC&(1<<PD5))== (1<<PD5)) || ((PINC&(1<<PD6))== (1<<PD6))) && normal_flag == 1)
     d6e:	9d 99       	sbic	0x13, 5	; 19
     d70:	f5 cf       	rjmp	.-22     	; 0xd5c <Chnage_Led_Matrix_Mode+0xaa>
     d72:	a9 cf       	rjmp	.-174    	; 0xcc6 <Chnage_Led_Matrix_Mode+0x14>
	{
		Down_Middle_Led_Matrix();
	}
	else if((((PINC&(1<<PD2))== (1<<PD2)) || ((PINC&(1<<PD3))== (1<<PD3))) && normal_flag == 1)
     d74:	83 b3       	in	r24, 0x13	; 19
     d76:	b9 cf       	rjmp	.-142    	; 0xcea <Chnage_Led_Matrix_Mode+0x38>
	
	if (((PINC & (1<<PD1))==(1<<PD1)) && right_flag == 1)
	{
		Normal_Right_Led_Matrix();
	}
	if((((PINC&(1<<PD5))== (1<<PD5)) || ((PINC&(1<<PD6))== (1<<PD6))) && right_flag == 1)
     d78:	9d 99       	sbic	0x13, 5	; 19
     d7a:	f3 cf       	rjmp	.-26     	; 0xd62 <Chnage_Led_Matrix_Mode+0xb0>
     d7c:	c0 cf       	rjmp	.-128    	; 0xcfe <Chnage_Led_Matrix_Mode+0x4c>
	{
		DOWN_Right_Led_Matrix();
	}
	else if((((PINC&(1<<PD2))== (1<<PD2)) || ((PINC&(1<<PD3))== (1<<PD3))) && right_flag == 1)
     d7e:	83 b3       	in	r24, 0x13	; 19
     d80:	cf cf       	rjmp	.-98     	; 0xd20 <Chnage_Led_Matrix_Mode+0x6e>
	/************************************* LEFT *******************************************/
	if (((PINC & (1<<PD1))==(1<<PD1)) && left_flg == 1)
	{
		Normal_Left_Led_Matrix();
	}
	if((((PINC&(1<<PD5))== (1<<PD5)) || ((PINC&(1<<PD6))== (1<<PD6))) && left_flg == 1)
     d82:	9d 99       	sbic	0x13, 5	; 19
     d84:	f1 cf       	rjmp	.-30     	; 0xd68 <Chnage_Led_Matrix_Mode+0xb6>
     d86:	d5 cf       	rjmp	.-86     	; 0xd32 <Chnage_Led_Matrix_Mode+0x80>
	{
		UP_Left_Led_Matrix();
	}
	else if((((PINC&(1<<PD2))== (1<<PD2)) || ((PINC&(1<<PD3))== (1<<PD3))) && left_flg == 1)
     d88:	83 b3       	in	r24, 0x13	; 19
     d8a:	e4 cf       	rjmp	.-56     	; 0xd54 <Chnage_Led_Matrix_Mode+0xa2>

00000d8c <Stepper_Init>:

#include "Stepper.h"

void Stepper_Init(void)
{
	CTRL_DDR = 0xFF;
     d8c:	8f ef       	ldi	r24, 0xFF	; 255
     d8e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     d92:	08 95       	ret

00000d94 <Stepper_forward>:
}
void Stepper_forward(u8 mirror, s16 steps){
     d94:	ef 92       	push	r14
     d96:	ff 92       	push	r15
     d98:	0f 93       	push	r16
     d9a:	1f 93       	push	r17
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	8b 01       	movw	r16, r22
	int i=0;
	if(mirror == LEFT_MIRROR){
     da2:	88 23       	and	r24, r24
     da4:	21 f0       	breq	.+8      	; 0xdae <Stepper_forward+0x1a>
			writeBits(CTRL_PORT, (1<<3), LEFT_MSK);
			vTaskDelay(5);
		}
	}
	else{
		for(i=0; i<steps; i++){
     da6:	16 16       	cp	r1, r22
     da8:	17 06       	cpc	r1, r23
     daa:	a4 f1       	brlt	.+104    	; 0xe14 <Stepper_forward+0x80>
     dac:	61 c0       	rjmp	.+194    	; 0xe70 <Stepper_forward+0xdc>
	CTRL_DDR = 0xFF;
}
void Stepper_forward(u8 mirror, s16 steps){
	int i=0;
	if(mirror == LEFT_MIRROR){
		for(i=0; i<steps; i++){
     dae:	16 16       	cp	r1, r22
     db0:	17 06       	cpc	r1, r23
     db2:	0c f0       	brlt	.+2      	; 0xdb6 <Stepper_forward+0x22>
     db4:	5d c0       	rjmp	.+186    	; 0xe70 <Stepper_forward+0xdc>
     db6:	e1 2c       	mov	r14, r1
     db8:	f1 2c       	mov	r15, r1
			writeBits(CTRL_PORT, (1<<0), LEFT_MSK);
     dba:	c2 e6       	ldi	r28, 0x62	; 98
     dbc:	d0 e0       	ldi	r29, 0x00	; 0
     dbe:	88 81       	ld	r24, Y
     dc0:	81 60       	ori	r24, 0x01	; 1
     dc2:	88 83       	st	Y, r24
     dc4:	88 81       	ld	r24, Y
     dc6:	81 7f       	andi	r24, 0xF1	; 241
     dc8:	88 83       	st	Y, r24
			vTaskDelay(5);
     dca:	85 e0       	ldi	r24, 0x05	; 5
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	08 d7       	rcall	.+3600   	; 0x1be0 <vTaskDelay>
			writeBits(CTRL_PORT, (1<<1), LEFT_MSK);
     dd0:	88 81       	ld	r24, Y
     dd2:	82 60       	ori	r24, 0x02	; 2
     dd4:	88 83       	st	Y, r24
     dd6:	88 81       	ld	r24, Y
     dd8:	82 7f       	andi	r24, 0xF2	; 242
     dda:	88 83       	st	Y, r24
			vTaskDelay(5);
     ddc:	85 e0       	ldi	r24, 0x05	; 5
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	ff d6       	rcall	.+3582   	; 0x1be0 <vTaskDelay>
			writeBits(CTRL_PORT, (1<<2), LEFT_MSK);
     de2:	88 81       	ld	r24, Y
     de4:	84 60       	ori	r24, 0x04	; 4
     de6:	88 83       	st	Y, r24
     de8:	88 81       	ld	r24, Y
     dea:	84 7f       	andi	r24, 0xF4	; 244
     dec:	88 83       	st	Y, r24
			vTaskDelay(5);
     dee:	85 e0       	ldi	r24, 0x05	; 5
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	f6 d6       	rcall	.+3564   	; 0x1be0 <vTaskDelay>
			writeBits(CTRL_PORT, (1<<3), LEFT_MSK);
     df4:	88 81       	ld	r24, Y
     df6:	88 60       	ori	r24, 0x08	; 8
     df8:	88 83       	st	Y, r24
     dfa:	88 81       	ld	r24, Y
     dfc:	88 7f       	andi	r24, 0xF8	; 248
			vTaskDelay(5);
     dfe:	88 83       	st	Y, r24
     e00:	85 e0       	ldi	r24, 0x05	; 5
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	ed d6       	rcall	.+3546   	; 0x1be0 <vTaskDelay>
	CTRL_DDR = 0xFF;
}
void Stepper_forward(u8 mirror, s16 steps){
	int i=0;
	if(mirror == LEFT_MIRROR){
		for(i=0; i<steps; i++){
     e06:	8f ef       	ldi	r24, 0xFF	; 255
     e08:	e8 1a       	sub	r14, r24
     e0a:	f8 0a       	sbc	r15, r24
     e0c:	0e 15       	cp	r16, r14
     e0e:	1f 05       	cpc	r17, r15
     e10:	b1 f6       	brne	.-84     	; 0xdbe <Stepper_forward+0x2a>
     e12:	2e c0       	rjmp	.+92     	; 0xe70 <Stepper_forward+0xdc>
			writeBits(CTRL_PORT, (1<<3), LEFT_MSK);
			vTaskDelay(5);
		}
	}
	else{
		for(i=0; i<steps; i++){
     e14:	e1 2c       	mov	r14, r1
     e16:	f1 2c       	mov	r15, r1
			writeBits(CTRL_PORT, (1<<4), RIGHT_MSK);
     e18:	c2 e6       	ldi	r28, 0x62	; 98
     e1a:	d0 e0       	ldi	r29, 0x00	; 0
     e1c:	88 81       	ld	r24, Y
     e1e:	80 61       	ori	r24, 0x10	; 16
     e20:	88 83       	st	Y, r24
     e22:	88 81       	ld	r24, Y
     e24:	8f 71       	andi	r24, 0x1F	; 31
			vTaskDelay(5);
     e26:	88 83       	st	Y, r24
     e28:	85 e0       	ldi	r24, 0x05	; 5
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	d9 d6       	rcall	.+3506   	; 0x1be0 <vTaskDelay>
			writeBits(CTRL_PORT, (1<<5), RIGHT_MSK);
     e2e:	88 81       	ld	r24, Y
     e30:	80 62       	ori	r24, 0x20	; 32
     e32:	88 83       	st	Y, r24
     e34:	88 81       	ld	r24, Y
     e36:	8f 72       	andi	r24, 0x2F	; 47
			vTaskDelay(5);
     e38:	88 83       	st	Y, r24
     e3a:	85 e0       	ldi	r24, 0x05	; 5
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	d0 d6       	rcall	.+3488   	; 0x1be0 <vTaskDelay>
			writeBits(CTRL_PORT, (1<<6), RIGHT_MSK);
     e40:	88 81       	ld	r24, Y
     e42:	80 64       	ori	r24, 0x40	; 64
     e44:	88 83       	st	Y, r24
     e46:	88 81       	ld	r24, Y
     e48:	8f 74       	andi	r24, 0x4F	; 79
			vTaskDelay(5);
     e4a:	88 83       	st	Y, r24
     e4c:	85 e0       	ldi	r24, 0x05	; 5
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	c7 d6       	rcall	.+3470   	; 0x1be0 <vTaskDelay>
			writeBits(CTRL_PORT, (1<<7), RIGHT_MSK);
     e52:	88 81       	ld	r24, Y
     e54:	80 68       	ori	r24, 0x80	; 128
     e56:	88 83       	st	Y, r24
     e58:	88 81       	ld	r24, Y
     e5a:	8f 78       	andi	r24, 0x8F	; 143
			vTaskDelay(5);
     e5c:	88 83       	st	Y, r24
     e5e:	85 e0       	ldi	r24, 0x05	; 5
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	be d6       	rcall	.+3452   	; 0x1be0 <vTaskDelay>
			writeBits(CTRL_PORT, (1<<3), LEFT_MSK);
			vTaskDelay(5);
		}
	}
	else{
		for(i=0; i<steps; i++){
     e64:	8f ef       	ldi	r24, 0xFF	; 255
     e66:	e8 1a       	sub	r14, r24
     e68:	f8 0a       	sbc	r15, r24
     e6a:	0e 15       	cp	r16, r14
     e6c:	1f 05       	cpc	r17, r15
     e6e:	b1 f6       	brne	.-84     	; 0xe1c <Stepper_forward+0x88>
			vTaskDelay(5);
			writeBits(CTRL_PORT, (1<<7), RIGHT_MSK);
			vTaskDelay(5);
		}
	}
}
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	ff 90       	pop	r15
     e7a:	ef 90       	pop	r14
     e7c:	08 95       	ret

00000e7e <Stepper_backward>:
void Stepper_backward(u8 mirror, s16 steps){
	int i=0;
	if(mirror == LEFT_MIRROR){
     e7e:	88 23       	and	r24, r24
     e80:	29 f0       	breq	.+10     	; 0xe8c <Stepper_backward+0xe>
			writeBits(CTRL_PORT, (1<<0), LEFT_MSK);
			_delay_ms(5);
		}
	}
	else{
		for(i=0; i<steps; i++){
     e82:	16 16       	cp	r1, r22
     e84:	17 06       	cpc	r1, r23
     e86:	0c f4       	brge	.+2      	; 0xe8a <Stepper_backward+0xc>
     e88:	3f c0       	rjmp	.+126    	; 0xf08 <Stepper_backward+0x8a>
     e8a:	08 95       	ret
	}
}
void Stepper_backward(u8 mirror, s16 steps){
	int i=0;
	if(mirror == LEFT_MIRROR){
		for(i=0; i<steps; i++){
     e8c:	16 16       	cp	r1, r22
     e8e:	17 06       	cpc	r1, r23
     e90:	0c f0       	brlt	.+2      	; 0xe94 <Stepper_backward+0x16>
     e92:	73 c0       	rjmp	.+230    	; 0xf7a <Stepper_backward+0xfc>
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	30 e0       	ldi	r19, 0x00	; 0
			writeBits(CTRL_PORT, (1<<3), LEFT_MSK);
     e98:	e2 e6       	ldi	r30, 0x62	; 98
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	88 60       	ori	r24, 0x08	; 8
     ea0:	80 83       	st	Z, r24
     ea2:	80 81       	ld	r24, Z
     ea4:	88 7f       	andi	r24, 0xF8	; 248
     ea6:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ea8:	8f e0       	ldi	r24, 0x0F	; 15
     eaa:	97 e2       	ldi	r25, 0x27	; 39
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	f1 f7       	brne	.-4      	; 0xeac <Stepper_backward+0x2e>
     eb0:	00 c0       	rjmp	.+0      	; 0xeb2 <Stepper_backward+0x34>
     eb2:	00 00       	nop
			_delay_ms(5);
			writeBits(CTRL_PORT, (1<<2), LEFT_MSK);
     eb4:	80 81       	ld	r24, Z
     eb6:	84 60       	ori	r24, 0x04	; 4
     eb8:	80 83       	st	Z, r24
     eba:	80 81       	ld	r24, Z
     ebc:	84 7f       	andi	r24, 0xF4	; 244
     ebe:	80 83       	st	Z, r24
     ec0:	8f e0       	ldi	r24, 0x0F	; 15
     ec2:	97 e2       	ldi	r25, 0x27	; 39
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	f1 f7       	brne	.-4      	; 0xec4 <Stepper_backward+0x46>
     ec8:	00 c0       	rjmp	.+0      	; 0xeca <Stepper_backward+0x4c>
     eca:	00 00       	nop
			_delay_ms(5);
			writeBits(CTRL_PORT, (1<<1), LEFT_MSK);
     ecc:	80 81       	ld	r24, Z
     ece:	82 60       	ori	r24, 0x02	; 2
     ed0:	80 83       	st	Z, r24
     ed2:	80 81       	ld	r24, Z
     ed4:	82 7f       	andi	r24, 0xF2	; 242
     ed6:	80 83       	st	Z, r24
     ed8:	8f e0       	ldi	r24, 0x0F	; 15
     eda:	97 e2       	ldi	r25, 0x27	; 39
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	f1 f7       	brne	.-4      	; 0xedc <Stepper_backward+0x5e>
     ee0:	00 c0       	rjmp	.+0      	; 0xee2 <Stepper_backward+0x64>
     ee2:	00 00       	nop
			_delay_ms(5);
			writeBits(CTRL_PORT, (1<<0), LEFT_MSK);
     ee4:	80 81       	ld	r24, Z
     ee6:	81 60       	ori	r24, 0x01	; 1
     ee8:	80 83       	st	Z, r24
     eea:	80 81       	ld	r24, Z
     eec:	81 7f       	andi	r24, 0xF1	; 241
     eee:	80 83       	st	Z, r24
     ef0:	8f e0       	ldi	r24, 0x0F	; 15
     ef2:	97 e2       	ldi	r25, 0x27	; 39
     ef4:	01 97       	sbiw	r24, 0x01	; 1
     ef6:	f1 f7       	brne	.-4      	; 0xef4 <Stepper_backward+0x76>
     ef8:	00 c0       	rjmp	.+0      	; 0xefa <Stepper_backward+0x7c>
     efa:	00 00       	nop
	}
}
void Stepper_backward(u8 mirror, s16 steps){
	int i=0;
	if(mirror == LEFT_MIRROR){
		for(i=0; i<steps; i++){
     efc:	2f 5f       	subi	r18, 0xFF	; 255
     efe:	3f 4f       	sbci	r19, 0xFF	; 255
     f00:	62 17       	cp	r22, r18
     f02:	73 07       	cpc	r23, r19
     f04:	59 f6       	brne	.-106    	; 0xe9c <Stepper_backward+0x1e>
     f06:	08 95       	ret
			writeBits(CTRL_PORT, (1<<0), LEFT_MSK);
			_delay_ms(5);
		}
	}
	else{
		for(i=0; i<steps; i++){
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
			writeBits(CTRL_PORT, (1<<7), RIGHT_MSK);
     f0c:	e2 e6       	ldi	r30, 0x62	; 98
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	80 68       	ori	r24, 0x80	; 128
     f14:	80 83       	st	Z, r24
     f16:	80 81       	ld	r24, Z
     f18:	8f 78       	andi	r24, 0x8F	; 143
     f1a:	80 83       	st	Z, r24
     f1c:	8f e0       	ldi	r24, 0x0F	; 15
     f1e:	97 e2       	ldi	r25, 0x27	; 39
     f20:	01 97       	sbiw	r24, 0x01	; 1
     f22:	f1 f7       	brne	.-4      	; 0xf20 <Stepper_backward+0xa2>
     f24:	00 c0       	rjmp	.+0      	; 0xf26 <Stepper_backward+0xa8>
     f26:	00 00       	nop
			_delay_ms(5);
			writeBits(CTRL_PORT, (1<<6), RIGHT_MSK);
     f28:	80 81       	ld	r24, Z
     f2a:	80 64       	ori	r24, 0x40	; 64
     f2c:	80 83       	st	Z, r24
     f2e:	80 81       	ld	r24, Z
     f30:	8f 74       	andi	r24, 0x4F	; 79
     f32:	80 83       	st	Z, r24
     f34:	8f e0       	ldi	r24, 0x0F	; 15
     f36:	97 e2       	ldi	r25, 0x27	; 39
     f38:	01 97       	sbiw	r24, 0x01	; 1
     f3a:	f1 f7       	brne	.-4      	; 0xf38 <Stepper_backward+0xba>
     f3c:	00 c0       	rjmp	.+0      	; 0xf3e <Stepper_backward+0xc0>
     f3e:	00 00       	nop
			_delay_ms(5);
			writeBits(CTRL_PORT, (1<<5), RIGHT_MSK);
     f40:	80 81       	ld	r24, Z
     f42:	80 62       	ori	r24, 0x20	; 32
     f44:	80 83       	st	Z, r24
     f46:	80 81       	ld	r24, Z
     f48:	8f 72       	andi	r24, 0x2F	; 47
     f4a:	80 83       	st	Z, r24
     f4c:	8f e0       	ldi	r24, 0x0F	; 15
     f4e:	97 e2       	ldi	r25, 0x27	; 39
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	f1 f7       	brne	.-4      	; 0xf50 <Stepper_backward+0xd2>
     f54:	00 c0       	rjmp	.+0      	; 0xf56 <Stepper_backward+0xd8>
     f56:	00 00       	nop
			_delay_ms(5);
			writeBits(CTRL_PORT, (1<<4), RIGHT_MSK);
     f58:	80 81       	ld	r24, Z
     f5a:	80 61       	ori	r24, 0x10	; 16
     f5c:	80 83       	st	Z, r24
     f5e:	80 81       	ld	r24, Z
     f60:	8f 71       	andi	r24, 0x1F	; 31
     f62:	80 83       	st	Z, r24
     f64:	8f e0       	ldi	r24, 0x0F	; 15
     f66:	97 e2       	ldi	r25, 0x27	; 39
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	f1 f7       	brne	.-4      	; 0xf68 <Stepper_backward+0xea>
     f6c:	00 c0       	rjmp	.+0      	; 0xf6e <Stepper_backward+0xf0>
     f6e:	00 00       	nop
			writeBits(CTRL_PORT, (1<<0), LEFT_MSK);
			_delay_ms(5);
		}
	}
	else{
		for(i=0; i<steps; i++){
     f70:	2f 5f       	subi	r18, 0xFF	; 255
     f72:	3f 4f       	sbci	r19, 0xFF	; 255
     f74:	62 17       	cp	r22, r18
     f76:	73 07       	cpc	r23, r19
     f78:	59 f6       	brne	.-106    	; 0xf10 <Stepper_backward+0x92>
     f7a:	08 95       	ret

00000f7c <Ultra_Init>:
static volatile uint16_t timer2_overflows = 0;

void Ultra_Init(void){
	
	
	DDRG |= 0X07;	// Multiplexers selection lines -- PG0 & PG1 for accident avoidance ultras MUX, PG2 for blind spot ultras
     f7c:	e4 e6       	ldi	r30, 0x64	; 100
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	87 60       	ori	r24, 0x07	; 7
     f84:	80 83       	st	Z, r24
		
	DDRD &= ~((1<<0) | (1<<1));		//echo pins(input) -- PD0->accident avoidance ultras & PD1->blind spot ultras
     f86:	81 b3       	in	r24, 0x11	; 17
     f88:	8c 7f       	andi	r24, 0xFC	; 252
     f8a:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1<<0) | (1<<1);			// activate pull up resistance
     f8c:	82 b3       	in	r24, 0x12	; 18
     f8e:	83 60       	ori	r24, 0x03	; 3
     f90:	82 bb       	out	0x12, r24	; 18
	
	DDRD |= (1<<4) | (1<<5);		// trigger pins(output) -- PD4->accident avoidance ultras & PD5->blind spot ultras
     f92:	81 b3       	in	r24, 0x11	; 17
     f94:	80 63       	ori	r24, 0x30	; 48
     f96:	81 bb       	out	0x11, r24	; 17
	
	/* SELECT THE FALLING EDGE TO INTERRUPT BOTH INT0 & INT1 */
	EICRA &= ~((1<<ISC00) | (1<<ISC10));
     f98:	ea e6       	ldi	r30, 0x6A	; 106
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	8a 7f       	andi	r24, 0xFA	; 250
     fa0:	80 83       	st	Z, r24
	EICRA |= (1<<ISC01) | (1<<ISC11);
     fa2:	80 81       	ld	r24, Z
     fa4:	8a 60       	ori	r24, 0x0A	; 10
     fa6:	80 83       	st	Z, r24
	
	/* ENABLE INT0 & INT1 -- INT0 FOR ECHO FROM BLIND SPOT SENSORS & INT1 FOR ACCIDENT AVOIDANCE SENSORS */
	EIMSK |= (1<<INT0) | (1<<INT1);
     fa8:	89 b7       	in	r24, 0x39	; 57
     faa:	83 60       	ori	r24, 0x03	; 3
     fac:	89 bf       	out	0x39, r24	; 57
	
	/* ENABLE INTERRUPT ON TIMER0 & TIMER1 OVERFLOWS */
	TIMSK |= (1<<TOIE0) | (1<<TOIE1);
     fae:	87 b7       	in	r24, 0x37	; 55
     fb0:	85 60       	ori	r24, 0x05	; 5
     fb2:	87 bf       	out	0x37, r24	; 55
	sei();
     fb4:	78 94       	sei
     fb6:	08 95       	ret

00000fb8 <Ultra_get_acc_distance>:
}
uint16_t Ultra_get_acc_distance(u8 sensor){
	if (sensor>2)
     fb8:	83 30       	cpi	r24, 0x03	; 3
     fba:	08 f0       	brcs	.+2      	; 0xfbe <Ultra_get_acc_distance+0x6>
     fbc:	42 c0       	rjmp	.+132    	; 0x1042 <Ultra_get_acc_distance+0x8a>
	{
		return UNKNOWN;
	}
	
	/* SELECT SENSOR */
	writeBits(PORTG, sensor, 0x03);
     fbe:	e5 e6       	ldi	r30, 0x65	; 101
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	90 81       	ld	r25, Z
     fc4:	28 2f       	mov	r18, r24
     fc6:	23 70       	andi	r18, 0x03	; 3
     fc8:	92 2b       	or	r25, r18
     fca:	90 83       	st	Z, r25
     fcc:	90 81       	ld	r25, Z
     fce:	8c 6f       	ori	r24, 0xFC	; 252
     fd0:	89 23       	and	r24, r25
     fd2:	80 83       	st	Z, r24
	//PORTG = sensor;
	
	uint16_t count_a = 0;
	pulse_acc = 0;
     fd4:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <pulse_acc+0x1>
     fd8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <pulse_acc>
	timer2_overflows = 0;
     fdc:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <timer2_overflows+0x1>
     fe0:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <timer2_overflows>
	TCNT2 = 0;
     fe4:	14 bc       	out	0x24, r1	; 36
	TIMSK |= (1<<TOIE2);
     fe6:	87 b7       	in	r24, 0x37	; 55
     fe8:	80 64       	ori	r24, 0x40	; 64
     fea:	87 bf       	out	0x37, r24	; 55
	/* send 10 micro second pulse on trigger pin*/
	PORTD |= (1<<4);
     fec:	94 9a       	sbi	0x12, 4	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fee:	8a e1       	ldi	r24, 0x1A	; 26
     ff0:	8a 95       	dec	r24
     ff2:	f1 f7       	brne	.-4      	; 0xff0 <Ultra_get_acc_distance+0x38>
     ff4:	00 c0       	rjmp	.+0      	; 0xff6 <Ultra_get_acc_distance+0x3e>
	_delay_us(10);
	PORTD &= ~(1<<4);
     ff6:	94 98       	cbi	0x12, 4	; 18
	
	/* start timer1 */
	TCCR2 |= ((1<<CS22)|(1<<CS20));
     ff8:	85 b5       	in	r24, 0x25	; 37
     ffa:	85 60       	ori	r24, 0x05	; 5
     ffc:	85 bd       	out	0x25, r24	; 37
	/* wait until a falling edge occurs on INT0 as pulse_acc updates only there*/
	while(pulse_acc==0);
     ffe:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pulse_acc>
    1002:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <pulse_acc+0x1>
    1006:	89 2b       	or	r24, r25
    1008:	d1 f3       	breq	.-12     	; 0xffe <Ultra_get_acc_distance+0x46>
	/* calculate no. of pulses counted on timer1 */
	uint32_t number = pulse_acc + (timer2_overflows*256);
    100a:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <timer2_overflows>
    100e:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <timer2_overflows+0x1>
    1012:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pulse_acc>
    1016:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <pulse_acc+0x1>
	count_a = (2.1952 * number) -10;
    101a:	76 2f       	mov	r23, r22
    101c:	66 27       	eor	r22, r22
    101e:	68 0f       	add	r22, r24
    1020:	79 1f       	adc	r23, r25
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	2c d7       	rcall	.+3672   	; 0x1e80 <__floatunsisf>
    1028:	28 e2       	ldi	r18, 0x28	; 40
    102a:	3e e7       	ldi	r19, 0x7E	; 126
    102c:	4c e0       	ldi	r20, 0x0C	; 12
    102e:	50 e4       	ldi	r21, 0x40	; 64
    1030:	b5 d7       	rcall	.+3946   	; 0x1f9c <__mulsf3>
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	40 e2       	ldi	r20, 0x20	; 32
    1038:	51 e4       	ldi	r21, 0x41	; 65
    103a:	91 d6       	rcall	.+3362   	; 0x1d5e <__subsf3>
    103c:	f5 d6       	rcall	.+3562   	; 0x1e28 <__fixunssfsi>
	return count_a;
    103e:	cb 01       	movw	r24, r22
    1040:	08 95       	ret
	sei();
}
uint16_t Ultra_get_acc_distance(u8 sensor){
	if (sensor>2)
	{
		return UNKNOWN;
    1042:	8f ef       	ldi	r24, 0xFF	; 255
    1044:	9f ef       	ldi	r25, 0xFF	; 255
	while(pulse_acc==0);
	/* calculate no. of pulses counted on timer1 */
	uint32_t number = pulse_acc + (timer2_overflows*256);
	count_a = (2.1952 * number) -10;
	return count_a;
}
    1046:	08 95       	ret

00001048 <Ultra_get_blind_distance>:

uint16_t Ultra_get_blind_distance(u8 sensor){
	/* SELECT SENSOR */
	if (sensor == BACK_LEFT)
    1048:	83 30       	cpi	r24, 0x03	; 3
    104a:	31 f4       	brne	.+12     	; 0x1058 <Ultra_get_blind_distance+0x10>
	{
		PORTG &= ~(1<<2);
    104c:	e5 e6       	ldi	r30, 0x65	; 101
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	8b 7f       	andi	r24, 0xFB	; 251
    1054:	80 83       	st	Z, r24
    1056:	08 c0       	rjmp	.+16     	; 0x1068 <Ultra_get_blind_distance+0x20>
	}
	else if(sensor == BACK_RIGHT){
    1058:	84 30       	cpi	r24, 0x04	; 4
    105a:	09 f0       	breq	.+2      	; 0x105e <Ultra_get_blind_distance+0x16>
    105c:	45 c0       	rjmp	.+138    	; 0x10e8 <Ultra_get_blind_distance+0xa0>
		PORTG |= (1<<2);
    105e:	e5 e6       	ldi	r30, 0x65	; 101
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	84 60       	ori	r24, 0x04	; 4
    1066:	80 83       	st	Z, r24
	{
		return UNKNOWN;
	}
	
	uint16_t count_Blind = 0;
	pulse_blind = 0;
    1068:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <pulse_blind+0x1>
    106c:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <pulse_blind>
	timer0_overflows = 0;
    1070:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <timer0_overflows+0x1>
    1074:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <timer0_overflows>
	TCNT0 = 0;
    1078:	12 be       	out	0x32, r1	; 50
	TIMSK |= (1<<TOIE0);
    107a:	87 b7       	in	r24, 0x37	; 55
    107c:	81 60       	ori	r24, 0x01	; 1
    107e:	87 bf       	out	0x37, r24	; 55
	/* send 10 micro second pulse on trigger pin*/
	
	PORTD |= (1<<5);
    1080:	95 9a       	sbi	0x12, 5	; 18
    1082:	8a e1       	ldi	r24, 0x1A	; 26
    1084:	8a 95       	dec	r24
    1086:	f1 f7       	brne	.-4      	; 0x1084 <Ultra_get_blind_distance+0x3c>
    1088:	00 c0       	rjmp	.+0      	; 0x108a <Ultra_get_blind_distance+0x42>
	_delay_us(10);
	PORTD &= ~(1<<5);
    108a:	95 98       	cbi	0x12, 5	; 18
	
	TCCR0 |= ((1<<CS00)|(1<<CS02));		//
    108c:	83 b7       	in	r24, 0x33	; 51
    108e:	85 60       	ori	r24, 0x05	; 5
    1090:	83 bf       	out	0x33, r24	; 51
	while(pulse_blind==0);
    1092:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <pulse_blind>
    1096:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <pulse_blind+0x1>
    109a:	89 2b       	or	r24, r25
    109c:	d1 f3       	breq	.-12     	; 0x1092 <Ultra_get_blind_distance+0x4a>
	uint16_t number = pulse_blind + (timer0_overflows*256);
    109e:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <timer0_overflows>
    10a2:	70 91 0e 01 	lds	r23, 0x010E	; 0x80010e <timer0_overflows+0x1>
    10a6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <pulse_blind>
    10aa:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <pulse_blind+0x1>
	count_Blind = (2.1952 * number) -10;
	return count_Blind/20;
    10ae:	76 2f       	mov	r23, r22
    10b0:	66 27       	eor	r22, r22
    10b2:	68 0f       	add	r22, r24
    10b4:	79 1f       	adc	r23, r25
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	e2 d6       	rcall	.+3524   	; 0x1e80 <__floatunsisf>
    10bc:	28 e2       	ldi	r18, 0x28	; 40
    10be:	3e e7       	ldi	r19, 0x7E	; 126
    10c0:	4c e0       	ldi	r20, 0x0C	; 12
    10c2:	50 e4       	ldi	r21, 0x40	; 64
    10c4:	6b d7       	rcall	.+3798   	; 0x1f9c <__mulsf3>
    10c6:	20 e0       	ldi	r18, 0x00	; 0
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	40 e2       	ldi	r20, 0x20	; 32
    10cc:	51 e4       	ldi	r21, 0x41	; 65
    10ce:	47 d6       	rcall	.+3214   	; 0x1d5e <__subsf3>
    10d0:	ab d6       	rcall	.+3414   	; 0x1e28 <__fixunssfsi>
    10d2:	9b 01       	movw	r18, r22
    10d4:	ad ec       	ldi	r26, 0xCD	; 205
    10d6:	bc ec       	ldi	r27, 0xCC	; 204
    10d8:	c4 d7       	rcall	.+3976   	; 0x2062 <__umulhisi3>
    10da:	92 95       	swap	r25
    10dc:	82 95       	swap	r24
    10de:	8f 70       	andi	r24, 0x0F	; 15
    10e0:	89 27       	eor	r24, r25
    10e2:	9f 70       	andi	r25, 0x0F	; 15
    10e4:	89 27       	eor	r24, r25
    10e6:	08 95       	ret
	else if(sensor == BACK_RIGHT){
		PORTG |= (1<<2);
	}
	else
	{
		return UNKNOWN;
    10e8:	8f ef       	ldi	r24, 0xFF	; 255
    10ea:	9f ef       	ldi	r25, 0xFF	; 255
	TCCR0 |= ((1<<CS00)|(1<<CS02));		//
	while(pulse_blind==0);
	uint16_t number = pulse_blind + (timer0_overflows*256);
	count_Blind = (2.1952 * number) -10;
	return count_Blind/20;
}
    10ec:	08 95       	ret

000010ee <__vector_2>:

ISR(INT1_vect)
{
    10ee:	1f 92       	push	r1
    10f0:	0f 92       	push	r0
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	0f 92       	push	r0
    10f6:	11 24       	eor	r1, r1
    10f8:	8f 93       	push	r24
    10fa:	9f 93       	push	r25
	/* save count number at the falling edge time*/
	pulse_blind = TCNT0;
    10fc:	82 b7       	in	r24, 0x32	; 50
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <pulse_blind+0x1>
    1104:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <pulse_blind>
	/*  stop timer */
	TCCR0 = 0;
    1108:	13 be       	out	0x33, r1	; 51
}
    110a:	9f 91       	pop	r25
    110c:	8f 91       	pop	r24
    110e:	0f 90       	pop	r0
    1110:	0f be       	out	0x3f, r0	; 63
    1112:	0f 90       	pop	r0
    1114:	1f 90       	pop	r1
    1116:	18 95       	reti

00001118 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
    1118:	1f 92       	push	r1
    111a:	0f 92       	push	r0
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	0f 92       	push	r0
    1120:	11 24       	eor	r1, r1
    1122:	8f 93       	push	r24
    1124:	9f 93       	push	r25
	timer0_overflows ++;
    1126:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <timer0_overflows>
    112a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <timer0_overflows+0x1>
    112e:	01 96       	adiw	r24, 0x01	; 1
    1130:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <timer0_overflows+0x1>
    1134:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <timer0_overflows>
}
    1138:	9f 91       	pop	r25
    113a:	8f 91       	pop	r24
    113c:	0f 90       	pop	r0
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	0f 90       	pop	r0
    1142:	1f 90       	pop	r1
    1144:	18 95       	reti

00001146 <__vector_1>:




ISR(INT0_vect)
{
    1146:	1f 92       	push	r1
    1148:	0f 92       	push	r0
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	0f 92       	push	r0
    114e:	11 24       	eor	r1, r1
    1150:	8f 93       	push	r24
    1152:	9f 93       	push	r25
	/* save count number at the falling edge time*/
	pulse_acc = TCNT2;
    1154:	84 b5       	in	r24, 0x24	; 36
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <pulse_acc+0x1>
    115c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <pulse_acc>
	/*  stop timer */
	TCCR2 = 0;
    1160:	15 bc       	out	0x25, r1	; 37
}
    1162:	9f 91       	pop	r25
    1164:	8f 91       	pop	r24
    1166:	0f 90       	pop	r0
    1168:	0f be       	out	0x3f, r0	; 63
    116a:	0f 90       	pop	r0
    116c:	1f 90       	pop	r1
    116e:	18 95       	reti

00001170 <__vector_10>:

ISR(TIMER2_OVF_vect)
{
    1170:	1f 92       	push	r1
    1172:	0f 92       	push	r0
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	0f 92       	push	r0
    1178:	11 24       	eor	r1, r1
    117a:	8f 93       	push	r24
    117c:	9f 93       	push	r25
	timer2_overflows++;
    117e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <timer2_overflows>
    1182:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <timer2_overflows+0x1>
    1186:	01 96       	adiw	r24, 0x01	; 1
    1188:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <timer2_overflows+0x1>
    118c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <timer2_overflows>
    1190:	9f 91       	pop	r25
    1192:	8f 91       	pop	r24
    1194:	0f 90       	pop	r0
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	0f 90       	pop	r0
    119a:	1f 90       	pop	r1
    119c:	18 95       	reti

0000119e <SPI_Init>:
 *  Author: cisco126
 */ 
#include "spi.h"

void SPI_Init(u8 spiMode){
	if (spiMode == MASTER_MODE)
    119e:	81 11       	cpse	r24, r1
    11a0:	07 c0       	rjmp	.+14     	; 0x11b0 <SPI_Init+0x12>
	{
		/* Set MOSI and SCK output, all others input */
		spi_ddr |= ((1<<mosi)|(1<<sck)|(1<<ss));
    11a2:	87 b3       	in	r24, 0x17	; 23
    11a4:	87 60       	ori	r24, 0x07	; 7
    11a6:	87 bb       	out	0x17, r24	; 23
		/* Enable SPI, Master, set clock rate fck/16 */
		SPCR |= ((1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<CPOL));
    11a8:	8d b1       	in	r24, 0x0d	; 13
    11aa:	89 65       	ori	r24, 0x59	; 89
    11ac:	8d b9       	out	0x0d, r24	; 13
    11ae:	08 95       	ret
	}
	else if (spiMode == SLAVE_MODE)
    11b0:	81 30       	cpi	r24, 0x01	; 1
    11b2:	11 f4       	brne	.+4      	; 0x11b8 <SPI_Init+0x1a>
	 {
		spi_ddr |= (1<<miso);
    11b4:	ba 9a       	sbi	0x17, 2	; 23
		
		SPCR |= (1<<SPE);
    11b6:	6e 9a       	sbi	0x0d, 6	; 13
    11b8:	08 95       	ret

000011ba <SPI_Transcive>:
	}
	
}
u8 SPI_Transcive(u8 data){
	SPDR = data;
    11ba:	8f b9       	out	0x0f, r24	; 15
	while((SPSR&(1<<SPIF))==0);
    11bc:	77 9b       	sbis	0x0e, 7	; 14
    11be:	fe cf       	rjmp	.-4      	; 0x11bc <SPI_Transcive+0x2>
	PORTD|=(1<<4);
    11c0:	94 9a       	sbi	0x12, 4	; 18
	return SPDR;
    11c2:	8f b1       	in	r24, 0x0f	; 15
}
    11c4:	08 95       	ret

000011c6 <USART1_Init>:
	return recv_buffer;
}

void USART0_clearResponse(void){
	memset(recv_buffer, 0, BUFFER_SIZE);
	index = 0;
    11c6:	0f 93       	push	r16
    11c8:	1f 93       	push	r17
    11ca:	07 2f       	mov	r16, r23
    11cc:	18 2f       	mov	r17, r24
    11ce:	29 2f       	mov	r18, r25
    11d0:	33 27       	eor	r19, r19
    11d2:	00 93 98 00 	sts	0x0098, r16	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    11d6:	60 93 99 00 	sts	0x0099, r22	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    11da:	88 e1       	ldi	r24, 0x18	; 24
    11dc:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    11e0:	ed e9       	ldi	r30, 0x9D	; 157
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	8c 60       	ori	r24, 0x0C	; 12
    11e8:	80 83       	st	Z, r24
    11ea:	1f 91       	pop	r17
    11ec:	0f 91       	pop	r16
    11ee:	08 95       	ret

000011f0 <__vector_18>:
}

ISR(USART0_RX_vect){
    11f0:	1f 92       	push	r1
    11f2:	0f 92       	push	r0
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	0f 92       	push	r0
    11f8:	11 24       	eor	r1, r1
    11fa:	0b b6       	in	r0, 0x3b	; 59
    11fc:	0f 92       	push	r0
    11fe:	2f 93       	push	r18
    1200:	8f 93       	push	r24
    1202:	9f 93       	push	r25
    1204:	ef 93       	push	r30
    1206:	ff 93       	push	r31
	if(index < BUFFER_SIZE){
    1208:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <index>
    120c:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <index+0x1>
    1210:	8c 3b       	cpi	r24, 0xBC	; 188
    1212:	92 40       	sbci	r25, 0x02	; 2
    1214:	8c f4       	brge	.+34     	; 0x1238 <__vector_18+0x48>
		recv_buffer[index] = UDR0;
    1216:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <index>
    121a:	f0 91 14 01 	lds	r31, 0x0114	; 0x800114 <index+0x1>
    121e:	8c b1       	in	r24, 0x0c	; 12
    1220:	e2 5b       	subi	r30, 0xB2	; 178
    1222:	f8 4f       	sbci	r31, 0xF8	; 248
    1224:	80 83       	st	Z, r24
		index++;
    1226:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <index>
    122a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <index+0x1>
    122e:	01 96       	adiw	r24, 0x01	; 1
    1230:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <index+0x1>
    1234:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <index>
	}
    1238:	ff 91       	pop	r31
    123a:	ef 91       	pop	r30
    123c:	9f 91       	pop	r25
    123e:	8f 91       	pop	r24
    1240:	2f 91       	pop	r18
    1242:	0f 90       	pop	r0
    1244:	0b be       	out	0x3b, r0	; 59
    1246:	0f 90       	pop	r0
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	0f 90       	pop	r0
    124c:	1f 90       	pop	r1
    124e:	18 95       	reti

00001250 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1250:	cf 93       	push	r28
    1252:	df 93       	push	r29
    1254:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    1256:	88 d3       	rcall	.+1808   	; 0x1968 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    1258:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <pucAlignedHeap.1981>
    125c:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <pucAlignedHeap.1981+0x1>
    1260:	89 2b       	or	r24, r25
    1262:	31 f4       	brne	.+12     	; 0x1270 <pvPortMalloc+0x20>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
    1264:	8a e1       	ldi	r24, 0x1A	; 26
    1266:	91 e0       	ldi	r25, 0x01	; 1
    1268:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <pucAlignedHeap.1981+0x1>
    126c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <pucAlignedHeap.1981>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1270:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <xNextFreeByte>
    1274:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <xNextFreeByte+0x1>
    1278:	c9 01       	movw	r24, r18
    127a:	8c 0f       	add	r24, r28
    127c:	9d 1f       	adc	r25, r29
    127e:	8b 3d       	cpi	r24, 0xDB	; 219
    1280:	45 e0       	ldi	r20, 0x05	; 5
    1282:	94 07       	cpc	r25, r20
    1284:	70 f4       	brcc	.+28     	; 0x12a2 <pvPortMalloc+0x52>
    1286:	28 17       	cp	r18, r24
    1288:	39 07       	cpc	r19, r25
    128a:	70 f4       	brcc	.+28     	; 0x12a8 <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    128c:	c0 91 15 01 	lds	r28, 0x0115	; 0x800115 <pucAlignedHeap.1981>
    1290:	d0 91 16 01 	lds	r29, 0x0116	; 0x800116 <pucAlignedHeap.1981+0x1>
    1294:	c2 0f       	add	r28, r18
    1296:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
    1298:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <xNextFreeByte+0x1>
    129c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <xNextFreeByte>
    12a0:	05 c0       	rjmp	.+10     	; 0x12ac <pvPortMalloc+0x5c>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    12a2:	c0 e0       	ldi	r28, 0x00	; 0
    12a4:	d0 e0       	ldi	r29, 0x00	; 0
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <pvPortMalloc+0x5c>
    12a8:	c0 e0       	ldi	r28, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    12aa:	d0 e0       	ldi	r29, 0x00	; 0
    12ac:	1c d4       	rcall	.+2104   	; 0x1ae6 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    12ae:	ce 01       	movw	r24, r28
    12b0:	df 91       	pop	r29
    12b2:	cf 91       	pop	r28
    12b4:	08 95       	ret

000012b6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    12b6:	08 95       	ret

000012b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    12b8:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    12ba:	03 96       	adiw	r24, 0x03	; 3
    12bc:	92 83       	std	Z+2, r25	; 0x02
    12be:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    12c0:	2f ef       	ldi	r18, 0xFF	; 255
    12c2:	3f ef       	ldi	r19, 0xFF	; 255
    12c4:	34 83       	std	Z+4, r19	; 0x04
    12c6:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    12c8:	96 83       	std	Z+6, r25	; 0x06
    12ca:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    12cc:	90 87       	std	Z+8, r25	; 0x08
    12ce:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    12d0:	10 82       	st	Z, r1
    12d2:	08 95       	ret

000012d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    12d4:	fc 01       	movw	r30, r24
    12d6:	11 86       	std	Z+9, r1	; 0x09
    12d8:	10 86       	std	Z+8, r1	; 0x08
    12da:	08 95       	ret

000012dc <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
    12e0:	9c 01       	movw	r18, r24
    12e2:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    12e4:	dc 01       	movw	r26, r24
    12e6:	11 96       	adiw	r26, 0x01	; 1
    12e8:	cd 91       	ld	r28, X+
    12ea:	dc 91       	ld	r29, X
    12ec:	12 97       	sbiw	r26, 0x02	; 2

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    12ee:	d3 83       	std	Z+3, r29	; 0x03
    12f0:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    12f2:	8c 81       	ldd	r24, Y+4	; 0x04
    12f4:	9d 81       	ldd	r25, Y+5	; 0x05
    12f6:	95 83       	std	Z+5, r25	; 0x05
    12f8:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    12fa:	8c 81       	ldd	r24, Y+4	; 0x04
    12fc:	9d 81       	ldd	r25, Y+5	; 0x05
    12fe:	dc 01       	movw	r26, r24
    1300:	13 96       	adiw	r26, 0x03	; 3
    1302:	7c 93       	st	X, r23
    1304:	6e 93       	st	-X, r22
    1306:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
    1308:	7d 83       	std	Y+5, r23	; 0x05
    130a:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    130c:	31 87       	std	Z+9, r19	; 0x09
    130e:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    1310:	f9 01       	movw	r30, r18
    1312:	80 81       	ld	r24, Z
    1314:	8f 5f       	subi	r24, 0xFF	; 255
    1316:	80 83       	st	Z, r24
}
    1318:	df 91       	pop	r29
    131a:	cf 91       	pop	r28
    131c:	08 95       	ret

0000131e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1324:	48 81       	ld	r20, Y
    1326:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1328:	4f 3f       	cpi	r20, 0xFF	; 255
    132a:	2f ef       	ldi	r18, 0xFF	; 255
    132c:	52 07       	cpc	r21, r18
    132e:	21 f4       	brne	.+8      	; 0x1338 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1330:	fc 01       	movw	r30, r24
    1332:	a7 81       	ldd	r26, Z+7	; 0x07
    1334:	b0 85       	ldd	r27, Z+8	; 0x08
    1336:	0d c0       	rjmp	.+26     	; 0x1352 <vListInsert+0x34>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1338:	dc 01       	movw	r26, r24
    133a:	13 96       	adiw	r26, 0x03	; 3
    133c:	01 c0       	rjmp	.+2      	; 0x1340 <vListInsert+0x22>
    133e:	df 01       	movw	r26, r30
    1340:	12 96       	adiw	r26, 0x02	; 2
    1342:	ed 91       	ld	r30, X+
    1344:	fc 91       	ld	r31, X
    1346:	13 97       	sbiw	r26, 0x03	; 3
    1348:	20 81       	ld	r18, Z
    134a:	31 81       	ldd	r19, Z+1	; 0x01
    134c:	42 17       	cp	r20, r18
    134e:	53 07       	cpc	r21, r19
    1350:	b0 f7       	brcc	.-20     	; 0x133e <vListInsert+0x20>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1352:	12 96       	adiw	r26, 0x02	; 2
    1354:	ed 91       	ld	r30, X+
    1356:	fc 91       	ld	r31, X
    1358:	13 97       	sbiw	r26, 0x03	; 3
    135a:	fb 83       	std	Y+3, r31	; 0x03
    135c:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    135e:	d5 83       	std	Z+5, r29	; 0x05
    1360:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    1362:	bd 83       	std	Y+5, r27	; 0x05
    1364:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
    1366:	13 96       	adiw	r26, 0x03	; 3
    1368:	dc 93       	st	X, r29
    136a:	ce 93       	st	-X, r28
    136c:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    136e:	99 87       	std	Y+9, r25	; 0x09
    1370:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    1372:	fc 01       	movw	r30, r24
    1374:	20 81       	ld	r18, Z
    1376:	2f 5f       	subi	r18, 0xFF	; 255
    1378:	20 83       	st	Z, r18
}
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	08 95       	ret

00001380 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1380:	cf 93       	push	r28
    1382:	df 93       	push	r29
    1384:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1386:	a0 85       	ldd	r26, Z+8	; 0x08
    1388:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    138a:	c2 81       	ldd	r28, Z+2	; 0x02
    138c:	d3 81       	ldd	r29, Z+3	; 0x03
    138e:	84 81       	ldd	r24, Z+4	; 0x04
    1390:	95 81       	ldd	r25, Z+5	; 0x05
    1392:	9d 83       	std	Y+5, r25	; 0x05
    1394:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1396:	c4 81       	ldd	r28, Z+4	; 0x04
    1398:	d5 81       	ldd	r29, Z+5	; 0x05
    139a:	82 81       	ldd	r24, Z+2	; 0x02
    139c:	93 81       	ldd	r25, Z+3	; 0x03
    139e:	9b 83       	std	Y+3, r25	; 0x03
    13a0:	8a 83       	std	Y+2, r24	; 0x02

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    13a2:	11 96       	adiw	r26, 0x01	; 1
    13a4:	8d 91       	ld	r24, X+
    13a6:	9c 91       	ld	r25, X
    13a8:	12 97       	sbiw	r26, 0x02	; 2
    13aa:	e8 17       	cp	r30, r24
    13ac:	f9 07       	cpc	r31, r25
    13ae:	31 f4       	brne	.+12     	; 0x13bc <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    13b0:	84 81       	ldd	r24, Z+4	; 0x04
    13b2:	95 81       	ldd	r25, Z+5	; 0x05
    13b4:	12 96       	adiw	r26, 0x02	; 2
    13b6:	9c 93       	st	X, r25
    13b8:	8e 93       	st	-X, r24
    13ba:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    13bc:	11 86       	std	Z+9, r1	; 0x09
    13be:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    13c0:	8c 91       	ld	r24, X
    13c2:	81 50       	subi	r24, 0x01	; 1
    13c4:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
    13c6:	df 91       	pop	r29
    13c8:	cf 91       	pop	r28
    13ca:	08 95       	ret

000013cc <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    13cc:	31 e1       	ldi	r19, 0x11	; 17
    13ce:	fc 01       	movw	r30, r24
    13d0:	30 83       	st	Z, r19
    13d2:	31 97       	sbiw	r30, 0x01	; 1
    13d4:	22 e2       	ldi	r18, 0x22	; 34
    13d6:	20 83       	st	Z, r18
    13d8:	31 97       	sbiw	r30, 0x01	; 1
    13da:	a3 e3       	ldi	r26, 0x33	; 51
    13dc:	a0 83       	st	Z, r26
    13de:	31 97       	sbiw	r30, 0x01	; 1
    13e0:	60 83       	st	Z, r22
    13e2:	31 97       	sbiw	r30, 0x01	; 1
    13e4:	70 83       	st	Z, r23
    13e6:	31 97       	sbiw	r30, 0x01	; 1
    13e8:	10 82       	st	Z, r1
    13ea:	31 97       	sbiw	r30, 0x01	; 1
    13ec:	60 e8       	ldi	r22, 0x80	; 128
    13ee:	60 83       	st	Z, r22
    13f0:	31 97       	sbiw	r30, 0x01	; 1
    13f2:	10 82       	st	Z, r1
    13f4:	31 97       	sbiw	r30, 0x01	; 1
    13f6:	62 e0       	ldi	r22, 0x02	; 2
    13f8:	60 83       	st	Z, r22
    13fa:	31 97       	sbiw	r30, 0x01	; 1
    13fc:	63 e0       	ldi	r22, 0x03	; 3
    13fe:	60 83       	st	Z, r22
    1400:	31 97       	sbiw	r30, 0x01	; 1
    1402:	64 e0       	ldi	r22, 0x04	; 4
    1404:	60 83       	st	Z, r22
    1406:	31 97       	sbiw	r30, 0x01	; 1
    1408:	65 e0       	ldi	r22, 0x05	; 5
    140a:	60 83       	st	Z, r22
    140c:	31 97       	sbiw	r30, 0x01	; 1
    140e:	66 e0       	ldi	r22, 0x06	; 6
    1410:	60 83       	st	Z, r22
    1412:	31 97       	sbiw	r30, 0x01	; 1
    1414:	67 e0       	ldi	r22, 0x07	; 7
    1416:	60 83       	st	Z, r22
    1418:	31 97       	sbiw	r30, 0x01	; 1
    141a:	68 e0       	ldi	r22, 0x08	; 8
    141c:	60 83       	st	Z, r22
    141e:	31 97       	sbiw	r30, 0x01	; 1
    1420:	69 e0       	ldi	r22, 0x09	; 9
    1422:	60 83       	st	Z, r22
    1424:	31 97       	sbiw	r30, 0x01	; 1
    1426:	60 e1       	ldi	r22, 0x10	; 16
    1428:	60 83       	st	Z, r22
    142a:	31 97       	sbiw	r30, 0x01	; 1
    142c:	30 83       	st	Z, r19
    142e:	31 97       	sbiw	r30, 0x01	; 1
    1430:	32 e1       	ldi	r19, 0x12	; 18
    1432:	30 83       	st	Z, r19
    1434:	31 97       	sbiw	r30, 0x01	; 1
    1436:	33 e1       	ldi	r19, 0x13	; 19
    1438:	30 83       	st	Z, r19
    143a:	31 97       	sbiw	r30, 0x01	; 1
    143c:	34 e1       	ldi	r19, 0x14	; 20
    143e:	30 83       	st	Z, r19
    1440:	31 97       	sbiw	r30, 0x01	; 1
    1442:	35 e1       	ldi	r19, 0x15	; 21
    1444:	30 83       	st	Z, r19
    1446:	31 97       	sbiw	r30, 0x01	; 1
    1448:	36 e1       	ldi	r19, 0x16	; 22
    144a:	30 83       	st	Z, r19
    144c:	31 97       	sbiw	r30, 0x01	; 1
    144e:	37 e1       	ldi	r19, 0x17	; 23
    1450:	30 83       	st	Z, r19
    1452:	31 97       	sbiw	r30, 0x01	; 1
    1454:	38 e1       	ldi	r19, 0x18	; 24
    1456:	30 83       	st	Z, r19
    1458:	31 97       	sbiw	r30, 0x01	; 1
    145a:	39 e1       	ldi	r19, 0x19	; 25
    145c:	30 83       	st	Z, r19
    145e:	31 97       	sbiw	r30, 0x01	; 1
    1460:	30 e2       	ldi	r19, 0x20	; 32
    1462:	30 83       	st	Z, r19
    1464:	31 97       	sbiw	r30, 0x01	; 1
    1466:	31 e2       	ldi	r19, 0x21	; 33
    1468:	30 83       	st	Z, r19
    146a:	31 97       	sbiw	r30, 0x01	; 1
    146c:	20 83       	st	Z, r18
    146e:	31 97       	sbiw	r30, 0x01	; 1
    1470:	23 e2       	ldi	r18, 0x23	; 35
    1472:	20 83       	st	Z, r18
    1474:	31 97       	sbiw	r30, 0x01	; 1
    1476:	40 83       	st	Z, r20
    1478:	31 97       	sbiw	r30, 0x01	; 1
    147a:	50 83       	st	Z, r21
    147c:	31 97       	sbiw	r30, 0x01	; 1
    147e:	26 e2       	ldi	r18, 0x26	; 38
    1480:	20 83       	st	Z, r18
    1482:	31 97       	sbiw	r30, 0x01	; 1
    1484:	27 e2       	ldi	r18, 0x27	; 39
    1486:	20 83       	st	Z, r18
    1488:	31 97       	sbiw	r30, 0x01	; 1
    148a:	28 e2       	ldi	r18, 0x28	; 40
    148c:	20 83       	st	Z, r18
    148e:	31 97       	sbiw	r30, 0x01	; 1
    1490:	29 e2       	ldi	r18, 0x29	; 41
    1492:	20 83       	st	Z, r18
    1494:	31 97       	sbiw	r30, 0x01	; 1
    1496:	20 e3       	ldi	r18, 0x30	; 48
    1498:	20 83       	st	Z, r18
    149a:	31 97       	sbiw	r30, 0x01	; 1
    149c:	21 e3       	ldi	r18, 0x31	; 49
    149e:	20 83       	st	Z, r18
    14a0:	86 97       	sbiw	r24, 0x26	; 38
    14a2:	08 95       	ret

000014a4 <xPortStartScheduler>:
    14a4:	1b bc       	out	0x2b, r1	; 43
    14a6:	8c e7       	ldi	r24, 0x7C	; 124
    14a8:	8a bd       	out	0x2a, r24	; 42
    14aa:	8b e0       	ldi	r24, 0x0B	; 11
    14ac:	8e bd       	out	0x2e, r24	; 46
    14ae:	87 b7       	in	r24, 0x37	; 55
    14b0:	80 61       	ori	r24, 0x10	; 16
    14b2:	87 bf       	out	0x37, r24	; 55
    14b4:	a0 91 4c 07 	lds	r26, 0x074C	; 0x80074c <pxCurrentTCB>
    14b8:	b0 91 4d 07 	lds	r27, 0x074D	; 0x80074d <pxCurrentTCB+0x1>
    14bc:	cd 91       	ld	r28, X+
    14be:	cd bf       	out	0x3d, r28	; 61
    14c0:	dd 91       	ld	r29, X+
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	ff 91       	pop	r31
    14c6:	ef 91       	pop	r30
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	bf 91       	pop	r27
    14ce:	af 91       	pop	r26
    14d0:	9f 91       	pop	r25
    14d2:	8f 91       	pop	r24
    14d4:	7f 91       	pop	r23
    14d6:	6f 91       	pop	r22
    14d8:	5f 91       	pop	r21
    14da:	4f 91       	pop	r20
    14dc:	3f 91       	pop	r19
    14de:	2f 91       	pop	r18
    14e0:	1f 91       	pop	r17
    14e2:	0f 91       	pop	r16
    14e4:	ff 90       	pop	r15
    14e6:	ef 90       	pop	r14
    14e8:	df 90       	pop	r13
    14ea:	cf 90       	pop	r12
    14ec:	bf 90       	pop	r11
    14ee:	af 90       	pop	r10
    14f0:	9f 90       	pop	r9
    14f2:	8f 90       	pop	r8
    14f4:	7f 90       	pop	r7
    14f6:	6f 90       	pop	r6
    14f8:	5f 90       	pop	r5
    14fa:	4f 90       	pop	r4
    14fc:	3f 90       	pop	r3
    14fe:	2f 90       	pop	r2
    1500:	1f 90       	pop	r1
    1502:	0f 90       	pop	r0
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	0f 90       	pop	r0
    1508:	08 95       	ret
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	08 95       	ret

0000150e <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    150e:	0f 92       	push	r0
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	0f 92       	push	r0
    1516:	1f 92       	push	r1
    1518:	11 24       	eor	r1, r1
    151a:	2f 92       	push	r2
    151c:	3f 92       	push	r3
    151e:	4f 92       	push	r4
    1520:	5f 92       	push	r5
    1522:	6f 92       	push	r6
    1524:	7f 92       	push	r7
    1526:	8f 92       	push	r8
    1528:	9f 92       	push	r9
    152a:	af 92       	push	r10
    152c:	bf 92       	push	r11
    152e:	cf 92       	push	r12
    1530:	df 92       	push	r13
    1532:	ef 92       	push	r14
    1534:	ff 92       	push	r15
    1536:	0f 93       	push	r16
    1538:	1f 93       	push	r17
    153a:	2f 93       	push	r18
    153c:	3f 93       	push	r19
    153e:	4f 93       	push	r20
    1540:	5f 93       	push	r21
    1542:	6f 93       	push	r22
    1544:	7f 93       	push	r23
    1546:	8f 93       	push	r24
    1548:	9f 93       	push	r25
    154a:	af 93       	push	r26
    154c:	bf 93       	push	r27
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    1552:	ef 93       	push	r30
    1554:	ff 93       	push	r31
    1556:	a0 91 4c 07 	lds	r26, 0x074C	; 0x80074c <pxCurrentTCB>
    155a:	b0 91 4d 07 	lds	r27, 0x074D	; 0x80074d <pxCurrentTCB+0x1>
    155e:	0d b6       	in	r0, 0x3d	; 61
    1560:	0d 92       	st	X+, r0
    1562:	0e b6       	in	r0, 0x3e	; 62
    1564:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1566:	8e d3       	rcall	.+1820   	; 0x1c84 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1568:	a0 91 4c 07 	lds	r26, 0x074C	; 0x80074c <pxCurrentTCB>
    156c:	b0 91 4d 07 	lds	r27, 0x074D	; 0x80074d <pxCurrentTCB+0x1>
    1570:	cd 91       	ld	r28, X+
    1572:	cd bf       	out	0x3d, r28	; 61
    1574:	dd 91       	ld	r29, X+
    1576:	de bf       	out	0x3e, r29	; 62
    1578:	ff 91       	pop	r31
    157a:	ef 91       	pop	r30
    157c:	df 91       	pop	r29
    157e:	cf 91       	pop	r28
    1580:	bf 91       	pop	r27
    1582:	af 91       	pop	r26
    1584:	9f 91       	pop	r25
    1586:	8f 91       	pop	r24
    1588:	7f 91       	pop	r23
    158a:	6f 91       	pop	r22
    158c:	5f 91       	pop	r21
    158e:	4f 91       	pop	r20
    1590:	3f 91       	pop	r19
    1592:	2f 91       	pop	r18
    1594:	1f 91       	pop	r17
    1596:	0f 91       	pop	r16
    1598:	ff 90       	pop	r15
    159a:	ef 90       	pop	r14
    159c:	df 90       	pop	r13
    159e:	cf 90       	pop	r12
    15a0:	bf 90       	pop	r11
    15a2:	af 90       	pop	r10
    15a4:	9f 90       	pop	r9
    15a6:	8f 90       	pop	r8
    15a8:	7f 90       	pop	r7
    15aa:	6f 90       	pop	r6
    15ac:	5f 90       	pop	r5
    15ae:	4f 90       	pop	r4
    15b0:	3f 90       	pop	r3
    15b2:	2f 90       	pop	r2
    15b4:	1f 90       	pop	r1
    15b6:	0f 90       	pop	r0
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	0f 90       	pop	r0

	asm volatile ( "ret" );
    15bc:	08 95       	ret

000015be <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    15be:	0f 92       	push	r0
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	f8 94       	cli
    15c4:	0f 92       	push	r0
    15c6:	1f 92       	push	r1
    15c8:	11 24       	eor	r1, r1
    15ca:	2f 92       	push	r2
    15cc:	3f 92       	push	r3
    15ce:	4f 92       	push	r4
    15d0:	5f 92       	push	r5
    15d2:	6f 92       	push	r6
    15d4:	7f 92       	push	r7
    15d6:	8f 92       	push	r8
    15d8:	9f 92       	push	r9
    15da:	af 92       	push	r10
    15dc:	bf 92       	push	r11
    15de:	cf 92       	push	r12
    15e0:	df 92       	push	r13
    15e2:	ef 92       	push	r14
    15e4:	ff 92       	push	r15
    15e6:	0f 93       	push	r16
    15e8:	1f 93       	push	r17
    15ea:	2f 93       	push	r18
    15ec:	3f 93       	push	r19
    15ee:	4f 93       	push	r20
    15f0:	5f 93       	push	r21
    15f2:	6f 93       	push	r22
    15f4:	7f 93       	push	r23
    15f6:	8f 93       	push	r24
    15f8:	9f 93       	push	r25
    15fa:	af 93       	push	r26
    15fc:	bf 93       	push	r27
    15fe:	cf 93       	push	r28
    1600:	df 93       	push	r29
    1602:	ef 93       	push	r30
    1604:	ff 93       	push	r31
    1606:	a0 91 4c 07 	lds	r26, 0x074C	; 0x80074c <pxCurrentTCB>
    160a:	b0 91 4d 07 	lds	r27, 0x074D	; 0x80074d <pxCurrentTCB+0x1>
    160e:	0d b6       	in	r0, 0x3d	; 61
    1610:	0d 92       	st	X+, r0
    1612:	0e b6       	in	r0, 0x3e	; 62
    1614:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    1616:	ae d1       	rcall	.+860    	; 0x1974 <xTaskIncrementTick>
    1618:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    161a:	34 d3       	rcall	.+1640   	; 0x1c84 <vTaskSwitchContext>
    161c:	a0 91 4c 07 	lds	r26, 0x074C	; 0x80074c <pxCurrentTCB>
	}
	portRESTORE_CONTEXT();
    1620:	b0 91 4d 07 	lds	r27, 0x074D	; 0x80074d <pxCurrentTCB+0x1>
    1624:	cd 91       	ld	r28, X+
    1626:	cd bf       	out	0x3d, r28	; 61
    1628:	dd 91       	ld	r29, X+
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	ff 91       	pop	r31
    162e:	ef 91       	pop	r30
    1630:	df 91       	pop	r29
    1632:	cf 91       	pop	r28
    1634:	bf 91       	pop	r27
    1636:	af 91       	pop	r26
    1638:	9f 91       	pop	r25
    163a:	8f 91       	pop	r24
    163c:	7f 91       	pop	r23
    163e:	6f 91       	pop	r22
    1640:	5f 91       	pop	r21
    1642:	4f 91       	pop	r20
    1644:	3f 91       	pop	r19
    1646:	2f 91       	pop	r18
    1648:	1f 91       	pop	r17
    164a:	0f 91       	pop	r16
    164c:	ff 90       	pop	r15
    164e:	ef 90       	pop	r14
    1650:	df 90       	pop	r13
    1652:	cf 90       	pop	r12
    1654:	bf 90       	pop	r11
    1656:	af 90       	pop	r10
    1658:	9f 90       	pop	r9
    165a:	8f 90       	pop	r8
    165c:	7f 90       	pop	r7
    165e:	6f 90       	pop	r6
    1660:	5f 90       	pop	r5
    1662:	4f 90       	pop	r4
    1664:	3f 90       	pop	r3
    1666:	2f 90       	pop	r2
    1668:	1f 90       	pop	r1
    166a:	0f 90       	pop	r0
    166c:	0f be       	out	0x3f, r0	; 63
    166e:	0f 90       	pop	r0
    1670:	08 95       	ret

00001672 <__vector_12>:

	asm volatile ( "ret" );
    1672:	a5 df       	rcall	.-182    	; 0x15be <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
    1674:	18 95       	reti

00001676 <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1676:	e0 91 14 07 	lds	r30, 0x0714	; 0x800714 <pxDelayedTaskList>
    167a:	f0 91 15 07 	lds	r31, 0x0715	; 0x800715 <pxDelayedTaskList+0x1>
    167e:	80 81       	ld	r24, Z
    1680:	81 11       	cpse	r24, r1
    1682:	07 c0       	rjmp	.+14     	; 0x1692 <prvResetNextTaskUnblockTime+0x1c>
    1684:	8f ef       	ldi	r24, 0xFF	; 255
    1686:	9f ef       	ldi	r25, 0xFF	; 255
    1688:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
    168c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
    1690:	08 95       	ret
    1692:	e0 91 14 07 	lds	r30, 0x0714	; 0x800714 <pxDelayedTaskList>
    1696:	f0 91 15 07 	lds	r31, 0x0715	; 0x800715 <pxDelayedTaskList+0x1>
    169a:	05 80       	ldd	r0, Z+5	; 0x05
    169c:	f6 81       	ldd	r31, Z+6	; 0x06
    169e:	e0 2d       	mov	r30, r0
    16a0:	06 80       	ldd	r0, Z+6	; 0x06
    16a2:	f7 81       	ldd	r31, Z+7	; 0x07
    16a4:	e0 2d       	mov	r30, r0
    16a6:	82 81       	ldd	r24, Z+2	; 0x02
    16a8:	93 81       	ldd	r25, Z+3	; 0x03
    16aa:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
    16ae:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
    16b2:	08 95       	ret

000016b4 <prvAddCurrentTaskToDelayedList>:
    16b4:	cf 93       	push	r28
    16b6:	df 93       	push	r29
    16b8:	ec 01       	movw	r28, r24
    16ba:	e0 91 4c 07 	lds	r30, 0x074C	; 0x80074c <pxCurrentTCB>
    16be:	f0 91 4d 07 	lds	r31, 0x074D	; 0x80074d <pxCurrentTCB+0x1>
    16c2:	93 83       	std	Z+3, r25	; 0x03
    16c4:	82 83       	std	Z+2, r24	; 0x02
    16c6:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <xTickCount>
    16ca:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <xTickCount+0x1>
    16ce:	c8 17       	cp	r28, r24
    16d0:	d9 07       	cpc	r29, r25
    16d2:	60 f4       	brcc	.+24     	; 0x16ec <prvAddCurrentTaskToDelayedList+0x38>
    16d4:	60 91 4c 07 	lds	r22, 0x074C	; 0x80074c <pxCurrentTCB>
    16d8:	70 91 4d 07 	lds	r23, 0x074D	; 0x80074d <pxCurrentTCB+0x1>
    16dc:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <pxOverflowDelayedTaskList>
    16e0:	90 91 13 07 	lds	r25, 0x0713	; 0x800713 <pxOverflowDelayedTaskList+0x1>
    16e4:	6e 5f       	subi	r22, 0xFE	; 254
    16e6:	7f 4f       	sbci	r23, 0xFF	; 255
    16e8:	1a de       	rcall	.-972    	; 0x131e <vListInsert>
    16ea:	16 c0       	rjmp	.+44     	; 0x1718 <prvAddCurrentTaskToDelayedList+0x64>
    16ec:	60 91 4c 07 	lds	r22, 0x074C	; 0x80074c <pxCurrentTCB>
    16f0:	70 91 4d 07 	lds	r23, 0x074D	; 0x80074d <pxCurrentTCB+0x1>
    16f4:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <pxDelayedTaskList>
    16f8:	90 91 15 07 	lds	r25, 0x0715	; 0x800715 <pxDelayedTaskList+0x1>
    16fc:	6e 5f       	subi	r22, 0xFE	; 254
    16fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1700:	0e de       	rcall	.-996    	; 0x131e <vListInsert>
    1702:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <xNextTaskUnblockTime>
    1706:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <xNextTaskUnblockTime+0x1>
    170a:	c8 17       	cp	r28, r24
    170c:	d9 07       	cpc	r29, r25
    170e:	20 f4       	brcc	.+8      	; 0x1718 <prvAddCurrentTaskToDelayedList+0x64>
    1710:	d0 93 02 01 	sts	0x0102, r29	; 0x800102 <xNextTaskUnblockTime+0x1>
    1714:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <xNextTaskUnblockTime>
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	08 95       	ret

0000171e <xTaskGenericCreate>:
    171e:	4f 92       	push	r4
    1720:	5f 92       	push	r5
    1722:	6f 92       	push	r6
    1724:	7f 92       	push	r7
    1726:	8f 92       	push	r8
    1728:	9f 92       	push	r9
    172a:	af 92       	push	r10
    172c:	bf 92       	push	r11
    172e:	cf 92       	push	r12
    1730:	df 92       	push	r13
    1732:	ef 92       	push	r14
    1734:	ff 92       	push	r15
    1736:	0f 93       	push	r16
    1738:	1f 93       	push	r17
    173a:	cf 93       	push	r28
    173c:	df 93       	push	r29
    173e:	4c 01       	movw	r8, r24
    1740:	eb 01       	movw	r28, r22
    1742:	5a 01       	movw	r10, r20
    1744:	29 01       	movw	r4, r18
    1746:	8d e2       	ldi	r24, 0x2D	; 45
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	82 dd       	rcall	.-1276   	; 0x1250 <pvPortMalloc>
    174c:	3c 01       	movw	r6, r24
    174e:	00 97       	sbiw	r24, 0x00	; 0
    1750:	09 f4       	brne	.+2      	; 0x1754 <xTaskGenericCreate+0x36>
    1752:	cf c0       	rjmp	.+414    	; 0x18f2 <xTaskGenericCreate+0x1d4>
    1754:	c1 14       	cp	r12, r1
    1756:	d1 04       	cpc	r13, r1
    1758:	09 f0       	breq	.+2      	; 0x175c <xTaskGenericCreate+0x3e>
    175a:	c7 c0       	rjmp	.+398    	; 0x18ea <xTaskGenericCreate+0x1cc>
    175c:	c5 01       	movw	r24, r10
    175e:	78 dd       	rcall	.-1296   	; 0x1250 <pvPortMalloc>
    1760:	f3 01       	movw	r30, r6
    1762:	90 8f       	std	Z+24, r25	; 0x18
    1764:	87 8b       	std	Z+23, r24	; 0x17
    1766:	89 2b       	or	r24, r25
    1768:	19 f4       	brne	.+6      	; 0x1770 <xTaskGenericCreate+0x52>
    176a:	c3 01       	movw	r24, r6
    176c:	a4 dd       	rcall	.-1208   	; 0x12b6 <vPortFree>
    176e:	c1 c0       	rjmp	.+386    	; 0x18f2 <xTaskGenericCreate+0x1d4>
    1770:	f1 e0       	ldi	r31, 0x01	; 1
    1772:	af 1a       	sub	r10, r31
    1774:	b1 08       	sbc	r11, r1
    1776:	f3 01       	movw	r30, r6
    1778:	87 89       	ldd	r24, Z+23	; 0x17
    177a:	90 8d       	ldd	r25, Z+24	; 0x18
    177c:	a8 0e       	add	r10, r24
    177e:	b9 1e       	adc	r11, r25
    1780:	88 81       	ld	r24, Y
    1782:	81 8f       	std	Z+25, r24	; 0x19
    1784:	88 81       	ld	r24, Y
    1786:	88 23       	and	r24, r24
    1788:	81 f0       	breq	.+32     	; 0x17aa <xTaskGenericCreate+0x8c>
    178a:	d3 01       	movw	r26, r6
    178c:	5a 96       	adiw	r26, 0x1a	; 26
    178e:	fe 01       	movw	r30, r28
    1790:	31 96       	adiw	r30, 0x01	; 1
    1792:	9e 01       	movw	r18, r28
    1794:	2c 5e       	subi	r18, 0xEC	; 236
    1796:	3f 4f       	sbci	r19, 0xFF	; 255
    1798:	ef 01       	movw	r28, r30
    179a:	81 91       	ld	r24, Z+
    179c:	8d 93       	st	X+, r24
    179e:	88 81       	ld	r24, Y
    17a0:	88 23       	and	r24, r24
    17a2:	19 f0       	breq	.+6      	; 0x17aa <xTaskGenericCreate+0x8c>
    17a4:	e2 17       	cp	r30, r18
    17a6:	f3 07       	cpc	r31, r19
    17a8:	b9 f7       	brne	.-18     	; 0x1798 <xTaskGenericCreate+0x7a>
    17aa:	f3 01       	movw	r30, r6
    17ac:	14 a6       	std	Z+44, r1	; 0x2c
    17ae:	10 2f       	mov	r17, r16
    17b0:	04 30       	cpi	r16, 0x04	; 4
    17b2:	08 f0       	brcs	.+2      	; 0x17b6 <xTaskGenericCreate+0x98>
    17b4:	13 e0       	ldi	r17, 0x03	; 3
    17b6:	f3 01       	movw	r30, r6
    17b8:	16 8b       	std	Z+22, r17	; 0x16
    17ba:	e3 01       	movw	r28, r6
    17bc:	22 96       	adiw	r28, 0x02	; 2
    17be:	ce 01       	movw	r24, r28
    17c0:	89 dd       	rcall	.-1262   	; 0x12d4 <vListInitialiseItem>
    17c2:	c3 01       	movw	r24, r6
    17c4:	0c 96       	adiw	r24, 0x0c	; 12
    17c6:	86 dd       	rcall	.-1268   	; 0x12d4 <vListInitialiseItem>
    17c8:	f3 01       	movw	r30, r6
    17ca:	71 86       	std	Z+9, r7	; 0x09
    17cc:	60 86       	std	Z+8, r6	; 0x08
    17ce:	84 e0       	ldi	r24, 0x04	; 4
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	81 1b       	sub	r24, r17
    17d4:	91 09       	sbc	r25, r1
    17d6:	95 87       	std	Z+13, r25	; 0x0d
    17d8:	84 87       	std	Z+12, r24	; 0x0c
    17da:	73 8a       	std	Z+19, r7	; 0x13
    17dc:	62 8a       	std	Z+18, r6	; 0x12
    17de:	a2 01       	movw	r20, r4
    17e0:	b4 01       	movw	r22, r8
    17e2:	c5 01       	movw	r24, r10
    17e4:	f3 dd       	rcall	.-1050   	; 0x13cc <pxPortInitialiseStack>
    17e6:	f3 01       	movw	r30, r6
    17e8:	91 83       	std	Z+1, r25	; 0x01
    17ea:	80 83       	st	Z, r24
    17ec:	e1 14       	cp	r14, r1
    17ee:	f1 04       	cpc	r15, r1
    17f0:	19 f0       	breq	.+6      	; 0x17f8 <xTaskGenericCreate+0xda>
    17f2:	f7 01       	movw	r30, r14
    17f4:	71 82       	std	Z+1, r7	; 0x01
    17f6:	60 82       	st	Z, r6
    17f8:	0f b6       	in	r0, 0x3f	; 63
    17fa:	f8 94       	cli
    17fc:	0f 92       	push	r0
    17fe:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxCurrentNumberOfTasks>
    1802:	8f 5f       	subi	r24, 0xFF	; 255
    1804:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <uxCurrentNumberOfTasks>
    1808:	80 91 4c 07 	lds	r24, 0x074C	; 0x80074c <pxCurrentTCB>
    180c:	90 91 4d 07 	lds	r25, 0x074D	; 0x80074d <pxCurrentTCB+0x1>
    1810:	89 2b       	or	r24, r25
    1812:	69 f5       	brne	.+90     	; 0x186e <xTaskGenericCreate+0x150>
    1814:	70 92 4d 07 	sts	0x074D, r7	; 0x80074d <pxCurrentTCB+0x1>
    1818:	60 92 4c 07 	sts	0x074C, r6	; 0x80074c <pxCurrentTCB>
    181c:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxCurrentNumberOfTasks>
    1820:	81 30       	cpi	r24, 0x01	; 1
    1822:	a1 f5       	brne	.+104    	; 0x188c <xTaskGenericCreate+0x16e>
    1824:	88 e2       	ldi	r24, 0x28	; 40
    1826:	97 e0       	ldi	r25, 0x07	; 7
    1828:	47 dd       	rcall	.-1394   	; 0x12b8 <vListInitialise>
    182a:	81 e3       	ldi	r24, 0x31	; 49
    182c:	97 e0       	ldi	r25, 0x07	; 7
    182e:	44 dd       	rcall	.-1400   	; 0x12b8 <vListInitialise>
    1830:	8a e3       	ldi	r24, 0x3A	; 58
    1832:	97 e0       	ldi	r25, 0x07	; 7
    1834:	41 dd       	rcall	.-1406   	; 0x12b8 <vListInitialise>
    1836:	83 e4       	ldi	r24, 0x43	; 67
    1838:	97 e0       	ldi	r25, 0x07	; 7
    183a:	3e dd       	rcall	.-1412   	; 0x12b8 <vListInitialise>
    183c:	8f e1       	ldi	r24, 0x1F	; 31
    183e:	97 e0       	ldi	r25, 0x07	; 7
    1840:	3b dd       	rcall	.-1418   	; 0x12b8 <vListInitialise>
    1842:	86 e1       	ldi	r24, 0x16	; 22
    1844:	97 e0       	ldi	r25, 0x07	; 7
    1846:	38 dd       	rcall	.-1424   	; 0x12b8 <vListInitialise>
    1848:	89 e0       	ldi	r24, 0x09	; 9
    184a:	97 e0       	ldi	r25, 0x07	; 7
    184c:	35 dd       	rcall	.-1430   	; 0x12b8 <vListInitialise>
    184e:	80 e0       	ldi	r24, 0x00	; 0
    1850:	97 e0       	ldi	r25, 0x07	; 7
    1852:	32 dd       	rcall	.-1436   	; 0x12b8 <vListInitialise>
    1854:	8f e1       	ldi	r24, 0x1F	; 31
    1856:	97 e0       	ldi	r25, 0x07	; 7
    1858:	90 93 15 07 	sts	0x0715, r25	; 0x800715 <pxDelayedTaskList+0x1>
    185c:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <pxDelayedTaskList>
    1860:	86 e1       	ldi	r24, 0x16	; 22
    1862:	97 e0       	ldi	r25, 0x07	; 7
    1864:	90 93 13 07 	sts	0x0713, r25	; 0x800713 <pxOverflowDelayedTaskList+0x1>
    1868:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <pxOverflowDelayedTaskList>
    186c:	0f c0       	rjmp	.+30     	; 0x188c <xTaskGenericCreate+0x16e>
    186e:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <xSchedulerRunning>
    1872:	81 11       	cpse	r24, r1
    1874:	0b c0       	rjmp	.+22     	; 0x188c <xTaskGenericCreate+0x16e>
    1876:	e0 91 4c 07 	lds	r30, 0x074C	; 0x80074c <pxCurrentTCB>
    187a:	f0 91 4d 07 	lds	r31, 0x074D	; 0x80074d <pxCurrentTCB+0x1>
    187e:	86 89       	ldd	r24, Z+22	; 0x16
    1880:	08 17       	cp	r16, r24
    1882:	20 f0       	brcs	.+8      	; 0x188c <xTaskGenericCreate+0x16e>
    1884:	70 92 4d 07 	sts	0x074D, r7	; 0x80074d <pxCurrentTCB+0x1>
    1888:	60 92 4c 07 	sts	0x074C, r6	; 0x80074c <pxCurrentTCB>
    188c:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <uxTaskNumber>
    1890:	8f 5f       	subi	r24, 0xFF	; 255
    1892:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <uxTaskNumber>
    1896:	f3 01       	movw	r30, r6
    1898:	86 89       	ldd	r24, Z+22	; 0x16
    189a:	90 91 fb 06 	lds	r25, 0x06FB	; 0x8006fb <uxTopReadyPriority>
    189e:	98 17       	cp	r25, r24
    18a0:	10 f4       	brcc	.+4      	; 0x18a6 <xTaskGenericCreate+0x188>
    18a2:	80 93 fb 06 	sts	0x06FB, r24	; 0x8006fb <uxTopReadyPriority>
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	9c 01       	movw	r18, r24
    18aa:	22 0f       	add	r18, r18
    18ac:	33 1f       	adc	r19, r19
    18ae:	22 0f       	add	r18, r18
    18b0:	33 1f       	adc	r19, r19
    18b2:	22 0f       	add	r18, r18
    18b4:	33 1f       	adc	r19, r19
    18b6:	82 0f       	add	r24, r18
    18b8:	93 1f       	adc	r25, r19
    18ba:	be 01       	movw	r22, r28
    18bc:	88 5d       	subi	r24, 0xD8	; 216
    18be:	98 4f       	sbci	r25, 0xF8	; 248
    18c0:	0d dd       	rcall	.-1510   	; 0x12dc <vListInsertEnd>
    18c2:	0f 90       	pop	r0
    18c4:	0f be       	out	0x3f, r0	; 63
    18c6:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <xSchedulerRunning>
    18ca:	88 23       	and	r24, r24
    18cc:	51 f0       	breq	.+20     	; 0x18e2 <xTaskGenericCreate+0x1c4>
    18ce:	e0 91 4c 07 	lds	r30, 0x074C	; 0x80074c <pxCurrentTCB>
    18d2:	f0 91 4d 07 	lds	r31, 0x074D	; 0x80074d <pxCurrentTCB+0x1>
    18d6:	86 89       	ldd	r24, Z+22	; 0x16
    18d8:	80 17       	cp	r24, r16
    18da:	28 f4       	brcc	.+10     	; 0x18e6 <xTaskGenericCreate+0x1c8>
    18dc:	18 de       	rcall	.-976    	; 0x150e <vPortYield>
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	09 c0       	rjmp	.+18     	; 0x18f4 <xTaskGenericCreate+0x1d6>
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	07 c0       	rjmp	.+14     	; 0x18f4 <xTaskGenericCreate+0x1d6>
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	05 c0       	rjmp	.+10     	; 0x18f4 <xTaskGenericCreate+0x1d6>
    18ea:	fc 01       	movw	r30, r24
    18ec:	d0 8e       	std	Z+24, r13	; 0x18
    18ee:	c7 8a       	std	Z+23, r12	; 0x17
    18f0:	3f cf       	rjmp	.-386    	; 0x1770 <xTaskGenericCreate+0x52>
    18f2:	8f ef       	ldi	r24, 0xFF	; 255
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	1f 91       	pop	r17
    18fa:	0f 91       	pop	r16
    18fc:	ff 90       	pop	r15
    18fe:	ef 90       	pop	r14
    1900:	df 90       	pop	r13
    1902:	cf 90       	pop	r12
    1904:	bf 90       	pop	r11
    1906:	af 90       	pop	r10
    1908:	9f 90       	pop	r9
    190a:	8f 90       	pop	r8
    190c:	7f 90       	pop	r7
    190e:	6f 90       	pop	r6
    1910:	5f 90       	pop	r5
    1912:	4f 90       	pop	r4
    1914:	08 95       	ret

00001916 <vTaskStartScheduler>:
    1916:	af 92       	push	r10
    1918:	bf 92       	push	r11
    191a:	cf 92       	push	r12
    191c:	df 92       	push	r13
    191e:	ef 92       	push	r14
    1920:	ff 92       	push	r15
    1922:	0f 93       	push	r16
    1924:	a1 2c       	mov	r10, r1
    1926:	b1 2c       	mov	r11, r1
    1928:	c1 2c       	mov	r12, r1
    192a:	d1 2c       	mov	r13, r1
    192c:	e1 2c       	mov	r14, r1
    192e:	f1 2c       	mov	r15, r1
    1930:	00 e0       	ldi	r16, 0x00	; 0
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	45 e5       	ldi	r20, 0x55	; 85
    1938:	50 e0       	ldi	r21, 0x00	; 0
    193a:	63 e0       	ldi	r22, 0x03	; 3
    193c:	71 e0       	ldi	r23, 0x01	; 1
    193e:	8b e0       	ldi	r24, 0x0B	; 11
    1940:	9e e0       	ldi	r25, 0x0E	; 14
    1942:	ed de       	rcall	.-550    	; 0x171e <xTaskGenericCreate>
    1944:	81 30       	cpi	r24, 0x01	; 1
    1946:	41 f4       	brne	.+16     	; 0x1958 <vTaskStartScheduler+0x42>
    1948:	f8 94       	cli
    194a:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <xSchedulerRunning>
    194e:	10 92 fd 06 	sts	0x06FD, r1	; 0x8006fd <xTickCount+0x1>
    1952:	10 92 fc 06 	sts	0x06FC, r1	; 0x8006fc <xTickCount>
    1956:	a6 dd       	rcall	.-1204   	; 0x14a4 <xPortStartScheduler>
    1958:	0f 91       	pop	r16
    195a:	ff 90       	pop	r15
    195c:	ef 90       	pop	r14
    195e:	df 90       	pop	r13
    1960:	cf 90       	pop	r12
    1962:	bf 90       	pop	r11
    1964:	af 90       	pop	r10
    1966:	08 95       	ret

00001968 <vTaskSuspendAll>:
    1968:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <uxSchedulerSuspended>
    196c:	8f 5f       	subi	r24, 0xFF	; 255
    196e:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <uxSchedulerSuspended>
    1972:	08 95       	ret

00001974 <xTaskIncrementTick>:
    1974:	cf 92       	push	r12
    1976:	df 92       	push	r13
    1978:	ef 92       	push	r14
    197a:	ff 92       	push	r15
    197c:	0f 93       	push	r16
    197e:	1f 93       	push	r17
    1980:	cf 93       	push	r28
    1982:	df 93       	push	r29
    1984:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <uxSchedulerSuspended>
    1988:	81 11       	cpse	r24, r1
    198a:	97 c0       	rjmp	.+302    	; 0x1aba <xTaskIncrementTick+0x146>
    198c:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <xTickCount>
    1990:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <xTickCount+0x1>
    1994:	01 96       	adiw	r24, 0x01	; 1
    1996:	90 93 fd 06 	sts	0x06FD, r25	; 0x8006fd <xTickCount+0x1>
    199a:	80 93 fc 06 	sts	0x06FC, r24	; 0x8006fc <xTickCount>
    199e:	e0 90 fc 06 	lds	r14, 0x06FC	; 0x8006fc <xTickCount>
    19a2:	f0 90 fd 06 	lds	r15, 0x06FD	; 0x8006fd <xTickCount+0x1>
    19a6:	e1 14       	cp	r14, r1
    19a8:	f1 04       	cpc	r15, r1
    19aa:	b1 f4       	brne	.+44     	; 0x19d8 <xTaskIncrementTick+0x64>
    19ac:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <pxDelayedTaskList>
    19b0:	90 91 15 07 	lds	r25, 0x0715	; 0x800715 <pxDelayedTaskList+0x1>
    19b4:	20 91 12 07 	lds	r18, 0x0712	; 0x800712 <pxOverflowDelayedTaskList>
    19b8:	30 91 13 07 	lds	r19, 0x0713	; 0x800713 <pxOverflowDelayedTaskList+0x1>
    19bc:	30 93 15 07 	sts	0x0715, r19	; 0x800715 <pxDelayedTaskList+0x1>
    19c0:	20 93 14 07 	sts	0x0714, r18	; 0x800714 <pxDelayedTaskList>
    19c4:	90 93 13 07 	sts	0x0713, r25	; 0x800713 <pxOverflowDelayedTaskList+0x1>
    19c8:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <pxOverflowDelayedTaskList>
    19cc:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <xNumOfOverflows>
    19d0:	8f 5f       	subi	r24, 0xFF	; 255
    19d2:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <xNumOfOverflows>
    19d6:	4f de       	rcall	.-866    	; 0x1676 <prvResetNextTaskUnblockTime>
    19d8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <xNextTaskUnblockTime>
    19dc:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <xNextTaskUnblockTime+0x1>
    19e0:	e8 16       	cp	r14, r24
    19e2:	f9 06       	cpc	r15, r25
    19e4:	10 f4       	brcc	.+4      	; 0x19ea <xTaskIncrementTick+0x76>
    19e6:	d1 2c       	mov	r13, r1
    19e8:	50 c0       	rjmp	.+160    	; 0x1a8a <xTaskIncrementTick+0x116>
    19ea:	d1 2c       	mov	r13, r1
    19ec:	cc 24       	eor	r12, r12
    19ee:	c3 94       	inc	r12
    19f0:	e0 91 14 07 	lds	r30, 0x0714	; 0x800714 <pxDelayedTaskList>
    19f4:	f0 91 15 07 	lds	r31, 0x0715	; 0x800715 <pxDelayedTaskList+0x1>
    19f8:	80 81       	ld	r24, Z
    19fa:	81 11       	cpse	r24, r1
    19fc:	07 c0       	rjmp	.+14     	; 0x1a0c <xTaskIncrementTick+0x98>
    19fe:	8f ef       	ldi	r24, 0xFF	; 255
    1a00:	9f ef       	ldi	r25, 0xFF	; 255
    1a02:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
    1a06:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
    1a0a:	3f c0       	rjmp	.+126    	; 0x1a8a <xTaskIncrementTick+0x116>
    1a0c:	e0 91 14 07 	lds	r30, 0x0714	; 0x800714 <pxDelayedTaskList>
    1a10:	f0 91 15 07 	lds	r31, 0x0715	; 0x800715 <pxDelayedTaskList+0x1>
    1a14:	05 80       	ldd	r0, Z+5	; 0x05
    1a16:	f6 81       	ldd	r31, Z+6	; 0x06
    1a18:	e0 2d       	mov	r30, r0
    1a1a:	c6 81       	ldd	r28, Z+6	; 0x06
    1a1c:	d7 81       	ldd	r29, Z+7	; 0x07
    1a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a20:	9b 81       	ldd	r25, Y+3	; 0x03
    1a22:	e8 16       	cp	r14, r24
    1a24:	f9 06       	cpc	r15, r25
    1a26:	28 f4       	brcc	.+10     	; 0x1a32 <xTaskIncrementTick+0xbe>
    1a28:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
    1a2c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
    1a30:	2c c0       	rjmp	.+88     	; 0x1a8a <xTaskIncrementTick+0x116>
    1a32:	8e 01       	movw	r16, r28
    1a34:	0e 5f       	subi	r16, 0xFE	; 254
    1a36:	1f 4f       	sbci	r17, 0xFF	; 255
    1a38:	c8 01       	movw	r24, r16
    1a3a:	a2 dc       	rcall	.-1724   	; 0x1380 <uxListRemove>
    1a3c:	8c 89       	ldd	r24, Y+20	; 0x14
    1a3e:	9d 89       	ldd	r25, Y+21	; 0x15
    1a40:	89 2b       	or	r24, r25
    1a42:	19 f0       	breq	.+6      	; 0x1a4a <xTaskIncrementTick+0xd6>
    1a44:	ce 01       	movw	r24, r28
    1a46:	0c 96       	adiw	r24, 0x0c	; 12
    1a48:	9b dc       	rcall	.-1738   	; 0x1380 <uxListRemove>
    1a4a:	8e 89       	ldd	r24, Y+22	; 0x16
    1a4c:	90 91 fb 06 	lds	r25, 0x06FB	; 0x8006fb <uxTopReadyPriority>
    1a50:	98 17       	cp	r25, r24
    1a52:	10 f4       	brcc	.+4      	; 0x1a58 <xTaskIncrementTick+0xe4>
    1a54:	80 93 fb 06 	sts	0x06FB, r24	; 0x8006fb <uxTopReadyPriority>
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	9c 01       	movw	r18, r24
    1a5c:	22 0f       	add	r18, r18
    1a5e:	33 1f       	adc	r19, r19
    1a60:	22 0f       	add	r18, r18
    1a62:	33 1f       	adc	r19, r19
    1a64:	22 0f       	add	r18, r18
    1a66:	33 1f       	adc	r19, r19
    1a68:	82 0f       	add	r24, r18
    1a6a:	93 1f       	adc	r25, r19
    1a6c:	b8 01       	movw	r22, r16
    1a6e:	88 5d       	subi	r24, 0xD8	; 216
    1a70:	98 4f       	sbci	r25, 0xF8	; 248
    1a72:	34 dc       	rcall	.-1944   	; 0x12dc <vListInsertEnd>
    1a74:	e0 91 4c 07 	lds	r30, 0x074C	; 0x80074c <pxCurrentTCB>
    1a78:	f0 91 4d 07 	lds	r31, 0x074D	; 0x80074d <pxCurrentTCB+0x1>
    1a7c:	9e 89       	ldd	r25, Y+22	; 0x16
    1a7e:	86 89       	ldd	r24, Z+22	; 0x16
    1a80:	98 17       	cp	r25, r24
    1a82:	08 f4       	brcc	.+2      	; 0x1a86 <xTaskIncrementTick+0x112>
    1a84:	b5 cf       	rjmp	.-150    	; 0x19f0 <xTaskIncrementTick+0x7c>
    1a86:	dc 2c       	mov	r13, r12
    1a88:	b3 cf       	rjmp	.-154    	; 0x19f0 <xTaskIncrementTick+0x7c>
    1a8a:	e0 91 4c 07 	lds	r30, 0x074C	; 0x80074c <pxCurrentTCB>
    1a8e:	f0 91 4d 07 	lds	r31, 0x074D	; 0x80074d <pxCurrentTCB+0x1>
    1a92:	86 89       	ldd	r24, Z+22	; 0x16
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	fc 01       	movw	r30, r24
    1a98:	ee 0f       	add	r30, r30
    1a9a:	ff 1f       	adc	r31, r31
    1a9c:	ee 0f       	add	r30, r30
    1a9e:	ff 1f       	adc	r31, r31
    1aa0:	ee 0f       	add	r30, r30
    1aa2:	ff 1f       	adc	r31, r31
    1aa4:	8e 0f       	add	r24, r30
    1aa6:	9f 1f       	adc	r25, r31
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	e8 5d       	subi	r30, 0xD8	; 216
    1aac:	f8 4f       	sbci	r31, 0xF8	; 248
    1aae:	80 81       	ld	r24, Z
    1ab0:	82 30       	cpi	r24, 0x02	; 2
    1ab2:	48 f0       	brcs	.+18     	; 0x1ac6 <xTaskIncrementTick+0x152>
    1ab4:	dd 24       	eor	r13, r13
    1ab6:	d3 94       	inc	r13
    1ab8:	06 c0       	rjmp	.+12     	; 0x1ac6 <xTaskIncrementTick+0x152>
    1aba:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <uxPendedTicks>
    1abe:	8f 5f       	subi	r24, 0xFF	; 255
    1ac0:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <uxPendedTicks>
    1ac4:	d1 2c       	mov	r13, r1
    1ac6:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <xYieldPending>
    1aca:	88 23       	and	r24, r24
    1acc:	11 f0       	breq	.+4      	; 0x1ad2 <xTaskIncrementTick+0x15e>
    1ace:	dd 24       	eor	r13, r13
    1ad0:	d3 94       	inc	r13
    1ad2:	8d 2d       	mov	r24, r13
    1ad4:	df 91       	pop	r29
    1ad6:	cf 91       	pop	r28
    1ad8:	1f 91       	pop	r17
    1ada:	0f 91       	pop	r16
    1adc:	ff 90       	pop	r15
    1ade:	ef 90       	pop	r14
    1ae0:	df 90       	pop	r13
    1ae2:	cf 90       	pop	r12
    1ae4:	08 95       	ret

00001ae6 <xTaskResumeAll>:
    1ae6:	df 92       	push	r13
    1ae8:	ef 92       	push	r14
    1aea:	ff 92       	push	r15
    1aec:	0f 93       	push	r16
    1aee:	1f 93       	push	r17
    1af0:	cf 93       	push	r28
    1af2:	df 93       	push	r29
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	f8 94       	cli
    1af8:	0f 92       	push	r0
    1afa:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <uxSchedulerSuspended>
    1afe:	81 50       	subi	r24, 0x01	; 1
    1b00:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <uxSchedulerSuspended>
    1b04:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <uxSchedulerSuspended>
    1b08:	81 11       	cpse	r24, r1
    1b0a:	5d c0       	rjmp	.+186    	; 0x1bc6 <xTaskResumeAll+0xe0>
    1b0c:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxCurrentNumberOfTasks>
    1b10:	81 11       	cpse	r24, r1
    1b12:	30 c0       	rjmp	.+96     	; 0x1b74 <xTaskResumeAll+0x8e>
    1b14:	5b c0       	rjmp	.+182    	; 0x1bcc <xTaskResumeAll+0xe6>
    1b16:	d7 01       	movw	r26, r14
    1b18:	15 96       	adiw	r26, 0x05	; 5
    1b1a:	ed 91       	ld	r30, X+
    1b1c:	fc 91       	ld	r31, X
    1b1e:	16 97       	sbiw	r26, 0x06	; 6
    1b20:	c6 81       	ldd	r28, Z+6	; 0x06
    1b22:	d7 81       	ldd	r29, Z+7	; 0x07
    1b24:	ce 01       	movw	r24, r28
    1b26:	0c 96       	adiw	r24, 0x0c	; 12
    1b28:	2b dc       	rcall	.-1962   	; 0x1380 <uxListRemove>
    1b2a:	8e 01       	movw	r16, r28
    1b2c:	0e 5f       	subi	r16, 0xFE	; 254
    1b2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b30:	c8 01       	movw	r24, r16
    1b32:	26 dc       	rcall	.-1972   	; 0x1380 <uxListRemove>
    1b34:	8e 89       	ldd	r24, Y+22	; 0x16
    1b36:	90 91 fb 06 	lds	r25, 0x06FB	; 0x8006fb <uxTopReadyPriority>
    1b3a:	98 17       	cp	r25, r24
    1b3c:	10 f4       	brcc	.+4      	; 0x1b42 <xTaskResumeAll+0x5c>
    1b3e:	80 93 fb 06 	sts	0x06FB, r24	; 0x8006fb <uxTopReadyPriority>
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	9c 01       	movw	r18, r24
    1b46:	22 0f       	add	r18, r18
    1b48:	33 1f       	adc	r19, r19
    1b4a:	22 0f       	add	r18, r18
    1b4c:	33 1f       	adc	r19, r19
    1b4e:	22 0f       	add	r18, r18
    1b50:	33 1f       	adc	r19, r19
    1b52:	82 0f       	add	r24, r18
    1b54:	93 1f       	adc	r25, r19
    1b56:	b8 01       	movw	r22, r16
    1b58:	88 5d       	subi	r24, 0xD8	; 216
    1b5a:	98 4f       	sbci	r25, 0xF8	; 248
    1b5c:	bf db       	rcall	.-2178   	; 0x12dc <vListInsertEnd>
    1b5e:	e0 91 4c 07 	lds	r30, 0x074C	; 0x80074c <pxCurrentTCB>
    1b62:	f0 91 4d 07 	lds	r31, 0x074D	; 0x80074d <pxCurrentTCB+0x1>
    1b66:	9e 89       	ldd	r25, Y+22	; 0x16
    1b68:	86 89       	ldd	r24, Z+22	; 0x16
    1b6a:	98 17       	cp	r25, r24
    1b6c:	58 f0       	brcs	.+22     	; 0x1b84 <xTaskResumeAll+0x9e>
    1b6e:	d0 92 f8 06 	sts	0x06F8, r13	; 0x8006f8 <xYieldPending>
    1b72:	08 c0       	rjmp	.+16     	; 0x1b84 <xTaskResumeAll+0x9e>
    1b74:	0f 2e       	mov	r0, r31
    1b76:	f9 e0       	ldi	r31, 0x09	; 9
    1b78:	ef 2e       	mov	r14, r31
    1b7a:	f7 e0       	ldi	r31, 0x07	; 7
    1b7c:	ff 2e       	mov	r15, r31
    1b7e:	f0 2d       	mov	r31, r0
    1b80:	dd 24       	eor	r13, r13
    1b82:	d3 94       	inc	r13
    1b84:	f7 01       	movw	r30, r14
    1b86:	80 81       	ld	r24, Z
    1b88:	81 11       	cpse	r24, r1
    1b8a:	c5 cf       	rjmp	.-118    	; 0x1b16 <xTaskResumeAll+0x30>
    1b8c:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <uxPendedTicks>
    1b90:	88 23       	and	r24, r24
    1b92:	91 f0       	breq	.+36     	; 0x1bb8 <xTaskResumeAll+0xd2>
    1b94:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <uxPendedTicks>
    1b98:	88 23       	and	r24, r24
    1b9a:	71 f0       	breq	.+28     	; 0x1bb8 <xTaskResumeAll+0xd2>
    1b9c:	c1 e0       	ldi	r28, 0x01	; 1
    1b9e:	ea de       	rcall	.-556    	; 0x1974 <xTaskIncrementTick>
    1ba0:	81 11       	cpse	r24, r1
    1ba2:	c0 93 f8 06 	sts	0x06F8, r28	; 0x8006f8 <xYieldPending>
    1ba6:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <uxPendedTicks>
    1baa:	81 50       	subi	r24, 0x01	; 1
    1bac:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <uxPendedTicks>
    1bb0:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <uxPendedTicks>
    1bb4:	81 11       	cpse	r24, r1
    1bb6:	f3 cf       	rjmp	.-26     	; 0x1b9e <xTaskResumeAll+0xb8>
    1bb8:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <xYieldPending>
    1bbc:	81 30       	cpi	r24, 0x01	; 1
    1bbe:	29 f4       	brne	.+10     	; 0x1bca <xTaskResumeAll+0xe4>
    1bc0:	a6 dc       	rcall	.-1716   	; 0x150e <vPortYield>
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	03 c0       	rjmp	.+6      	; 0x1bcc <xTaskResumeAll+0xe6>
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	01 c0       	rjmp	.+2      	; 0x1bcc <xTaskResumeAll+0xe6>
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	0f 90       	pop	r0
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	1f 91       	pop	r17
    1bd6:	0f 91       	pop	r16
    1bd8:	ff 90       	pop	r15
    1bda:	ef 90       	pop	r14
    1bdc:	df 90       	pop	r13
    1bde:	08 95       	ret

00001be0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    1be0:	cf 93       	push	r28
    1be2:	df 93       	push	r29
    1be4:	ec 01       	movw	r28, r24
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    1be6:	89 2b       	or	r24, r25
    1be8:	91 f0       	breq	.+36     	; 0x1c0e <vTaskDelay+0x2e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    1bea:	be de       	rcall	.-644    	; 0x1968 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1bec:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <xTickCount>
    1bf0:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <xTickCount+0x1>
    1bf4:	c8 0f       	add	r28, r24
    1bf6:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1bf8:	80 91 4c 07 	lds	r24, 0x074C	; 0x80074c <pxCurrentTCB>
    1bfc:	90 91 4d 07 	lds	r25, 0x074D	; 0x80074d <pxCurrentTCB+0x1>
    1c00:	02 96       	adiw	r24, 0x02	; 2
    1c02:	be db       	rcall	.-2180   	; 0x1380 <uxListRemove>
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1c04:	ce 01       	movw	r24, r28
    1c06:	56 dd       	rcall	.-1364   	; 0x16b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    1c08:	6e df       	rcall	.-292    	; 0x1ae6 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1c0a:	81 11       	cpse	r24, r1
    1c0c:	01 c0       	rjmp	.+2      	; 0x1c10 <vTaskDelay+0x30>
		{
			portYIELD_WITHIN_API();
    1c0e:	7f dc       	rcall	.-1794   	; 0x150e <vPortYield>
    1c10:	df 91       	pop	r29
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1c12:	cf 91       	pop	r28
    1c14:	08 95       	ret

00001c16 <prvIdleTask>:
    1c16:	00 e0       	ldi	r16, 0x00	; 0
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1c18:	17 e0       	ldi	r17, 0x07	; 7

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    1c1a:	0f 2e       	mov	r0, r31
    1c1c:	f8 e2       	ldi	r31, 0x28	; 40
    1c1e:	ef 2e       	mov	r14, r31
    1c20:	f7 e0       	ldi	r31, 0x07	; 7
    1c22:	ff 2e       	mov	r15, r31
    1c24:	f0 2d       	mov	r31, r0
    1c26:	24 c0       	rjmp	.+72     	; 0x1c70 <prvIdleTask+0x5a>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
    1c28:	9f de       	rcall	.-706    	; 0x1968 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1c2a:	d8 01       	movw	r26, r16
			}
			( void ) xTaskResumeAll();
    1c2c:	cc 91       	ld	r28, X
    1c2e:	5b df       	rcall	.-330    	; 0x1ae6 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    1c30:	cc 23       	and	r28, r28
    1c32:	f1 f0       	breq	.+60     	; 0x1c70 <prvIdleTask+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	0f 92       	push	r0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    1c3a:	d8 01       	movw	r26, r16
    1c3c:	15 96       	adiw	r26, 0x05	; 5
    1c3e:	ed 91       	ld	r30, X+
    1c40:	fc 91       	ld	r31, X
    1c42:	16 97       	sbiw	r26, 0x06	; 6
    1c44:	c6 81       	ldd	r28, Z+6	; 0x06
    1c46:	d7 81       	ldd	r29, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    1c48:	ce 01       	movw	r24, r28
    1c4a:	02 96       	adiw	r24, 0x02	; 2
    1c4c:	99 db       	rcall	.-2254   	; 0x1380 <uxListRemove>
					--uxCurrentNumberOfTasks;
    1c4e:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxCurrentNumberOfTasks>
    1c52:	81 50       	subi	r24, 0x01	; 1
    1c54:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
    1c58:	80 91 ff 06 	lds	r24, 0x06FF	; 0x8006ff <uxTasksDeleted>
    1c5c:	81 50       	subi	r24, 0x01	; 1
    1c5e:	80 93 ff 06 	sts	0x06FF, r24	; 0x8006ff <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
    1c62:	0f 90       	pop	r0
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	8f 89       	ldd	r24, Y+23	; 0x17
    1c68:	98 8d       	ldd	r25, Y+24	; 0x18
		vPortFree( pxTCB );
    1c6a:	25 db       	rcall	.-2486   	; 0x12b6 <vPortFree>
    1c6c:	ce 01       	movw	r24, r28
    1c6e:	23 db       	rcall	.-2490   	; 0x12b6 <vPortFree>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    1c70:	80 91 ff 06 	lds	r24, 0x06FF	; 0x8006ff <uxTasksDeleted>
    1c74:	81 11       	cpse	r24, r1

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    1c76:	d8 cf       	rjmp	.-80     	; 0x1c28 <prvIdleTask+0x12>
    1c78:	f7 01       	movw	r30, r14
    1c7a:	80 81       	ld	r24, Z
    1c7c:	82 30       	cpi	r24, 0x02	; 2
			{
				taskYIELD();
    1c7e:	c0 f3       	brcs	.-16     	; 0x1c70 <prvIdleTask+0x5a>
    1c80:	46 dc       	rcall	.-1908   	; 0x150e <vPortYield>
    1c82:	f6 cf       	rjmp	.-20     	; 0x1c70 <prvIdleTask+0x5a>

00001c84 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1c84:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <uxSchedulerSuspended>
    1c88:	88 23       	and	r24, r24
    1c8a:	21 f0       	breq	.+8      	; 0x1c94 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <xYieldPending>
    1c92:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
    1c94:	10 92 f8 06 	sts	0x06F8, r1	; 0x8006f8 <xYieldPending>
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1c98:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <uxTopReadyPriority>
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	fc 01       	movw	r30, r24
    1ca0:	ee 0f       	add	r30, r30
    1ca2:	ff 1f       	adc	r31, r31
    1ca4:	ee 0f       	add	r30, r30
    1ca6:	ff 1f       	adc	r31, r31
    1ca8:	ee 0f       	add	r30, r30
    1caa:	ff 1f       	adc	r31, r31
    1cac:	8e 0f       	add	r24, r30
    1cae:	9f 1f       	adc	r25, r31
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	e8 5d       	subi	r30, 0xD8	; 216
    1cb4:	f8 4f       	sbci	r31, 0xF8	; 248
    1cb6:	80 81       	ld	r24, Z
    1cb8:	81 11       	cpse	r24, r1
    1cba:	17 c0       	rjmp	.+46     	; 0x1cea <vTaskSwitchContext+0x66>
    1cbc:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <uxTopReadyPriority>
    1cc0:	81 50       	subi	r24, 0x01	; 1
    1cc2:	80 93 fb 06 	sts	0x06FB, r24	; 0x8006fb <uxTopReadyPriority>
    1cc6:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <uxTopReadyPriority>
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	fc 01       	movw	r30, r24
    1cce:	ee 0f       	add	r30, r30
    1cd0:	ff 1f       	adc	r31, r31
    1cd2:	ee 0f       	add	r30, r30
    1cd4:	ff 1f       	adc	r31, r31
    1cd6:	ee 0f       	add	r30, r30
    1cd8:	ff 1f       	adc	r31, r31
    1cda:	8e 0f       	add	r24, r30
    1cdc:	9f 1f       	adc	r25, r31
    1cde:	fc 01       	movw	r30, r24
    1ce0:	e8 5d       	subi	r30, 0xD8	; 216
    1ce2:	f8 4f       	sbci	r31, 0xF8	; 248
    1ce4:	80 81       	ld	r24, Z
    1ce6:	88 23       	and	r24, r24
    1ce8:	49 f3       	breq	.-46     	; 0x1cbc <vTaskSwitchContext+0x38>
    1cea:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <uxTopReadyPriority>
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	9c 01       	movw	r18, r24
    1cf2:	22 0f       	add	r18, r18
    1cf4:	33 1f       	adc	r19, r19
    1cf6:	22 0f       	add	r18, r18
    1cf8:	33 1f       	adc	r19, r19
    1cfa:	22 0f       	add	r18, r18
    1cfc:	33 1f       	adc	r19, r19
    1cfe:	28 0f       	add	r18, r24
    1d00:	39 1f       	adc	r19, r25
    1d02:	d9 01       	movw	r26, r18
    1d04:	a8 5d       	subi	r26, 0xD8	; 216
    1d06:	b8 4f       	sbci	r27, 0xF8	; 248
    1d08:	11 96       	adiw	r26, 0x01	; 1
    1d0a:	ed 91       	ld	r30, X+
    1d0c:	fc 91       	ld	r31, X
    1d0e:	12 97       	sbiw	r26, 0x02	; 2
    1d10:	02 80       	ldd	r0, Z+2	; 0x02
    1d12:	f3 81       	ldd	r31, Z+3	; 0x03
    1d14:	e0 2d       	mov	r30, r0
    1d16:	12 96       	adiw	r26, 0x02	; 2
    1d18:	fc 93       	st	X, r31
    1d1a:	ee 93       	st	-X, r30
    1d1c:	11 97       	sbiw	r26, 0x01	; 1
    1d1e:	25 5d       	subi	r18, 0xD5	; 213
    1d20:	38 4f       	sbci	r19, 0xF8	; 248
    1d22:	e2 17       	cp	r30, r18
    1d24:	f3 07       	cpc	r31, r19
    1d26:	29 f4       	brne	.+10     	; 0x1d32 <vTaskSwitchContext+0xae>
    1d28:	22 81       	ldd	r18, Z+2	; 0x02
    1d2a:	33 81       	ldd	r19, Z+3	; 0x03
    1d2c:	fd 01       	movw	r30, r26
    1d2e:	32 83       	std	Z+2, r19	; 0x02
    1d30:	21 83       	std	Z+1, r18	; 0x01
    1d32:	fc 01       	movw	r30, r24
    1d34:	ee 0f       	add	r30, r30
    1d36:	ff 1f       	adc	r31, r31
    1d38:	ee 0f       	add	r30, r30
    1d3a:	ff 1f       	adc	r31, r31
    1d3c:	ee 0f       	add	r30, r30
    1d3e:	ff 1f       	adc	r31, r31
    1d40:	8e 0f       	add	r24, r30
    1d42:	9f 1f       	adc	r25, r31
    1d44:	fc 01       	movw	r30, r24
    1d46:	e8 5d       	subi	r30, 0xD8	; 216
    1d48:	f8 4f       	sbci	r31, 0xF8	; 248
    1d4a:	01 80       	ldd	r0, Z+1	; 0x01
    1d4c:	f2 81       	ldd	r31, Z+2	; 0x02
    1d4e:	e0 2d       	mov	r30, r0
    1d50:	86 81       	ldd	r24, Z+6	; 0x06
    1d52:	97 81       	ldd	r25, Z+7	; 0x07
    1d54:	90 93 4d 07 	sts	0x074D, r25	; 0x80074d <pxCurrentTCB+0x1>
    1d58:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <pxCurrentTCB>
    1d5c:	08 95       	ret

00001d5e <__subsf3>:
    1d5e:	50 58       	subi	r21, 0x80	; 128

00001d60 <__addsf3>:
    1d60:	bb 27       	eor	r27, r27
    1d62:	aa 27       	eor	r26, r26
    1d64:	0e d0       	rcall	.+28     	; 0x1d82 <__addsf3x>
    1d66:	e0 c0       	rjmp	.+448    	; 0x1f28 <__fp_round>
    1d68:	d1 d0       	rcall	.+418    	; 0x1f0c <__fp_pscA>
    1d6a:	30 f0       	brcs	.+12     	; 0x1d78 <__addsf3+0x18>
    1d6c:	d6 d0       	rcall	.+428    	; 0x1f1a <__fp_pscB>
    1d6e:	20 f0       	brcs	.+8      	; 0x1d78 <__addsf3+0x18>
    1d70:	31 f4       	brne	.+12     	; 0x1d7e <__addsf3+0x1e>
    1d72:	9f 3f       	cpi	r25, 0xFF	; 255
    1d74:	11 f4       	brne	.+4      	; 0x1d7a <__addsf3+0x1a>
    1d76:	1e f4       	brtc	.+6      	; 0x1d7e <__addsf3+0x1e>
    1d78:	c6 c0       	rjmp	.+396    	; 0x1f06 <__fp_nan>
    1d7a:	0e f4       	brtc	.+2      	; 0x1d7e <__addsf3+0x1e>
    1d7c:	e0 95       	com	r30
    1d7e:	e7 fb       	bst	r30, 7
    1d80:	bc c0       	rjmp	.+376    	; 0x1efa <__fp_inf>

00001d82 <__addsf3x>:
    1d82:	e9 2f       	mov	r30, r25
    1d84:	e2 d0       	rcall	.+452    	; 0x1f4a <__fp_split3>
    1d86:	80 f3       	brcs	.-32     	; 0x1d68 <__addsf3+0x8>
    1d88:	ba 17       	cp	r27, r26
    1d8a:	62 07       	cpc	r22, r18
    1d8c:	73 07       	cpc	r23, r19
    1d8e:	84 07       	cpc	r24, r20
    1d90:	95 07       	cpc	r25, r21
    1d92:	18 f0       	brcs	.+6      	; 0x1d9a <__addsf3x+0x18>
    1d94:	71 f4       	brne	.+28     	; 0x1db2 <__addsf3x+0x30>
    1d96:	9e f5       	brtc	.+102    	; 0x1dfe <__addsf3x+0x7c>
    1d98:	fa c0       	rjmp	.+500    	; 0x1f8e <__fp_zero>
    1d9a:	0e f4       	brtc	.+2      	; 0x1d9e <__addsf3x+0x1c>
    1d9c:	e0 95       	com	r30
    1d9e:	0b 2e       	mov	r0, r27
    1da0:	ba 2f       	mov	r27, r26
    1da2:	a0 2d       	mov	r26, r0
    1da4:	0b 01       	movw	r0, r22
    1da6:	b9 01       	movw	r22, r18
    1da8:	90 01       	movw	r18, r0
    1daa:	0c 01       	movw	r0, r24
    1dac:	ca 01       	movw	r24, r20
    1dae:	a0 01       	movw	r20, r0
    1db0:	11 24       	eor	r1, r1
    1db2:	ff 27       	eor	r31, r31
    1db4:	59 1b       	sub	r21, r25
    1db6:	99 f0       	breq	.+38     	; 0x1dde <__addsf3x+0x5c>
    1db8:	59 3f       	cpi	r21, 0xF9	; 249
    1dba:	50 f4       	brcc	.+20     	; 0x1dd0 <__addsf3x+0x4e>
    1dbc:	50 3e       	cpi	r21, 0xE0	; 224
    1dbe:	68 f1       	brcs	.+90     	; 0x1e1a <__addsf3x+0x98>
    1dc0:	1a 16       	cp	r1, r26
    1dc2:	f0 40       	sbci	r31, 0x00	; 0
    1dc4:	a2 2f       	mov	r26, r18
    1dc6:	23 2f       	mov	r18, r19
    1dc8:	34 2f       	mov	r19, r20
    1dca:	44 27       	eor	r20, r20
    1dcc:	58 5f       	subi	r21, 0xF8	; 248
    1dce:	f3 cf       	rjmp	.-26     	; 0x1db6 <__addsf3x+0x34>
    1dd0:	46 95       	lsr	r20
    1dd2:	37 95       	ror	r19
    1dd4:	27 95       	ror	r18
    1dd6:	a7 95       	ror	r26
    1dd8:	f0 40       	sbci	r31, 0x00	; 0
    1dda:	53 95       	inc	r21
    1ddc:	c9 f7       	brne	.-14     	; 0x1dd0 <__addsf3x+0x4e>
    1dde:	7e f4       	brtc	.+30     	; 0x1dfe <__addsf3x+0x7c>
    1de0:	1f 16       	cp	r1, r31
    1de2:	ba 0b       	sbc	r27, r26
    1de4:	62 0b       	sbc	r22, r18
    1de6:	73 0b       	sbc	r23, r19
    1de8:	84 0b       	sbc	r24, r20
    1dea:	ba f0       	brmi	.+46     	; 0x1e1a <__addsf3x+0x98>
    1dec:	91 50       	subi	r25, 0x01	; 1
    1dee:	a1 f0       	breq	.+40     	; 0x1e18 <__addsf3x+0x96>
    1df0:	ff 0f       	add	r31, r31
    1df2:	bb 1f       	adc	r27, r27
    1df4:	66 1f       	adc	r22, r22
    1df6:	77 1f       	adc	r23, r23
    1df8:	88 1f       	adc	r24, r24
    1dfa:	c2 f7       	brpl	.-16     	; 0x1dec <__addsf3x+0x6a>
    1dfc:	0e c0       	rjmp	.+28     	; 0x1e1a <__addsf3x+0x98>
    1dfe:	ba 0f       	add	r27, r26
    1e00:	62 1f       	adc	r22, r18
    1e02:	73 1f       	adc	r23, r19
    1e04:	84 1f       	adc	r24, r20
    1e06:	48 f4       	brcc	.+18     	; 0x1e1a <__addsf3x+0x98>
    1e08:	87 95       	ror	r24
    1e0a:	77 95       	ror	r23
    1e0c:	67 95       	ror	r22
    1e0e:	b7 95       	ror	r27
    1e10:	f7 95       	ror	r31
    1e12:	9e 3f       	cpi	r25, 0xFE	; 254
    1e14:	08 f0       	brcs	.+2      	; 0x1e18 <__addsf3x+0x96>
    1e16:	b3 cf       	rjmp	.-154    	; 0x1d7e <__addsf3+0x1e>
    1e18:	93 95       	inc	r25
    1e1a:	88 0f       	add	r24, r24
    1e1c:	08 f0       	brcs	.+2      	; 0x1e20 <__addsf3x+0x9e>
    1e1e:	99 27       	eor	r25, r25
    1e20:	ee 0f       	add	r30, r30
    1e22:	97 95       	ror	r25
    1e24:	87 95       	ror	r24
    1e26:	08 95       	ret

00001e28 <__fixunssfsi>:
    1e28:	98 d0       	rcall	.+304    	; 0x1f5a <__fp_splitA>
    1e2a:	88 f0       	brcs	.+34     	; 0x1e4e <__fixunssfsi+0x26>
    1e2c:	9f 57       	subi	r25, 0x7F	; 127
    1e2e:	90 f0       	brcs	.+36     	; 0x1e54 <__fixunssfsi+0x2c>
    1e30:	b9 2f       	mov	r27, r25
    1e32:	99 27       	eor	r25, r25
    1e34:	b7 51       	subi	r27, 0x17	; 23
    1e36:	a0 f0       	brcs	.+40     	; 0x1e60 <__fixunssfsi+0x38>
    1e38:	d1 f0       	breq	.+52     	; 0x1e6e <__fixunssfsi+0x46>
    1e3a:	66 0f       	add	r22, r22
    1e3c:	77 1f       	adc	r23, r23
    1e3e:	88 1f       	adc	r24, r24
    1e40:	99 1f       	adc	r25, r25
    1e42:	1a f0       	brmi	.+6      	; 0x1e4a <__fixunssfsi+0x22>
    1e44:	ba 95       	dec	r27
    1e46:	c9 f7       	brne	.-14     	; 0x1e3a <__fixunssfsi+0x12>
    1e48:	12 c0       	rjmp	.+36     	; 0x1e6e <__fixunssfsi+0x46>
    1e4a:	b1 30       	cpi	r27, 0x01	; 1
    1e4c:	81 f0       	breq	.+32     	; 0x1e6e <__fixunssfsi+0x46>
    1e4e:	9f d0       	rcall	.+318    	; 0x1f8e <__fp_zero>
    1e50:	b1 e0       	ldi	r27, 0x01	; 1
    1e52:	08 95       	ret
    1e54:	9c c0       	rjmp	.+312    	; 0x1f8e <__fp_zero>
    1e56:	67 2f       	mov	r22, r23
    1e58:	78 2f       	mov	r23, r24
    1e5a:	88 27       	eor	r24, r24
    1e5c:	b8 5f       	subi	r27, 0xF8	; 248
    1e5e:	39 f0       	breq	.+14     	; 0x1e6e <__fixunssfsi+0x46>
    1e60:	b9 3f       	cpi	r27, 0xF9	; 249
    1e62:	cc f3       	brlt	.-14     	; 0x1e56 <__fixunssfsi+0x2e>
    1e64:	86 95       	lsr	r24
    1e66:	77 95       	ror	r23
    1e68:	67 95       	ror	r22
    1e6a:	b3 95       	inc	r27
    1e6c:	d9 f7       	brne	.-10     	; 0x1e64 <__fixunssfsi+0x3c>
    1e6e:	3e f4       	brtc	.+14     	; 0x1e7e <__fixunssfsi+0x56>
    1e70:	90 95       	com	r25
    1e72:	80 95       	com	r24
    1e74:	70 95       	com	r23
    1e76:	61 95       	neg	r22
    1e78:	7f 4f       	sbci	r23, 0xFF	; 255
    1e7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e7e:	08 95       	ret

00001e80 <__floatunsisf>:
    1e80:	e8 94       	clt
    1e82:	09 c0       	rjmp	.+18     	; 0x1e96 <__floatsisf+0x12>

00001e84 <__floatsisf>:
    1e84:	97 fb       	bst	r25, 7
    1e86:	3e f4       	brtc	.+14     	; 0x1e96 <__floatsisf+0x12>
    1e88:	90 95       	com	r25
    1e8a:	80 95       	com	r24
    1e8c:	70 95       	com	r23
    1e8e:	61 95       	neg	r22
    1e90:	7f 4f       	sbci	r23, 0xFF	; 255
    1e92:	8f 4f       	sbci	r24, 0xFF	; 255
    1e94:	9f 4f       	sbci	r25, 0xFF	; 255
    1e96:	99 23       	and	r25, r25
    1e98:	a9 f0       	breq	.+42     	; 0x1ec4 <__floatsisf+0x40>
    1e9a:	f9 2f       	mov	r31, r25
    1e9c:	96 e9       	ldi	r25, 0x96	; 150
    1e9e:	bb 27       	eor	r27, r27
    1ea0:	93 95       	inc	r25
    1ea2:	f6 95       	lsr	r31
    1ea4:	87 95       	ror	r24
    1ea6:	77 95       	ror	r23
    1ea8:	67 95       	ror	r22
    1eaa:	b7 95       	ror	r27
    1eac:	f1 11       	cpse	r31, r1
    1eae:	f8 cf       	rjmp	.-16     	; 0x1ea0 <__floatsisf+0x1c>
    1eb0:	fa f4       	brpl	.+62     	; 0x1ef0 <__floatsisf+0x6c>
    1eb2:	bb 0f       	add	r27, r27
    1eb4:	11 f4       	brne	.+4      	; 0x1eba <__floatsisf+0x36>
    1eb6:	60 ff       	sbrs	r22, 0
    1eb8:	1b c0       	rjmp	.+54     	; 0x1ef0 <__floatsisf+0x6c>
    1eba:	6f 5f       	subi	r22, 0xFF	; 255
    1ebc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ebe:	8f 4f       	sbci	r24, 0xFF	; 255
    1ec0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec2:	16 c0       	rjmp	.+44     	; 0x1ef0 <__floatsisf+0x6c>
    1ec4:	88 23       	and	r24, r24
    1ec6:	11 f0       	breq	.+4      	; 0x1ecc <__floatsisf+0x48>
    1ec8:	96 e9       	ldi	r25, 0x96	; 150
    1eca:	11 c0       	rjmp	.+34     	; 0x1eee <__floatsisf+0x6a>
    1ecc:	77 23       	and	r23, r23
    1ece:	21 f0       	breq	.+8      	; 0x1ed8 <__floatsisf+0x54>
    1ed0:	9e e8       	ldi	r25, 0x8E	; 142
    1ed2:	87 2f       	mov	r24, r23
    1ed4:	76 2f       	mov	r23, r22
    1ed6:	05 c0       	rjmp	.+10     	; 0x1ee2 <__floatsisf+0x5e>
    1ed8:	66 23       	and	r22, r22
    1eda:	71 f0       	breq	.+28     	; 0x1ef8 <__floatsisf+0x74>
    1edc:	96 e8       	ldi	r25, 0x86	; 134
    1ede:	86 2f       	mov	r24, r22
    1ee0:	70 e0       	ldi	r23, 0x00	; 0
    1ee2:	60 e0       	ldi	r22, 0x00	; 0
    1ee4:	2a f0       	brmi	.+10     	; 0x1ef0 <__floatsisf+0x6c>
    1ee6:	9a 95       	dec	r25
    1ee8:	66 0f       	add	r22, r22
    1eea:	77 1f       	adc	r23, r23
    1eec:	88 1f       	adc	r24, r24
    1eee:	da f7       	brpl	.-10     	; 0x1ee6 <__floatsisf+0x62>
    1ef0:	88 0f       	add	r24, r24
    1ef2:	96 95       	lsr	r25
    1ef4:	87 95       	ror	r24
    1ef6:	97 f9       	bld	r25, 7
    1ef8:	08 95       	ret

00001efa <__fp_inf>:
    1efa:	97 f9       	bld	r25, 7
    1efc:	9f 67       	ori	r25, 0x7F	; 127
    1efe:	80 e8       	ldi	r24, 0x80	; 128
    1f00:	70 e0       	ldi	r23, 0x00	; 0
    1f02:	60 e0       	ldi	r22, 0x00	; 0
    1f04:	08 95       	ret

00001f06 <__fp_nan>:
    1f06:	9f ef       	ldi	r25, 0xFF	; 255
    1f08:	80 ec       	ldi	r24, 0xC0	; 192
    1f0a:	08 95       	ret

00001f0c <__fp_pscA>:
    1f0c:	00 24       	eor	r0, r0
    1f0e:	0a 94       	dec	r0
    1f10:	16 16       	cp	r1, r22
    1f12:	17 06       	cpc	r1, r23
    1f14:	18 06       	cpc	r1, r24
    1f16:	09 06       	cpc	r0, r25
    1f18:	08 95       	ret

00001f1a <__fp_pscB>:
    1f1a:	00 24       	eor	r0, r0
    1f1c:	0a 94       	dec	r0
    1f1e:	12 16       	cp	r1, r18
    1f20:	13 06       	cpc	r1, r19
    1f22:	14 06       	cpc	r1, r20
    1f24:	05 06       	cpc	r0, r21
    1f26:	08 95       	ret

00001f28 <__fp_round>:
    1f28:	09 2e       	mov	r0, r25
    1f2a:	03 94       	inc	r0
    1f2c:	00 0c       	add	r0, r0
    1f2e:	11 f4       	brne	.+4      	; 0x1f34 <__fp_round+0xc>
    1f30:	88 23       	and	r24, r24
    1f32:	52 f0       	brmi	.+20     	; 0x1f48 <__fp_round+0x20>
    1f34:	bb 0f       	add	r27, r27
    1f36:	40 f4       	brcc	.+16     	; 0x1f48 <__fp_round+0x20>
    1f38:	bf 2b       	or	r27, r31
    1f3a:	11 f4       	brne	.+4      	; 0x1f40 <__fp_round+0x18>
    1f3c:	60 ff       	sbrs	r22, 0
    1f3e:	04 c0       	rjmp	.+8      	; 0x1f48 <__fp_round+0x20>
    1f40:	6f 5f       	subi	r22, 0xFF	; 255
    1f42:	7f 4f       	sbci	r23, 0xFF	; 255
    1f44:	8f 4f       	sbci	r24, 0xFF	; 255
    1f46:	9f 4f       	sbci	r25, 0xFF	; 255
    1f48:	08 95       	ret

00001f4a <__fp_split3>:
    1f4a:	57 fd       	sbrc	r21, 7
    1f4c:	90 58       	subi	r25, 0x80	; 128
    1f4e:	44 0f       	add	r20, r20
    1f50:	55 1f       	adc	r21, r21
    1f52:	59 f0       	breq	.+22     	; 0x1f6a <__fp_splitA+0x10>
    1f54:	5f 3f       	cpi	r21, 0xFF	; 255
    1f56:	71 f0       	breq	.+28     	; 0x1f74 <__fp_splitA+0x1a>
    1f58:	47 95       	ror	r20

00001f5a <__fp_splitA>:
    1f5a:	88 0f       	add	r24, r24
    1f5c:	97 fb       	bst	r25, 7
    1f5e:	99 1f       	adc	r25, r25
    1f60:	61 f0       	breq	.+24     	; 0x1f7a <__fp_splitA+0x20>
    1f62:	9f 3f       	cpi	r25, 0xFF	; 255
    1f64:	79 f0       	breq	.+30     	; 0x1f84 <__fp_splitA+0x2a>
    1f66:	87 95       	ror	r24
    1f68:	08 95       	ret
    1f6a:	12 16       	cp	r1, r18
    1f6c:	13 06       	cpc	r1, r19
    1f6e:	14 06       	cpc	r1, r20
    1f70:	55 1f       	adc	r21, r21
    1f72:	f2 cf       	rjmp	.-28     	; 0x1f58 <__fp_split3+0xe>
    1f74:	46 95       	lsr	r20
    1f76:	f1 df       	rcall	.-30     	; 0x1f5a <__fp_splitA>
    1f78:	08 c0       	rjmp	.+16     	; 0x1f8a <__fp_splitA+0x30>
    1f7a:	16 16       	cp	r1, r22
    1f7c:	17 06       	cpc	r1, r23
    1f7e:	18 06       	cpc	r1, r24
    1f80:	99 1f       	adc	r25, r25
    1f82:	f1 cf       	rjmp	.-30     	; 0x1f66 <__fp_splitA+0xc>
    1f84:	86 95       	lsr	r24
    1f86:	71 05       	cpc	r23, r1
    1f88:	61 05       	cpc	r22, r1
    1f8a:	08 94       	sec
    1f8c:	08 95       	ret

00001f8e <__fp_zero>:
    1f8e:	e8 94       	clt

00001f90 <__fp_szero>:
    1f90:	bb 27       	eor	r27, r27
    1f92:	66 27       	eor	r22, r22
    1f94:	77 27       	eor	r23, r23
    1f96:	cb 01       	movw	r24, r22
    1f98:	97 f9       	bld	r25, 7
    1f9a:	08 95       	ret

00001f9c <__mulsf3>:
    1f9c:	0b d0       	rcall	.+22     	; 0x1fb4 <__mulsf3x>
    1f9e:	c4 cf       	rjmp	.-120    	; 0x1f28 <__fp_round>
    1fa0:	b5 df       	rcall	.-150    	; 0x1f0c <__fp_pscA>
    1fa2:	28 f0       	brcs	.+10     	; 0x1fae <__mulsf3+0x12>
    1fa4:	ba df       	rcall	.-140    	; 0x1f1a <__fp_pscB>
    1fa6:	18 f0       	brcs	.+6      	; 0x1fae <__mulsf3+0x12>
    1fa8:	95 23       	and	r25, r21
    1faa:	09 f0       	breq	.+2      	; 0x1fae <__mulsf3+0x12>
    1fac:	a6 cf       	rjmp	.-180    	; 0x1efa <__fp_inf>
    1fae:	ab cf       	rjmp	.-170    	; 0x1f06 <__fp_nan>
    1fb0:	11 24       	eor	r1, r1
    1fb2:	ee cf       	rjmp	.-36     	; 0x1f90 <__fp_szero>

00001fb4 <__mulsf3x>:
    1fb4:	ca df       	rcall	.-108    	; 0x1f4a <__fp_split3>
    1fb6:	a0 f3       	brcs	.-24     	; 0x1fa0 <__mulsf3+0x4>

00001fb8 <__mulsf3_pse>:
    1fb8:	95 9f       	mul	r25, r21
    1fba:	d1 f3       	breq	.-12     	; 0x1fb0 <__mulsf3+0x14>
    1fbc:	95 0f       	add	r25, r21
    1fbe:	50 e0       	ldi	r21, 0x00	; 0
    1fc0:	55 1f       	adc	r21, r21
    1fc2:	62 9f       	mul	r22, r18
    1fc4:	f0 01       	movw	r30, r0
    1fc6:	72 9f       	mul	r23, r18
    1fc8:	bb 27       	eor	r27, r27
    1fca:	f0 0d       	add	r31, r0
    1fcc:	b1 1d       	adc	r27, r1
    1fce:	63 9f       	mul	r22, r19
    1fd0:	aa 27       	eor	r26, r26
    1fd2:	f0 0d       	add	r31, r0
    1fd4:	b1 1d       	adc	r27, r1
    1fd6:	aa 1f       	adc	r26, r26
    1fd8:	64 9f       	mul	r22, r20
    1fda:	66 27       	eor	r22, r22
    1fdc:	b0 0d       	add	r27, r0
    1fde:	a1 1d       	adc	r26, r1
    1fe0:	66 1f       	adc	r22, r22
    1fe2:	82 9f       	mul	r24, r18
    1fe4:	22 27       	eor	r18, r18
    1fe6:	b0 0d       	add	r27, r0
    1fe8:	a1 1d       	adc	r26, r1
    1fea:	62 1f       	adc	r22, r18
    1fec:	73 9f       	mul	r23, r19
    1fee:	b0 0d       	add	r27, r0
    1ff0:	a1 1d       	adc	r26, r1
    1ff2:	62 1f       	adc	r22, r18
    1ff4:	83 9f       	mul	r24, r19
    1ff6:	a0 0d       	add	r26, r0
    1ff8:	61 1d       	adc	r22, r1
    1ffa:	22 1f       	adc	r18, r18
    1ffc:	74 9f       	mul	r23, r20
    1ffe:	33 27       	eor	r19, r19
    2000:	a0 0d       	add	r26, r0
    2002:	61 1d       	adc	r22, r1
    2004:	23 1f       	adc	r18, r19
    2006:	84 9f       	mul	r24, r20
    2008:	60 0d       	add	r22, r0
    200a:	21 1d       	adc	r18, r1
    200c:	82 2f       	mov	r24, r18
    200e:	76 2f       	mov	r23, r22
    2010:	6a 2f       	mov	r22, r26
    2012:	11 24       	eor	r1, r1
    2014:	9f 57       	subi	r25, 0x7F	; 127
    2016:	50 40       	sbci	r21, 0x00	; 0
    2018:	8a f0       	brmi	.+34     	; 0x203c <__mulsf3_pse+0x84>
    201a:	e1 f0       	breq	.+56     	; 0x2054 <__mulsf3_pse+0x9c>
    201c:	88 23       	and	r24, r24
    201e:	4a f0       	brmi	.+18     	; 0x2032 <__mulsf3_pse+0x7a>
    2020:	ee 0f       	add	r30, r30
    2022:	ff 1f       	adc	r31, r31
    2024:	bb 1f       	adc	r27, r27
    2026:	66 1f       	adc	r22, r22
    2028:	77 1f       	adc	r23, r23
    202a:	88 1f       	adc	r24, r24
    202c:	91 50       	subi	r25, 0x01	; 1
    202e:	50 40       	sbci	r21, 0x00	; 0
    2030:	a9 f7       	brne	.-22     	; 0x201c <__mulsf3_pse+0x64>
    2032:	9e 3f       	cpi	r25, 0xFE	; 254
    2034:	51 05       	cpc	r21, r1
    2036:	70 f0       	brcs	.+28     	; 0x2054 <__mulsf3_pse+0x9c>
    2038:	60 cf       	rjmp	.-320    	; 0x1efa <__fp_inf>
    203a:	aa cf       	rjmp	.-172    	; 0x1f90 <__fp_szero>
    203c:	5f 3f       	cpi	r21, 0xFF	; 255
    203e:	ec f3       	brlt	.-6      	; 0x203a <__mulsf3_pse+0x82>
    2040:	98 3e       	cpi	r25, 0xE8	; 232
    2042:	dc f3       	brlt	.-10     	; 0x203a <__mulsf3_pse+0x82>
    2044:	86 95       	lsr	r24
    2046:	77 95       	ror	r23
    2048:	67 95       	ror	r22
    204a:	b7 95       	ror	r27
    204c:	f7 95       	ror	r31
    204e:	e7 95       	ror	r30
    2050:	9f 5f       	subi	r25, 0xFF	; 255
    2052:	c1 f7       	brne	.-16     	; 0x2044 <__mulsf3_pse+0x8c>
    2054:	fe 2b       	or	r31, r30
    2056:	88 0f       	add	r24, r24
    2058:	91 1d       	adc	r25, r1
    205a:	96 95       	lsr	r25
    205c:	87 95       	ror	r24
    205e:	97 f9       	bld	r25, 7
    2060:	08 95       	ret

00002062 <__umulhisi3>:
    2062:	a2 9f       	mul	r26, r18
    2064:	b0 01       	movw	r22, r0
    2066:	b3 9f       	mul	r27, r19
    2068:	c0 01       	movw	r24, r0
    206a:	a3 9f       	mul	r26, r19
    206c:	70 0d       	add	r23, r0
    206e:	81 1d       	adc	r24, r1
    2070:	11 24       	eor	r1, r1
    2072:	91 1d       	adc	r25, r1
    2074:	b2 9f       	mul	r27, r18
    2076:	70 0d       	add	r23, r0
    2078:	81 1d       	adc	r24, r1
    207a:	11 24       	eor	r1, r1
    207c:	91 1d       	adc	r25, r1
    207e:	08 95       	ret

00002080 <_exit>:
    2080:	f8 94       	cli

00002082 <__stop_program>:
    2082:	ff cf       	rjmp	.-2      	; 0x2082 <__stop_program>
